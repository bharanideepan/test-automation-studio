<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 5.0.1 (Python 3.9.20 on win32)" generated="20241124 14:17:31.037" rpa="true" schemaversion="3">
<suite id="s1" name="Start" source="C:\Users\Admin\Documents\Hackathon\Test Automation Studio\Test-automation-studio-projects\test-automation-rf\code\robots\start.robot">
<test id="s1-t1" name="initialize-fb-worker" line="42">
<kw name="execute-functional-block">
<tag>to-initialize-library</tag>
<doc>To execute fb</doc>
<while condition="'${TERMINATION_FLAG}' == 'False'">
<iter>
<kw name="launch-browser" library="COMP_BrowserContext">
<kw name="New Browser" library="RPA.Browser.Playwright">
<arg>chromium</arg>
<arg>headless=False</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new playwright Browser with specified options.</doc>
<msg timestamp="20241124 14:17:32.853" level="INFO">{"browser": "chromium", "headless": false, "devtools": false, "handleSIGHUP": true, "handleSIGINT": true, "handleSIGTERM": true, "slowMo": 0.0, "timeout": 30000.0, "deprecated_pos_args": [], "tracesDir": "C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\5423a042-0e05-4dec-92d2-91526f3e37f3"}</msg>
<msg timestamp="20241124 14:17:33.271" level="INFO">Successfully created browser with options: {"browser":"chromium","headless":false,"devtools":false,"handleSIGHUP":true,"handleSIGINT":true,"handleSIGTERM":true,"slowMo":0,"timeout":30000,"deprecated_pos_args":[],"tracesDir":"C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\5423a042-0e05-4dec-92d2-91526f3e37f3"}</msg>
<status status="PASS" starttime="20241124 14:17:32.853" endtime="20241124 14:17:33.271"/>
</kw>
<kw name="New Context" library="RPA.Browser.Playwright">
<arg>viewport={'width': 1280, 'height': 720}</arg>
<arg>acceptDownloads=True</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new BrowserContext with specified options.</doc>
<msg timestamp="20241124 14:17:33.271" level="INFO">{
  "acceptDownloads": true,
  "bypassCSP": false,
  "forcedColors": "none",
  "hideRfBrowser": false,
  "ignoreHTTPSErrors": false,
  "javaScriptEnabled": true,
  "offline": false,
  "reducedMotion": "no-preference",
  "viewport": {
    "width": 1280,
    "height": 720
  },
  "deprecated_pos_args": []
}</msg>
<msg timestamp="20241124 14:17:33.286" level="INFO">Successfully created context. </msg>
<msg timestamp="20241124 14:17:33.286" level="INFO">{'acceptDownloads': True, 'bypassCSP': False, 'forcedColors': 'none', 'hideRfBrowser': False, 'ignoreHTTPSErrors': False, 'javaScriptEnabled': True, 'offline': False, 'reducedMotion': 'no-preference', 'viewport': {'width': 1280, 'height': 720}, 'deprecated_pos_args': []}</msg>
<status status="PASS" starttime="20241124 14:17:33.271" endtime="20241124 14:17:33.286"/>
</kw>
<kw name="Set Browser Timeout" library="RPA.Browser.Playwright">
<arg>${browser_timeout}</arg>
<tag>Config</tag>
<tag>Setter</tag>
<doc>Sets the timeout used by most input and getter keywords.</doc>
<msg timestamp="20241124 14:17:33.302" level="INFO">Set timeout to: 20000</msg>
<status status="PASS" starttime="20241124 14:17:33.302" endtime="20241124 14:17:33.302"/>
</kw>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>https://www.google.com/</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241124 14:17:36.207" level="INFO">Successfully initialized new page object and opened url: https://www.google.com/</msg>
<msg timestamp="20241124 14:17:36.207" level="INFO">${page_id} = {'page_id': 'page=d89dab8f-0bd6-44a0-9dd0-91908998692c', 'video_path': ''}</msg>
<status status="PASS" starttime="20241124 14:17:33.302" endtime="20241124 14:17:36.207"/>
</kw>
<status status="PASS" starttime="20241124 14:17:32.853" endtime="20241124 14:17:36.207"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Polling message===&gt;</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:17:36.207" endtime="20241124 14:17:36.208"/>
</kw>
<kw name="Get A Command" library="CommandConsumer">
<var>${json}</var>
<arg>${5}</arg>
<msg timestamp="20241124 14:26:50.344" level="INFO">${json} = {'type': 'START_RUN', 'payload': {'testCaseRun': {'id': '38', 'testCaseId': '27', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-24T08:56:50.210Z', 'createdAt': '2024-11-24T08:56:50.210Z', 'errorMe...</msg>
<status status="PASS" starttime="20241124 14:17:36.208" endtime="20241124 14:26:50.344"/>
</kw>
<if>
<branch type="IF" condition="'${json}[type]' == 'KILL'">
<break>
<status status="NOT RUN" starttime="20241124 14:26:50.345" endtime="20241124 14:26:50.345"/>
</break>
<status status="NOT RUN" starttime="20241124 14:26:50.345" endtime="20241124 14:26:50.345"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.344" endtime="20241124 14:26:50.345"/>
</if>
<try>
<branch type="TRY">
<kw name="execute-test-case">
<arg>${json}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Data=&gt; ${input}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:50.346" endtime="20241124 14:26:50.355"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_type_exists}</var>
<arg>${input}</arg>
<arg>type</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:50.359" endtime="20241124 14:26:50.360"/>
</kw>
<msg timestamp="20241124 14:26:50.360" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.359" endtime="20241124 14:26:50.360"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.364" level="INFO">${values} = START_RUN</msg>
<status status="PASS" starttime="20241124 14:26:50.364" endtime="20241124 14:26:50.364"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.365" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.365" endtime="20241124 14:26:50.365"/>
</kw>
<status status="PASS" starttime="20241124 14:26:50.364" endtime="20241124 14:26:50.365"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:50.365" endtime="20241124 14:26:50.365"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:50.365" endtime="20241124 14:26:50.365"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.364" endtime="20241124 14:26:50.365"/>
</if>
<status status="PASS" starttime="20241124 14:26:50.363" endtime="20241124 14:26:50.366"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.360" endtime="20241124 14:26:50.366"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:50.366" endtime="20241124 14:26:50.366"/>
</return>
<msg timestamp="20241124 14:26:50.366" level="INFO">${is_type_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.358" endtime="20241124 14:26:50.367"/>
</kw>
<if>
<branch type="IF" condition="$is_type_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Type not exists in the input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:50.368" endtime="20241124 14:26:50.368"/>
</kw>
<return>
<status status="NOT RUN" starttime="20241124 14:26:50.369" endtime="20241124 14:26:50.369"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:50.367" endtime="20241124 14:26:50.370"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.367" endtime="20241124 14:26:50.371"/>
</if>
<if>
<branch type="IF" condition="'${input}[type]' == '${COMMAND_TYPE_START_RUN}'">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCase</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:50.377" endtime="20241124 14:26:50.377"/>
</kw>
<msg timestamp="20241124 14:26:50.378" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.376" endtime="20241124 14:26:50.378"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.379" level="INFO">${values} = {'id': '27', 'name': 'Login positive', 'projectId': '4', 'createdAt': '2024-11-21T16:43:35.118Z', 'updatedAt': '2024-11-24T06:57:13.357Z', 'testCaseFlowSequences': [{'id': '46', 'testCaseId': '27', 'f...</msg>
<status status="PASS" starttime="20241124 14:26:50.378" endtime="20241124 14:26:50.379"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.380" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.380" endtime="20241124 14:26:50.380"/>
</kw>
<status status="PASS" starttime="20241124 14:26:50.380" endtime="20241124 14:26:50.380"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:50.381" endtime="20241124 14:26:50.381"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:50.381" endtime="20241124 14:26:50.381"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.379" endtime="20241124 14:26:50.381"/>
</if>
<status status="PASS" starttime="20241124 14:26:50.378" endtime="20241124 14:26:50.381"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.378" endtime="20241124 14:26:50.381"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:50.382" endtime="20241124 14:26:50.382"/>
</return>
<msg timestamp="20241124 14:26:50.382" level="INFO">${is_test_case_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.375" endtime="20241124 14:26:50.382"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_run_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCaseRun</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:50.388" endtime="20241124 14:26:50.389"/>
</kw>
<msg timestamp="20241124 14:26:50.389" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.386" endtime="20241124 14:26:50.389"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.390" level="INFO">${values} = {'id': '38', 'testCaseId': '27', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-24T08:56:50.210Z', 'createdAt': '2024-11-24T08:56:50.210Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241124 14:26:50.390" endtime="20241124 14:26:50.390"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.391" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.391" endtime="20241124 14:26:50.391"/>
</kw>
<status status="PASS" starttime="20241124 14:26:50.391" endtime="20241124 14:26:50.392"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:50.392" endtime="20241124 14:26:50.393"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:50.392" endtime="20241124 14:26:50.393"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.390" endtime="20241124 14:26:50.393"/>
</if>
<status status="PASS" starttime="20241124 14:26:50.389" endtime="20241124 14:26:50.393"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.389" endtime="20241124 14:26:50.393"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:50.393" endtime="20241124 14:26:50.393"/>
</return>
<msg timestamp="20241124 14:26:50.394" level="INFO">${is_test_case_run_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.385" endtime="20241124 14:26:50.394"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_exists == $False or $is_test_case_run_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Testcase or TestCaseRun data not available in input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:50.395" endtime="20241124 14:26:50.395"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:50.394" endtime="20241124 14:26:50.395"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.394" endtime="20241124 14:26:50.395"/>
</if>
<kw name="Set Variable" library="BuiltIn">
<var>${testCase}</var>
<arg>${input}[payload][testCase]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.396" level="INFO">${testCase} = {'id': '27', 'name': 'Login positive', 'projectId': '4', 'createdAt': '2024-11-21T16:43:35.118Z', 'updatedAt': '2024-11-24T06:57:13.357Z', 'testCaseFlowSequences': [{'id': '46', 'testCaseId': '27', 'f...</msg>
<status status="PASS" starttime="20241124 14:26:50.395" endtime="20241124 14:26:50.396"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${testCaseRun}</var>
<arg>${input}[payload][testCaseRun]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.397" level="INFO">${testCaseRun} = {'id': '38', 'testCaseId': '27', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-24T08:56:50.210Z', 'createdAt': '2024-11-24T08:56:50.210Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241124 14:26:50.396" endtime="20241124 14:26:50.397"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${assertions}</var>
<arg>${testCase}[assertions]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.397" level="INFO">${assertions} = [{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cus...</msg>
<status status="PASS" starttime="20241124 14:26:50.397" endtime="20241124 14:26:50.397"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Name: ${testCase}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:50.397" endtime="20241124 14:26:50.398"/>
</kw>
<try>
<branch type="TRY">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_flow_sequences_exists}</var>
<arg>${testCase}</arg>
<arg>testCaseFlowSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:50.403" endtime="20241124 14:26:50.404"/>
</kw>
<msg timestamp="20241124 14:26:50.404" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.403" endtime="20241124 14:26:50.404"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.406" level="INFO">${values} = [{'id': '46', 'testCaseId': '27', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:35.233Z', 'updatedAt': '2024-11-24T06:57:13.419Z', 'flow': {'id': '14', 'name': 'Login', 'projectId': '4', ...</msg>
<status status="PASS" starttime="20241124 14:26:50.406" endtime="20241124 14:26:50.406"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.407" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.407" endtime="20241124 14:26:50.407"/>
</kw>
<status status="PASS" starttime="20241124 14:26:50.407" endtime="20241124 14:26:50.407"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:50.407" endtime="20241124 14:26:50.408"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:50.407" endtime="20241124 14:26:50.408"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.407" endtime="20241124 14:26:50.408"/>
</if>
<status status="PASS" starttime="20241124 14:26:50.405" endtime="20241124 14:26:50.408"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.404" endtime="20241124 14:26:50.408"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:50.408" endtime="20241124 14:26:50.408"/>
</return>
<msg timestamp="20241124 14:26:50.408" level="INFO">${is_test_case_flow_sequences_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.401" endtime="20241124 14:26:50.408"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${test_case_run_response_message}</var>
<arg>testCaseRunId=${testCaseRun}[id]</arg>
<arg>status=STARTED</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:26:50.409" level="INFO">${test_case_run_response_message} = {'testCaseRunId': '38', 'status': 'STARTED'}</msg>
<status status="PASS" starttime="20241124 14:26:50.409" endtime="20241124 14:26:50.409"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${test_case_run_response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:26:50.410" level="INFO">${json_response} = {"testCaseRunId": "38", "status": "STARTED"}</msg>
<status status="PASS" starttime="20241124 14:26:50.410" endtime="20241124 14:26:50.410"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:26:50.414" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:26:50.415" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:26:50.410" endtime="20241124 14:26:50.415"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:50.415" endtime="20241124 14:26:50.415"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:26:50.416" endtime="20241124 14:26:50.416"/>
</return>
<status status="PASS" starttime="20241124 14:26:50.410" endtime="20241124 14:26:50.416"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_flow_sequences_exists">
<kw name="Create Dictionary" library="BuiltIn">
<var>${ACCUMULATION}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:26:50.420" level="INFO">${ACCUMULATION} = {}</msg>
<status status="PASS" starttime="20241124 14:26:50.418" endtime="20241124 14:26:50.420"/>
</kw>
<for flavor="IN">
<var>${testCaseFlowSequence}</var>
<value>@{testCase}[testCaseFlowSequences]</value>
<iter>
<var name="${testCaseFlowSequence}">{'id': '46', 'testCaseId': '27', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:35.233Z', 'updatedAt': '2024-11-24T06:57:13.419Z', 'flow': {'id': '14', 'name': 'Login', 'projectId': '4', '...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.424" level="INFO">${flow} = {'id': '14', 'name': 'Login', 'projectId': '4', 'createdAt': '2024-11-21T16:43:09.327Z', 'updatedAt': '2024-11-22T04:20:41.623Z', 'flowActionSequences': [{'id': '41', 'actionId': '28', 'flowId': '14',...</msg>
<status status="PASS" starttime="20241124 14:26:50.423" endtime="20241124 14:26:50.424"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:50.424" endtime="20241124 14:26:50.425"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:50.428" endtime="20241124 14:26:50.428"/>
</kw>
<msg timestamp="20241124 14:26:50.428" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.428" endtime="20241124 14:26:50.428"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.429" level="INFO">${values} = [{'id': '41', 'actionId': '28', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:09.645Z', 'updatedAt': '2024-11-22T04:20:41.468Z', 'action': {'id': '28', 'name': 'Launch browser', 'type': '...</msg>
<status status="PASS" starttime="20241124 14:26:50.429" endtime="20241124 14:26:50.429"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.430" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.429" endtime="20241124 14:26:50.430"/>
</kw>
<status status="PASS" starttime="20241124 14:26:50.429" endtime="20241124 14:26:50.430"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:50.430" endtime="20241124 14:26:50.430"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:50.430" endtime="20241124 14:26:50.430"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.429" endtime="20241124 14:26:50.430"/>
</if>
<status status="PASS" starttime="20241124 14:26:50.429" endtime="20241124 14:26:50.430"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.428" endtime="20241124 14:26:50.430"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:50.430" endtime="20241124 14:26:50.430"/>
</return>
<msg timestamp="20241124 14:26:50.431" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:50.427" endtime="20241124 14:26:50.431"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '41', 'actionId': '28', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:09.645Z', 'updatedAt': '2024-11-22T04:20:41.468Z', 'action': {'id': '28', 'name': 'Launch browser', 'type': 'L...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.432" level="INFO">${action} = {'id': '28', 'name': 'Launch browser', 'type': 'LAUNCH_BROWSER', 'xpath': '', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:38:00.836Z', 'updatedAt': '2024-11-21T16:38:00.836Z', 'inpu...</msg>
<status status="PASS" starttime="20241124 14:26:50.431" endtime="20241124 14:26:50.432"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:50.432" endtime="20241124 14:26:50.432"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:26:50.436" level="INFO">${input} = {'id': '25', 'actionId': '28', 'name': 'Login page', 'value': 'https://iassistant.ideas2it.com/login', 'waitAfterAction': '1', 'isDefault': True, 'createdAt': '2024-11-21T16:38:01.166Z', 'updatedAt': ...</msg>
<status status="PASS" starttime="20241124 14:26:50.433" endtime="20241124 14:26:50.436"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:50.439" endtime="20241124 14:26:50.439"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:50.439" endtime="20241124 14:26:50.440"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:50.439" endtime="20241124 14:26:50.440"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.437" endtime="20241124 14:26:50.440"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:50.441" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241124 14:26:50.440" endtime="20241124 14:26:50.441"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>${url}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241124 14:26:55.692" level="INFO">Successfully initialized new page object and opened url: https://iassistant.ideas2it.com/login</msg>
<msg timestamp="20241124 14:26:55.692" level="INFO">${page_id} = {'page_id': 'page=2ab73880-0eb9-4ac3-9d20-4d55ec2537f4', 'video_path': ''}</msg>
<status status="PASS" starttime="20241124 14:26:50.442" endtime="20241124 14:26:55.692"/>
</kw>
<kw name="Switch Page" library="RPA.Browser.Playwright">
<arg>${page_id}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Switches the active browser page to another open page by ``id`` or ``NEW``.</doc>
<msg timestamp="20241124 14:26:55.693" level="INFO">Switching to page {'page_id': 'page=2ab73880-0eb9-4ac3-9d20-4d55ec2537f4', 'video_path': ''},context CURRENT, browser CURRENT</msg>
<msg timestamp="20241124 14:26:55.720" level="INFO">[
  {
    "type": "chromium",
    "id": "browser=15321571-803f-41c9-aa32-e26ca24b2a73",
    "contexts": [
      {
        "type": "context",
        "id": "context=e4f2854e-6703-49f7-9f85-099a2ed3b570",
        "activePage": "page=2ab73880-0eb9-4ac3-9d20-4d55ec2537f4",
        "pages": [
          {
            "type": "page",
            "title": "Google",
            "url": "https://www.google.com/",
            "id": "page=d89dab8f-0bd6-44a0-9dd0-91908998692c",
            "timestamp": 1732438053.503
          },
          {
            "type": "page",
            "title": "iAssistant",
            "url": "https://iassistant.ideas2it.com/login",
            "id": "page=2ab73880-0eb9-4ac3-9d20-4d55ec2537f4",
            "timestamp": 1732438610.496
          }
        ]
      }
    ],
    "activeContext": "context=e4f2854e-6703-49f7-9f85-099a2ed3b570",
    "activeBrowser": true
  }
]</msg>
<msg timestamp="20241124 14:26:55.727" level="INFO">Successfully changed active page</msg>
<status status="PASS" starttime="20241124 14:26:55.692" endtime="20241124 14:26:55.727"/>
</kw>
<status status="PASS" starttime="20241124 14:26:50.441" endtime="20241124 14:26:55.727"/>
</kw>
<status status="PASS" starttime="20241124 14:26:50.441" endtime="20241124 14:26:55.727"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:26:55.728" endtime="20241124 14:26:55.728"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.727" endtime="20241124 14:26:55.728"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.730" endtime="20241124 14:26:55.731"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.728" endtime="20241124 14:26:55.731"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.733" endtime="20241124 14:26:55.733"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.735" endtime="20241124 14:26:55.735"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.731" endtime="20241124 14:26:55.735"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.736" endtime="20241124 14:26:55.736"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.735" endtime="20241124 14:26:55.736"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.739" endtime="20241124 14:26:55.739"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.737" endtime="20241124 14:26:55.739"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.741" endtime="20241124 14:26:55.741"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.739" endtime="20241124 14:26:55.741"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.742" endtime="20241124 14:26:55.742"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.741" endtime="20241124 14:26:55.742"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.743" endtime="20241124 14:26:55.743"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.744" endtime="20241124 14:26:55.744"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.744" endtime="20241124 14:26:55.744"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.744" endtime="20241124 14:26:55.744"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.744" endtime="20241124 14:26:55.744"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:55.744" endtime="20241124 14:26:55.744"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:55.743" endtime="20241124 14:26:55.745"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:26:55.751" endtime="20241124 14:26:55.751"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.754" endtime="20241124 14:26:55.754"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.745" endtime="20241124 14:26:55.754"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.755" endtime="20241124 14:26:55.755"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.756" endtime="20241124 14:26:55.756"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.756" endtime="20241124 14:26:55.756"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.756" endtime="20241124 14:26:55.756"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.756" endtime="20241124 14:26:55.756"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:55.755" endtime="20241124 14:26:55.756"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:55.754" endtime="20241124 14:26:55.756"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:26:55.762" endtime="20241124 14:26:55.762"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.764" endtime="20241124 14:26:55.764"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.756" endtime="20241124 14:26:55.764"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.765" endtime="20241124 14:26:55.765"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.766" endtime="20241124 14:26:55.766"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.765" endtime="20241124 14:26:55.766"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.766" endtime="20241124 14:26:55.766"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.766" endtime="20241124 14:26:55.766"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:55.765" endtime="20241124 14:26:55.766"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:55.764" endtime="20241124 14:26:55.766"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.768" endtime="20241124 14:26:55.768"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.766" endtime="20241124 14:26:55.768"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:26:55.772" endtime="20241124 14:26:55.772"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:55.772" endtime="20241124 14:26:55.772"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:55.768" endtime="20241124 14:26:55.772"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.441" endtime="20241124 14:26:55.773"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:55.773" endtime="20241124 14:26:55.774"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:26:56.778" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241124 14:26:55.774" endtime="20241124 14:26:56.778"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:26:56.778" endtime="20241124 14:26:56.779"/>
</return>
<msg timestamp="20241124 14:26:56.779" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241124 14:26:50.440" endtime="20241124 14:26:56.779"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.781" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:41</msg>
<status status="PASS" starttime="20241124 14:26:56.780" endtime="20241124 14:26:56.781"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.782" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:26:56.782" endtime="20241124 14:26:56.782"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.783" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:26:56.782" endtime="20241124 14:26:56.783"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.783" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:26:56.783" endtime="20241124 14:26:56.783"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.784" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:26:56.784" endtime="20241124 14:26:56.784"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.785" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:26:56.784" endtime="20241124 14:26:56.785"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.785" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:26:56.785" endtime="20241124 14:26:56.785"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.786" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:26:56.786" endtime="20241124 14:26:56.786"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:56.786" endtime="20241124 14:26:56.787"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:26:56.792" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:26:56.790" endtime="20241124 14:26:56.792"/>
</kw>
<msg timestamp="20241124 14:26:56.792" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:56.790" endtime="20241124 14:26:56.792"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.793" endtime="20241124 14:26:56.793"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.794" endtime="20241124 14:26:56.794"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.793" endtime="20241124 14:26:56.794"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.795" endtime="20241124 14:26:56.795"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.794" endtime="20241124 14:26:56.795"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.793" endtime="20241124 14:26:56.795"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.793" endtime="20241124 14:26:56.795"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.792" endtime="20241124 14:26:56.795"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:56.796" endtime="20241124 14:26:56.796"/>
</return>
<msg timestamp="20241124 14:26:56.796" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:56.789" endtime="20241124 14:26:56.796"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:26:56.801" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:46::flowActionSequenceId:42'.</msg>
<status status="FAIL" starttime="20241124 14:26:56.800" endtime="20241124 14:26:56.801"/>
</kw>
<msg timestamp="20241124 14:26:56.801" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:56.799" endtime="20241124 14:26:56.801"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.802" endtime="20241124 14:26:56.802"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.802" endtime="20241124 14:26:56.803"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.802" endtime="20241124 14:26:56.803"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.803" endtime="20241124 14:26:56.803"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.803" endtime="20241124 14:26:56.803"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.802" endtime="20241124 14:26:56.804"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.801" endtime="20241124 14:26:56.804"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.801" endtime="20241124 14:26:56.804"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:56.804" endtime="20241124 14:26:56.804"/>
</return>
<msg timestamp="20241124 14:26:56.804" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:56.798" endtime="20241124 14:26:56.804"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:26:56.805" endtime="20241124 14:26:56.805"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.805" endtime="20241124 14:26:56.806"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.805" endtime="20241124 14:26:56.806"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.806" endtime="20241124 14:26:56.807"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:26:56.807" endtime="20241124 14:26:56.807"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.806" endtime="20241124 14:26:56.807"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.807" endtime="20241124 14:26:56.808"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:26:56.808" endtime="20241124 14:26:56.808"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.807" endtime="20241124 14:26:56.808"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.806" endtime="20241124 14:26:56.808"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.806" endtime="20241124 14:26:56.808"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.806" endtime="20241124 14:26:56.808"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.809" endtime="20241124 14:26:56.809"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:26:56.809" endtime="20241124 14:26:56.809"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.809" endtime="20241124 14:26:56.810"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.810" endtime="20241124 14:26:56.811"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:26:56.811" endtime="20241124 14:26:56.811"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.810" endtime="20241124 14:26:56.811"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.809" endtime="20241124 14:26:56.811"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.809" endtime="20241124 14:26:56.811"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.808" endtime="20241124 14:26:56.811"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.805" endtime="20241124 14:26:56.811"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.805" endtime="20241124 14:26:56.811"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:26:56.812" endtime="20241124 14:26:56.812"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.812" endtime="20241124 14:26:56.812"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.812" endtime="20241124 14:26:56.813"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.813" endtime="20241124 14:26:56.813"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.813" endtime="20241124 14:26:56.813"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.813" endtime="20241124 14:26:56.813"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.814" endtime="20241124 14:26:56.814"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.815" endtime="20241124 14:26:56.815"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:26:56.815" endtime="20241124 14:26:56.815"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.814" endtime="20241124 14:26:56.815"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.815" endtime="20241124 14:26:56.816"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:26:56.816" endtime="20241124 14:26:56.816"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.815" endtime="20241124 14:26:56.816"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.814" endtime="20241124 14:26:56.816"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.814" endtime="20241124 14:26:56.816"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.814" endtime="20241124 14:26:56.816"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.812" endtime="20241124 14:26:56.816"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.811" endtime="20241124 14:26:56.817"/>
</if>
<status status="PASS" starttime="20241124 14:26:56.781" endtime="20241124 14:26:56.817"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.818" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:26:56.817" endtime="20241124 14:26:56.818"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.818" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:26:56.818" endtime="20241124 14:26:56.818"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.819" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:26:56.818" endtime="20241124 14:26:56.819"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.819" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:26:56.819" endtime="20241124 14:26:56.819"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.819" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.819" endtime="20241124 14:26:56.819"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.820" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:26:56.819" endtime="20241124 14:26:56.820"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.820" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:26:56.820" endtime="20241124 14:26:56.820"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:56.820" endtime="20241124 14:26:56.821"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:26:56.823" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:26:56.822" endtime="20241124 14:26:56.823"/>
</kw>
<msg timestamp="20241124 14:26:56.823" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:56.822" endtime="20241124 14:26:56.823"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.824" endtime="20241124 14:26:56.824"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.824" endtime="20241124 14:26:56.824"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.824" endtime="20241124 14:26:56.825"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.825" endtime="20241124 14:26:56.825"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.825" endtime="20241124 14:26:56.825"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.824" endtime="20241124 14:26:56.825"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.824" endtime="20241124 14:26:56.825"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.824" endtime="20241124 14:26:56.825"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:56.825" endtime="20241124 14:26:56.825"/>
</return>
<msg timestamp="20241124 14:26:56.825" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:56.822" endtime="20241124 14:26:56.826"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:26:56.829" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:26:56.828" endtime="20241124 14:26:56.829"/>
</kw>
<msg timestamp="20241124 14:26:56.829" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:56.828" endtime="20241124 14:26:56.829"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.830" endtime="20241124 14:26:56.830"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.830" endtime="20241124 14:26:56.830"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.830" endtime="20241124 14:26:56.830"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.830" endtime="20241124 14:26:56.830"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.830" endtime="20241124 14:26:56.831"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.830" endtime="20241124 14:26:56.831"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.829" endtime="20241124 14:26:56.831"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.829" endtime="20241124 14:26:56.831"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:56.831" endtime="20241124 14:26:56.831"/>
</return>
<msg timestamp="20241124 14:26:56.831" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:56.828" endtime="20241124 14:26:56.831"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:26:56.832" endtime="20241124 14:26:56.832"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.832" endtime="20241124 14:26:56.832"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.832" endtime="20241124 14:26:56.832"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.833" endtime="20241124 14:26:56.833"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:26:56.833" endtime="20241124 14:26:56.833"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.833" endtime="20241124 14:26:56.833"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.834" endtime="20241124 14:26:56.834"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:26:56.834" endtime="20241124 14:26:56.834"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.833" endtime="20241124 14:26:56.834"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.832" endtime="20241124 14:26:56.834"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.832" endtime="20241124 14:26:56.834"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.832" endtime="20241124 14:26:56.834"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.835" endtime="20241124 14:26:56.835"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:26:56.835" endtime="20241124 14:26:56.835"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.834" endtime="20241124 14:26:56.835"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.835" endtime="20241124 14:26:56.835"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:26:56.835" endtime="20241124 14:26:56.835"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.835" endtime="20241124 14:26:56.835"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.834" endtime="20241124 14:26:56.835"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.834" endtime="20241124 14:26:56.836"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.834" endtime="20241124 14:26:56.836"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.832" endtime="20241124 14:26:56.836"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.831" endtime="20241124 14:26:56.836"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:26:56.836" endtime="20241124 14:26:56.836"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.836" endtime="20241124 14:26:56.836"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.836" endtime="20241124 14:26:56.836"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.837" endtime="20241124 14:26:56.837"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.837" endtime="20241124 14:26:56.837"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.837" endtime="20241124 14:26:56.837"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.837" endtime="20241124 14:26:56.837"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.838" endtime="20241124 14:26:56.838"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:26:56.838" endtime="20241124 14:26:56.838"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.837" endtime="20241124 14:26:56.838"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.838" endtime="20241124 14:26:56.838"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:26:56.838" endtime="20241124 14:26:56.838"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.838" endtime="20241124 14:26:56.838"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.837" endtime="20241124 14:26:56.838"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.837" endtime="20241124 14:26:56.839"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:56.837" endtime="20241124 14:26:56.839"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:56.836" endtime="20241124 14:26:56.839"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.836" endtime="20241124 14:26:56.839"/>
</if>
<status status="PASS" starttime="20241124 14:26:56.817" endtime="20241124 14:26:56.839"/>
</iter>
<status status="PASS" starttime="20241124 14:26:56.781" endtime="20241124 14:26:56.839"/>
</for>
<msg timestamp="20241124 14:26:56.839" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:26:56.779" endtime="20241124 14:26:56.839"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:56.839" endtime="20241124 14:26:56.840"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:26:56.844" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '280', 'status': 'COMPLETED', 'actionName': 'Launch browser', 'actionType': 'LAUNCH_BROWSER', 'actionXpath': '', 'inputValue': 'https://iassistant.ideas2it.com/login', ...</msg>
<status status="PASS" starttime="20241124 14:26:56.842" endtime="20241124 14:26:56.844"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:26:56.845" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "280", "status": "COMPLETED", "actionName": "Launch browser", "actionType": "LAUNCH_BROWSER", "actionXpath": "", "inputValue": "https://iassistant.ideas2it.com/login", ...</msg>
<status status="PASS" starttime="20241124 14:26:56.845" endtime="20241124 14:26:56.845"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:26:56.849" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:26:56.849" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:26:56.845" endtime="20241124 14:26:56.849"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:56.850" endtime="20241124 14:26:56.850"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:26:56.852" endtime="20241124 14:26:56.852"/>
</return>
<status status="PASS" starttime="20241124 14:26:56.844" endtime="20241124 14:26:56.852"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.840" endtime="20241124 14:26:56.853"/>
</kw>
<status status="PASS" starttime="20241124 14:26:50.431" endtime="20241124 14:26:56.853"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.853" endtime="20241124 14:26:56.854"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:26:56.854" endtime="20241124 14:26:56.854"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.854" endtime="20241124 14:26:56.855"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.853" endtime="20241124 14:26:56.855"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.431" endtime="20241124 14:26:56.855"/>
</try>
<status status="PASS" starttime="20241124 14:26:50.431" endtime="20241124 14:26:56.855"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '43', 'actionId': '30', 'flowId': '14', 'order': 1, 'createdAt': '2024-11-21T16:43:09.646Z', 'updatedAt': '2024-11-22T04:20:41.490Z', 'action': {'id': '30', 'name': 'Set login password', 'type'...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.856" level="INFO">${action} = {'id': '30', 'name': 'Set login password', 'type': 'TYPE_TEXT', 'xpath': '//input[@id="password"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:39:54.768Z', 'updatedAt': '2024-11-21...</msg>
<status status="PASS" starttime="20241124 14:26:56.856" endtime="20241124 14:26:56.856"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:56.856" endtime="20241124 14:26:56.857"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:26:56.858" level="INFO">${input} = {'id': '27', 'actionId': '30', 'name': 'Bharani', 'value': 'vijaybharani', 'waitAfterAction': '1', 'isDefault': True, 'createdAt': '2024-11-21T16:39:55.091Z', 'updatedAt': '2024-11-21T17:23:21.466Z'}</msg>
<status status="PASS" starttime="20241124 14:26:56.858" endtime="20241124 14:26:56.858"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.859" endtime="20241124 14:26:56.859"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.860" endtime="20241124 14:26:56.860"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.859" endtime="20241124 14:26:56.860"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.858" endtime="20241124 14:26:56.860"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:56.861" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:26:56.861" endtime="20241124 14:26:56.861"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:26:56.862" endtime="20241124 14:26:56.863"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.862" endtime="20241124 14:26:56.863"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:26:56.864" endtime="20241124 14:26:56.864"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.863" endtime="20241124 14:26:56.864"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.867" endtime="20241124 14:26:56.868"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.864" endtime="20241124 14:26:56.868"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.871" endtime="20241124 14:26:56.871"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.872" endtime="20241124 14:26:56.872"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.868" endtime="20241124 14:26:56.872"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.873" endtime="20241124 14:26:56.873"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.873" endtime="20241124 14:26:56.874"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.876" endtime="20241124 14:26:56.876"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.874" endtime="20241124 14:26:56.876"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="password"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:56.908" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:26:56.884" endtime="20241124 14:26:56.908"/>
</kw>
<msg timestamp="20241124 14:26:56.908" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.884" endtime="20241124 14:26:56.908"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:56.908" endtime="20241124 14:26:56.908"/>
</return>
<status status="PASS" starttime="20241124 14:26:56.884" endtime="20241124 14:26:56.908"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.909" endtime="20241124 14:26:56.909"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.909" endtime="20241124 14:26:56.909"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.908" endtime="20241124 14:26:56.909"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.884" endtime="20241124 14:26:56.909"/>
</try>
<msg timestamp="20241124 14:26:56.909" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.883" endtime="20241124 14:26:56.909"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:56.909" endtime="20241124 14:26:56.909"/>
</return>
<status status="PASS" starttime="20241124 14:26:56.882" endtime="20241124 14:26:56.910"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:26:56.910" endtime="20241124 14:26:56.910"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.910" endtime="20241124 14:26:56.910"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.882" endtime="20241124 14:26:56.910"/>
</try>
<msg timestamp="20241124 14:26:56.910" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.882" endtime="20241124 14:26:56.911"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.913" endtime="20241124 14:26:56.913"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.913" endtime="20241124 14:26:56.913"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.913" endtime="20241124 14:26:56.913"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.913" endtime="20241124 14:26:56.913"/>
</if>
<status status="PASS" starttime="20241124 14:26:56.912" endtime="20241124 14:26:56.913"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.881" endtime="20241124 14:26:56.914"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:56.925" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:26:56.920" endtime="20241124 14:26:56.925"/>
</kw>
<msg timestamp="20241124 14:26:56.926" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.920" endtime="20241124 14:26:56.926"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:56.926" endtime="20241124 14:26:56.926"/>
</return>
<status status="PASS" starttime="20241124 14:26:56.920" endtime="20241124 14:26:56.926"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.926" endtime="20241124 14:26:56.926"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.926" endtime="20241124 14:26:56.927"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.926" endtime="20241124 14:26:56.927"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.920" endtime="20241124 14:26:56.927"/>
</try>
<msg timestamp="20241124 14:26:56.927" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.919" endtime="20241124 14:26:56.927"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:56.928" endtime="20241124 14:26:56.928"/>
</return>
<status status="PASS" starttime="20241124 14:26:56.919" endtime="20241124 14:26:56.928"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:26:56.928" endtime="20241124 14:26:56.928"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:56.928" endtime="20241124 14:26:56.928"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.918" endtime="20241124 14:26:56.928"/>
</try>
<msg timestamp="20241124 14:26:56.928" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.918" endtime="20241124 14:26:56.928"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.930" endtime="20241124 14:26:56.930"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.931" endtime="20241124 14:26:56.931"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.930" endtime="20241124 14:26:56.931"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.930" endtime="20241124 14:26:56.931"/>
</if>
<status status="PASS" starttime="20241124 14:26:56.929" endtime="20241124 14:26:56.931"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.918" endtime="20241124 14:26:56.931"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:26:56.949" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:26:56.949" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:26:56.931" endtime="20241124 14:26:56.949"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:26:56.949" endtime="20241124 14:26:56.949"/>
</return>
<status status="PASS" starttime="20241124 14:26:56.931" endtime="20241124 14:26:56.949"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.950" endtime="20241124 14:26:56.950"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.950" endtime="20241124 14:26:56.950"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.949" endtime="20241124 14:26:56.950"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.931" endtime="20241124 14:26:56.950"/>
</try>
<msg timestamp="20241124 14:26:56.950" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:26:56.916" endtime="20241124 14:26:56.950"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.952" endtime="20241124 14:26:56.952"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.952" endtime="20241124 14:26:56.952"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.952" endtime="20241124 14:26:56.952"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.952" endtime="20241124 14:26:56.952"/>
</if>
<status status="PASS" starttime="20241124 14:26:56.951" endtime="20241124 14:26:56.953"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.915" endtime="20241124 14:26:56.953"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.953" endtime="20241124 14:26:56.953"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.953" endtime="20241124 14:26:56.953"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.915" endtime="20241124 14:26:56.953"/>
</try>
<status status="PASS" starttime="20241124 14:26:56.915" endtime="20241124 14:26:56.953"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:56.961" level="INFO">Waited for Element with selector //input[@id="password"] at state visible</msg>
<status status="PASS" starttime="20241124 14:26:56.957" endtime="20241124 14:26:56.962"/>
</kw>
<msg timestamp="20241124 14:26:56.962" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.956" endtime="20241124 14:26:56.962"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:56.962" endtime="20241124 14:26:56.962"/>
</return>
<status status="PASS" starttime="20241124 14:26:56.956" endtime="20241124 14:26:56.962"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.962" endtime="20241124 14:26:56.963"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.963" endtime="20241124 14:26:56.963"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.962" endtime="20241124 14:26:56.963"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.956" endtime="20241124 14:26:56.963"/>
</try>
<msg timestamp="20241124 14:26:56.963" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.956" endtime="20241124 14:26:56.963"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:56.963" endtime="20241124 14:26:56.963"/>
</return>
<msg timestamp="20241124 14:26:56.964" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.955" endtime="20241124 14:26:56.964"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.965" endtime="20241124 14:26:56.966"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.966" endtime="20241124 14:26:56.966"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.965" endtime="20241124 14:26:56.966"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.965" endtime="20241124 14:26:56.966"/>
</if>
<status status="PASS" starttime="20241124 14:26:56.964" endtime="20241124 14:26:56.966"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.954" endtime="20241124 14:26:56.966"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.880" endtime="20241124 14:26:56.966"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:56.985" level="INFO">Waited for Element with selector //input[@id="password"] at state editable</msg>
<status status="PASS" starttime="20241124 14:26:56.970" endtime="20241124 14:26:56.985"/>
</kw>
<msg timestamp="20241124 14:26:56.985" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.970" endtime="20241124 14:26:56.985"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:56.985" endtime="20241124 14:26:56.986"/>
</return>
<status status="PASS" starttime="20241124 14:26:56.969" endtime="20241124 14:26:56.986"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.986" endtime="20241124 14:26:56.986"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.986" endtime="20241124 14:26:56.986"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.986" endtime="20241124 14:26:56.986"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.969" endtime="20241124 14:26:56.986"/>
</try>
<msg timestamp="20241124 14:26:56.987" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.969" endtime="20241124 14:26:56.987"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:56.987" endtime="20241124 14:26:56.987"/>
</return>
<msg timestamp="20241124 14:26:56.987" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241124 14:26:56.968" endtime="20241124 14:26:56.987"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.989" endtime="20241124 14:26:56.989"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.989" endtime="20241124 14:26:56.989"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.989" endtime="20241124 14:26:56.989"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.989" endtime="20241124 14:26:56.989"/>
</if>
<status status="PASS" starttime="20241124 14:26:56.988" endtime="20241124 14:26:56.989"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.968" endtime="20241124 14:26:56.989"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:26:56.990" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:26:56.990" endtime="20241124 14:26:56.990"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="password"]: string</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.991" endtime="20241124 14:26:56.991"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:26:56.993" endtime="20241124 14:26:56.993"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:56.991" endtime="20241124 14:26:56.993"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:56.993" endtime="20241124 14:26:56.994"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.993" endtime="20241124 14:26:56.994"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.991" endtime="20241124 14:26:56.994"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241124 14:26:56.994" level="INFO">Fills the text 'vijaybharani' in the given field.</msg>
<status status="PASS" starttime="20241124 14:26:56.994" endtime="20241124 14:26:57.019"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.994" endtime="20241124 14:26:57.019"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.019" endtime="20241124 14:26:57.019"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.020" endtime="20241124 14:26:57.020"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.019" endtime="20241124 14:26:57.020"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.994" endtime="20241124 14:26:57.020"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="password"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:57.032" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:26:57.025" endtime="20241124 14:26:57.032"/>
</kw>
<msg timestamp="20241124 14:26:57.032" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.025" endtime="20241124 14:26:57.032"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:57.032" endtime="20241124 14:26:57.032"/>
</return>
<status status="PASS" starttime="20241124 14:26:57.025" endtime="20241124 14:26:57.032"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.032" endtime="20241124 14:26:57.032"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.033" endtime="20241124 14:26:57.033"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.032" endtime="20241124 14:26:57.033"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.025" endtime="20241124 14:26:57.033"/>
</try>
<msg timestamp="20241124 14:26:57.033" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.024" endtime="20241124 14:26:57.033"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:57.033" endtime="20241124 14:26:57.033"/>
</return>
<status status="PASS" starttime="20241124 14:26:57.023" endtime="20241124 14:26:57.033"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:26:57.033" endtime="20241124 14:26:57.033"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:57.033" endtime="20241124 14:26:57.033"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.023" endtime="20241124 14:26:57.033"/>
</try>
<msg timestamp="20241124 14:26:57.034" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.023" endtime="20241124 14:26:57.034"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.036" endtime="20241124 14:26:57.036"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.036" endtime="20241124 14:26:57.036"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.035" endtime="20241124 14:26:57.036"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.035" endtime="20241124 14:26:57.036"/>
</if>
<status status="PASS" starttime="20241124 14:26:57.035" endtime="20241124 14:26:57.036"/>
</kw>
<status status="PASS" starttime="20241124 14:26:57.023" endtime="20241124 14:26:57.036"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:57.049" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:26:57.043" endtime="20241124 14:26:57.050"/>
</kw>
<msg timestamp="20241124 14:26:57.050" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.043" endtime="20241124 14:26:57.050"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:57.050" endtime="20241124 14:26:57.050"/>
</return>
<status status="PASS" starttime="20241124 14:26:57.043" endtime="20241124 14:26:57.050"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.050" endtime="20241124 14:26:57.050"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.050" endtime="20241124 14:26:57.051"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.050" endtime="20241124 14:26:57.051"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.043" endtime="20241124 14:26:57.051"/>
</try>
<msg timestamp="20241124 14:26:57.051" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.042" endtime="20241124 14:26:57.051"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:57.051" endtime="20241124 14:26:57.051"/>
</return>
<status status="PASS" starttime="20241124 14:26:57.041" endtime="20241124 14:26:57.051"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:26:57.051" endtime="20241124 14:26:57.051"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:57.051" endtime="20241124 14:26:57.051"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.041" endtime="20241124 14:26:57.051"/>
</try>
<msg timestamp="20241124 14:26:57.052" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.041" endtime="20241124 14:26:57.052"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.053" endtime="20241124 14:26:57.054"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.054" endtime="20241124 14:26:57.054"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.053" endtime="20241124 14:26:57.054"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.053" endtime="20241124 14:26:57.054"/>
</if>
<status status="PASS" starttime="20241124 14:26:57.052" endtime="20241124 14:26:57.054"/>
</kw>
<status status="PASS" starttime="20241124 14:26:57.041" endtime="20241124 14:26:57.054"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:26:57.064" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:26:57.064" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:26:57.054" endtime="20241124 14:26:57.064"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:26:57.064" endtime="20241124 14:26:57.064"/>
</return>
<status status="PASS" starttime="20241124 14:26:57.054" endtime="20241124 14:26:57.064"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.064" endtime="20241124 14:26:57.065"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.065" endtime="20241124 14:26:57.065"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.064" endtime="20241124 14:26:57.065"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.054" endtime="20241124 14:26:57.065"/>
</try>
<msg timestamp="20241124 14:26:57.065" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:26:57.039" endtime="20241124 14:26:57.065"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.067" endtime="20241124 14:26:57.067"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.067" endtime="20241124 14:26:57.067"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.067" endtime="20241124 14:26:57.067"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.067" endtime="20241124 14:26:57.067"/>
</if>
<status status="PASS" starttime="20241124 14:26:57.066" endtime="20241124 14:26:57.067"/>
</kw>
<status status="PASS" starttime="20241124 14:26:57.038" endtime="20241124 14:26:57.067"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.068" endtime="20241124 14:26:57.068"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.068" endtime="20241124 14:26:57.068"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.038" endtime="20241124 14:26:57.068"/>
</try>
<status status="PASS" starttime="20241124 14:26:57.038" endtime="20241124 14:26:57.068"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:57.078" level="INFO">Waited for Element with selector //input[@id="password"] at state visible</msg>
<status status="PASS" starttime="20241124 14:26:57.072" endtime="20241124 14:26:57.078"/>
</kw>
<msg timestamp="20241124 14:26:57.078" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.071" endtime="20241124 14:26:57.078"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:57.079" endtime="20241124 14:26:57.079"/>
</return>
<status status="PASS" starttime="20241124 14:26:57.071" endtime="20241124 14:26:57.079"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.079" endtime="20241124 14:26:57.079"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.079" endtime="20241124 14:26:57.079"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.079" endtime="20241124 14:26:57.079"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.071" endtime="20241124 14:26:57.079"/>
</try>
<msg timestamp="20241124 14:26:57.080" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.071" endtime="20241124 14:26:57.080"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:57.080" endtime="20241124 14:26:57.080"/>
</return>
<msg timestamp="20241124 14:26:57.080" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.070" endtime="20241124 14:26:57.080"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.082" endtime="20241124 14:26:57.082"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.082" endtime="20241124 14:26:57.082"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.082" endtime="20241124 14:26:57.082"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.082" endtime="20241124 14:26:57.082"/>
</if>
<status status="PASS" starttime="20241124 14:26:57.081" endtime="20241124 14:26:57.082"/>
</kw>
<status status="PASS" starttime="20241124 14:26:57.069" endtime="20241124 14:26:57.082"/>
</kw>
<status status="PASS" starttime="20241124 14:26:57.021" endtime="20241124 14:26:57.082"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:57.092" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:26:57.087" endtime="20241124 14:26:57.092"/>
</kw>
<msg timestamp="20241124 14:26:57.092" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.087" endtime="20241124 14:26:57.092"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:57.092" endtime="20241124 14:26:57.092"/>
</return>
<status status="PASS" starttime="20241124 14:26:57.087" endtime="20241124 14:26:57.092"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.093" endtime="20241124 14:26:57.093"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.093" endtime="20241124 14:26:57.093"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.092" endtime="20241124 14:26:57.093"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.087" endtime="20241124 14:26:57.093"/>
</try>
<msg timestamp="20241124 14:26:57.093" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.086" endtime="20241124 14:26:57.094"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:57.094" endtime="20241124 14:26:57.094"/>
</return>
<status status="PASS" starttime="20241124 14:26:57.086" endtime="20241124 14:26:57.094"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:26:57.094" endtime="20241124 14:26:57.094"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:57.094" endtime="20241124 14:26:57.094"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.085" endtime="20241124 14:26:57.094"/>
</try>
<msg timestamp="20241124 14:26:57.095" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.085" endtime="20241124 14:26:57.095"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.097" endtime="20241124 14:26:57.097"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.097" endtime="20241124 14:26:57.097"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.097" endtime="20241124 14:26:57.097"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.096" endtime="20241124 14:26:57.097"/>
</if>
<status status="PASS" starttime="20241124 14:26:57.096" endtime="20241124 14:26:57.097"/>
</kw>
<status status="PASS" starttime="20241124 14:26:57.085" endtime="20241124 14:26:57.097"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:26:57.106" level="INFO">Property: 'vijaybharani'</msg>
<msg timestamp="20241124 14:26:57.107" level="INFO">${property} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:26:57.098" endtime="20241124 14:26:57.107"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:26:57.107" endtime="20241124 14:26:57.107"/>
</return>
<status status="PASS" starttime="20241124 14:26:57.098" endtime="20241124 14:26:57.107"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.107" endtime="20241124 14:26:57.107"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.107" endtime="20241124 14:26:57.108"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.107" endtime="20241124 14:26:57.108"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.097" endtime="20241124 14:26:57.108"/>
</try>
<msg timestamp="20241124 14:26:57.108" level="INFO">${fieldTextValue} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:26:57.083" endtime="20241124 14:26:57.108"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241124 14:26:57.108" endtime="20241124 14:26:57.108"/>
</return>
<msg timestamp="20241124 14:26:57.108" level="INFO">${populated_value} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:26:57.021" endtime="20241124 14:26:57.108"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241124 14:26:57.115" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.111" endtime="20241124 14:26:57.115"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:57.115" endtime="20241124 14:26:57.115"/>
</return>
<msg timestamp="20241124 14:26:57.115" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241124 14:26:57.110" endtime="20241124 14:26:57.115"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.119" endtime="20241124 14:26:57.119"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.119" endtime="20241124 14:26:57.119"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.118" endtime="20241124 14:26:57.119"/>
</branch>
<status status="PASS" starttime="20241124 14:26:57.118" endtime="20241124 14:26:57.119"/>
</if>
<status status="PASS" starttime="20241124 14:26:57.118" endtime="20241124 14:26:57.119"/>
</kw>
<status status="PASS" starttime="20241124 14:26:57.020" endtime="20241124 14:26:57.119"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.991" endtime="20241124 14:26:57.119"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.990" endtime="20241124 14:26:57.119"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.990" endtime="20241124 14:26:57.119"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.120" endtime="20241124 14:26:57.120"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.120" endtime="20241124 14:26:57.120"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.990" endtime="20241124 14:26:57.120"/>
</try>
<status status="PASS" starttime="20241124 14:26:56.879" endtime="20241124 14:26:57.120"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.877" endtime="20241124 14:26:57.120"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.121" endtime="20241124 14:26:57.121"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.120" endtime="20241124 14:26:57.121"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.122" endtime="20241124 14:26:57.122"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.122" endtime="20241124 14:26:57.122"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.122" endtime="20241124 14:26:57.122"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.123" endtime="20241124 14:26:57.123"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.123" endtime="20241124 14:26:57.123"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:57.122" endtime="20241124 14:26:57.123"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:57.121" endtime="20241124 14:26:57.123"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:26:57.127" endtime="20241124 14:26:57.127"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.130" endtime="20241124 14:26:57.130"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.123" endtime="20241124 14:26:57.130"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.131" endtime="20241124 14:26:57.131"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.131" endtime="20241124 14:26:57.131"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.131" endtime="20241124 14:26:57.131"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.132" endtime="20241124 14:26:57.132"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.131" endtime="20241124 14:26:57.132"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:57.131" endtime="20241124 14:26:57.132"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:57.130" endtime="20241124 14:26:57.132"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:26:57.136" endtime="20241124 14:26:57.136"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.139" endtime="20241124 14:26:57.139"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.132" endtime="20241124 14:26:57.139"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.140" endtime="20241124 14:26:57.140"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.141" endtime="20241124 14:26:57.141"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.140" endtime="20241124 14:26:57.141"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.141" endtime="20241124 14:26:57.141"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.141" endtime="20241124 14:26:57.141"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:57.140" endtime="20241124 14:26:57.141"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:57.139" endtime="20241124 14:26:57.141"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.143" endtime="20241124 14:26:57.143"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.141" endtime="20241124 14:26:57.143"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:26:57.149" endtime="20241124 14:26:57.149"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:57.149" endtime="20241124 14:26:57.149"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:57.143" endtime="20241124 14:26:57.149"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.862" endtime="20241124 14:26:57.149"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:57.149" endtime="20241124 14:26:57.150"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:26:58.158" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241124 14:26:57.150" endtime="20241124 14:26:58.158"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:26:58.158" endtime="20241124 14:26:58.159"/>
</return>
<msg timestamp="20241124 14:26:58.159" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:26:56.861" endtime="20241124 14:26:58.160"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.162" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:43</msg>
<status status="PASS" starttime="20241124 14:26:58.162" endtime="20241124 14:26:58.162"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.164" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:26:58.163" endtime="20241124 14:26:58.164"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.165" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:26:58.164" endtime="20241124 14:26:58.165"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.167" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:26:58.166" endtime="20241124 14:26:58.167"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.169" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:26:58.168" endtime="20241124 14:26:58.169"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.171" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:26:58.170" endtime="20241124 14:26:58.171"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.173" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:26:58.172" endtime="20241124 14:26:58.173"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.175" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:26:58.174" endtime="20241124 14:26:58.176"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:58.177" endtime="20241124 14:26:58.177"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:26:58.177" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:26:58.177" endtime="20241124 14:26:58.177"/>
</kw>
<msg timestamp="20241124 14:26:58.177" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:58.177" endtime="20241124 14:26:58.177"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.194" endtime="20241124 14:26:58.194"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.194" endtime="20241124 14:26:58.194"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.194" endtime="20241124 14:26:58.194"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.194" endtime="20241124 14:26:58.194"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.194" endtime="20241124 14:26:58.194"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.194" endtime="20241124 14:26:58.194"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.194" endtime="20241124 14:26:58.194"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.177" endtime="20241124 14:26:58.194"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:58.194" endtime="20241124 14:26:58.194"/>
</return>
<msg timestamp="20241124 14:26:58.194" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:58.177" endtime="20241124 14:26:58.194"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:26:58.211" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:46::flowActionSequenceId:42'.</msg>
<status status="FAIL" starttime="20241124 14:26:58.211" endtime="20241124 14:26:58.211"/>
</kw>
<msg timestamp="20241124 14:26:58.211" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:58.211" endtime="20241124 14:26:58.211"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.211" endtime="20241124 14:26:58.211"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.211" endtime="20241124 14:26:58.211"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.211" endtime="20241124 14:26:58.211"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.211" endtime="20241124 14:26:58.211"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.211" endtime="20241124 14:26:58.227"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.211" endtime="20241124 14:26:58.227"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.211" endtime="20241124 14:26:58.227"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.211" endtime="20241124 14:26:58.227"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</return>
<msg timestamp="20241124 14:26:58.227" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:58.211" endtime="20241124 14:26:58.227"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.227" endtime="20241124 14:26:58.227"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.163" endtime="20241124 14:26:58.227"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.243" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.243" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.243" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.243" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.243" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.243" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.243" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:26:58.243" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<msg timestamp="20241124 14:26:58.243" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</return>
<msg timestamp="20241124 14:26:58.243" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.243"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:26:58.260" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</kw>
<msg timestamp="20241124 14:26:58.260" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:58.259" endtime="20241124 14:26:58.260"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</return>
<msg timestamp="20241124 14:26:58.260" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:58.259" endtime="20241124 14:26:58.260"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.260"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.243" endtime="20241124 14:26:58.260"/>
</iter>
<status status="PASS" starttime="20241124 14:26:58.162" endtime="20241124 14:26:58.260"/>
</for>
<msg timestamp="20241124 14:26:58.260" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:26:58.160" endtime="20241124 14:26:58.260"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:58.260" endtime="20241124 14:26:58.275"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:26:58.279" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '281', 'status': 'COMPLETED', 'actionName': 'Set login password', 'actionType': 'TYPE_TEXT', 'actionXpath': '//input[@id="password"]', 'inputValue': 'vijaybharani', 'er...</msg>
<status status="PASS" starttime="20241124 14:26:58.278" endtime="20241124 14:26:58.279"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:26:58.280" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "281", "status": "COMPLETED", "actionName": "Set login password", "actionType": "TYPE_TEXT", "actionXpath": "//input[@id=\"password\"]", "inputValue": "vijaybharani", "...</msg>
<status status="PASS" starttime="20241124 14:26:58.279" endtime="20241124 14:26:58.280"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:26:58.293" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:26:58.293" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:26:58.280" endtime="20241124 14:26:58.293"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.279" endtime="20241124 14:26:58.293"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.275" endtime="20241124 14:26:58.293"/>
</kw>
<status status="PASS" starttime="20241124 14:26:56.855" endtime="20241124 14:26:58.293"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</branch>
<status status="PASS" starttime="20241124 14:26:56.855" endtime="20241124 14:26:58.293"/>
</try>
<status status="PASS" starttime="20241124 14:26:56.855" endtime="20241124 14:26:58.293"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '42', 'actionId': '29', 'flowId': '14', 'order': 2, 'createdAt': '2024-11-21T16:43:09.645Z', 'updatedAt': '2024-11-22T04:20:41.497Z', 'action': {'id': '29', 'name': 'Set login username', 'type'...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.293" level="INFO">${action} = {'id': '29', 'name': 'Set login username', 'type': 'TYPE_TEXT', 'xpath': 'id=username', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:39:14.809Z', 'updatedAt': '2024-11-23T17:11:28.46...</msg>
<status status="PASS" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:26:58.293" level="INFO">${input} = {'id': '26', 'actionId': '29', 'name': 'Bharani', 'value': 'bharani@ideas2it.com', 'waitAfterAction': '1', 'isDefault': True, 'createdAt': '2024-11-21T16:39:15.038Z', 'updatedAt': '2024-11-21T17:23:16...</msg>
<status status="PASS" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:58.293" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.293"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.310"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.310"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.310"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.310"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.310"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.310"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.310"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=username: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:58.326" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.326"/>
</kw>
<msg timestamp="20241124 14:26:58.326" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.326"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.326"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.326"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.326"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.326"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.326"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.326"/>
</try>
<msg timestamp="20241124 14:26:58.326" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.326"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.326"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.326"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.326"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.326"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.326"/>
</try>
<msg timestamp="20241124 14:26:58.326" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.326"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.326"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.326"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.326"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.326"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.326"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.326"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:58.343" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</kw>
<msg timestamp="20241124 14:26:58.343" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</try>
<msg timestamp="20241124 14:26:58.343" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</try>
<msg timestamp="20241124 14:26:58.343" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.342" endtime="20241124 14:26:58.343"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.343"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.343"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:26:58.359" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:26:58.359" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.359"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:26:58.359" endtime="20241124 14:26:58.359"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.359"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.359" endtime="20241124 14:26:58.359"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.359" endtime="20241124 14:26:58.359"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.359" endtime="20241124 14:26:58.359"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.343" endtime="20241124 14:26:58.359"/>
</try>
<msg timestamp="20241124 14:26:58.359" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.359"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.359" endtime="20241124 14:26:58.359"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.359" endtime="20241124 14:26:58.359"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.359" endtime="20241124 14:26:58.359"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.359" endtime="20241124 14:26:58.359"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.359" endtime="20241124 14:26:58.359"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.359"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.375" endtime="20241124 14:26:58.375"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.359" endtime="20241124 14:26:58.375"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.375"/>
</try>
<status status="PASS" starttime="20241124 14:26:58.326" endtime="20241124 14:26:58.376"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:58.376" level="INFO">Waited for Element with selector id=username at state visible</msg>
<status status="PASS" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</kw>
<msg timestamp="20241124 14:26:58.376" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</try>
<msg timestamp="20241124 14:26:58.376" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</return>
<msg timestamp="20241124 14:26:58.376" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.376" endtime="20241124 14:26:58.376"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.376"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:58.393" level="INFO">Waited for Element with selector id=username at state editable</msg>
<status status="PASS" starttime="20241124 14:26:58.393" endtime="20241124 14:26:58.393"/>
</kw>
<msg timestamp="20241124 14:26:58.393" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.393" endtime="20241124 14:26:58.393"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.393" endtime="20241124 14:26:58.393"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.393" endtime="20241124 14:26:58.393"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.393" endtime="20241124 14:26:58.393"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.393" endtime="20241124 14:26:58.393"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.393" endtime="20241124 14:26:58.393"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.393" endtime="20241124 14:26:58.393"/>
</try>
<msg timestamp="20241124 14:26:58.393" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.393" endtime="20241124 14:26:58.393"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.393" endtime="20241124 14:26:58.393"/>
</return>
<msg timestamp="20241124 14:26:58.393" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.393" endtime="20241124 14:26:58.393"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.409"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.409"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.409"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.409"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.409"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.393" endtime="20241124 14:26:58.409"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:26:58.409" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.409"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=username: string</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.409"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.409"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.409"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.409"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.409"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.409"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241124 14:26:58.409" level="INFO">Fills the text 'bharani@ideas2it.com' in the given field.</msg>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.433"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.434"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.434" endtime="20241124 14:26:58.434"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.434" endtime="20241124 14:26:58.434"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.434" endtime="20241124 14:26:58.434"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.434"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=username: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:58.445" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:26:58.439" endtime="20241124 14:26:58.445"/>
</kw>
<msg timestamp="20241124 14:26:58.446" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.439" endtime="20241124 14:26:58.446"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.446" endtime="20241124 14:26:58.446"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.439" endtime="20241124 14:26:58.446"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.446" endtime="20241124 14:26:58.446"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.446" endtime="20241124 14:26:58.447"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.446" endtime="20241124 14:26:58.447"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.439" endtime="20241124 14:26:58.447"/>
</try>
<msg timestamp="20241124 14:26:58.447" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.439" endtime="20241124 14:26:58.447"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.447" endtime="20241124 14:26:58.447"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.438" endtime="20241124 14:26:58.447"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:26:58.447" endtime="20241124 14:26:58.447"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.447" endtime="20241124 14:26:58.447"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.438" endtime="20241124 14:26:58.447"/>
</try>
<msg timestamp="20241124 14:26:58.448" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.437" endtime="20241124 14:26:58.448"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.450" endtime="20241124 14:26:58.450"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.450" endtime="20241124 14:26:58.450"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.450" endtime="20241124 14:26:58.450"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.450" endtime="20241124 14:26:58.451"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.449" endtime="20241124 14:26:58.451"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.437" endtime="20241124 14:26:58.451"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:58.462" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:26:58.453" endtime="20241124 14:26:58.463"/>
</kw>
<msg timestamp="20241124 14:26:58.463" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.453" endtime="20241124 14:26:58.463"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.463" endtime="20241124 14:26:58.463"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.453" endtime="20241124 14:26:58.463"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.463" endtime="20241124 14:26:58.464"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.464" endtime="20241124 14:26:58.464"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.463" endtime="20241124 14:26:58.464"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.453" endtime="20241124 14:26:58.464"/>
</try>
<msg timestamp="20241124 14:26:58.464" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.453" endtime="20241124 14:26:58.464"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.464" endtime="20241124 14:26:58.464"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.453" endtime="20241124 14:26:58.464"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:26:58.465" endtime="20241124 14:26:58.465"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.465" endtime="20241124 14:26:58.465"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.453" endtime="20241124 14:26:58.465"/>
</try>
<msg timestamp="20241124 14:26:58.465" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.453" endtime="20241124 14:26:58.465"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.467" endtime="20241124 14:26:58.467"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.467" endtime="20241124 14:26:58.467"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.467" endtime="20241124 14:26:58.467"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.467" endtime="20241124 14:26:58.467"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.466" endtime="20241124 14:26:58.467"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.453" endtime="20241124 14:26:58.468"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:26:58.476" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:26:58.476" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:26:58.468" endtime="20241124 14:26:58.476"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.468" endtime="20241124 14:26:58.476"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.468" endtime="20241124 14:26:58.476"/>
</try>
<msg timestamp="20241124 14:26:58.476" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:26:58.453" endtime="20241124 14:26:58.476"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.453" endtime="20241124 14:26:58.476"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.452" endtime="20241124 14:26:58.476"/>
</try>
<status status="PASS" starttime="20241124 14:26:58.452" endtime="20241124 14:26:58.476"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:58.476" level="INFO">Waited for Element with selector id=username at state visible</msg>
<status status="PASS" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</kw>
<msg timestamp="20241124 14:26:58.476" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.476"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.492"/>
</try>
<msg timestamp="20241124 14:26:58.492" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.492"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.492" endtime="20241124 14:26:58.492"/>
</return>
<msg timestamp="20241124 14:26:58.492" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.492"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.494" endtime="20241124 14:26:58.494"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.494" endtime="20241124 14:26:58.494"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.493" endtime="20241124 14:26:58.494"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.493" endtime="20241124 14:26:58.494"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.493" endtime="20241124 14:26:58.494"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.476" endtime="20241124 14:26:58.494"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.435" endtime="20241124 14:26:58.494"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:58.504" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:26:58.499" endtime="20241124 14:26:58.504"/>
</kw>
<msg timestamp="20241124 14:26:58.504" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.499" endtime="20241124 14:26:58.504"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.504" endtime="20241124 14:26:58.504"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.499" endtime="20241124 14:26:58.504"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.504" endtime="20241124 14:26:58.505"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.505" endtime="20241124 14:26:58.505"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.504" endtime="20241124 14:26:58.505"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.498" endtime="20241124 14:26:58.505"/>
</try>
<msg timestamp="20241124 14:26:58.505" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.498" endtime="20241124 14:26:58.505"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.505" endtime="20241124 14:26:58.505"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.497" endtime="20241124 14:26:58.505"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:26:58.505" endtime="20241124 14:26:58.505"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:58.505" endtime="20241124 14:26:58.506"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.497" endtime="20241124 14:26:58.506"/>
</try>
<msg timestamp="20241124 14:26:58.506" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.497" endtime="20241124 14:26:58.506"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.508" endtime="20241124 14:26:58.508"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.508" endtime="20241124 14:26:58.508"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.508" endtime="20241124 14:26:58.508"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.507" endtime="20241124 14:26:58.508"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.507" endtime="20241124 14:26:58.508"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.497" endtime="20241124 14:26:58.508"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:26:58.517" level="INFO">Property: 'bharani@ideas2it.com'</msg>
<msg timestamp="20241124 14:26:58.517" level="INFO">${property} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:26:58.509" endtime="20241124 14:26:58.517"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:26:58.517" endtime="20241124 14:26:58.517"/>
</return>
<status status="PASS" starttime="20241124 14:26:58.508" endtime="20241124 14:26:58.517"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.518" endtime="20241124 14:26:58.518"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.518" endtime="20241124 14:26:58.518"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.517" endtime="20241124 14:26:58.518"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.508" endtime="20241124 14:26:58.518"/>
</try>
<msg timestamp="20241124 14:26:58.518" level="INFO">${fieldTextValue} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:26:58.495" endtime="20241124 14:26:58.518"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241124 14:26:58.518" endtime="20241124 14:26:58.518"/>
</return>
<msg timestamp="20241124 14:26:58.519" level="INFO">${populated_value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:26:58.435" endtime="20241124 14:26:58.519"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241124 14:26:58.524" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.521" endtime="20241124 14:26:58.524"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:58.524" endtime="20241124 14:26:58.524"/>
</return>
<msg timestamp="20241124 14:26:58.524" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241124 14:26:58.520" endtime="20241124 14:26:58.524"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</if>
<status status="PASS" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.434" endtime="20241124 14:26:58.527"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.527"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.527"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.527"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.409" endtime="20241124 14:26:58.527"/>
</try>
<status status="PASS" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.527"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.310" endtime="20241124 14:26:58.527"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.527"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.527" endtime="20241124 14:26:58.545"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.293" endtime="20241124 14:26:58.545"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:58.545" endtime="20241124 14:26:58.545"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:26:59.559" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241124 14:26:58.545" endtime="20241124 14:26:59.559"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:26:59.560" endtime="20241124 14:26:59.560"/>
</return>
<msg timestamp="20241124 14:26:59.560" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:26:58.293" endtime="20241124 14:26:59.560"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.561" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:26:59.561" endtime="20241124 14:26:59.561"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.562" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:26:59.562" endtime="20241124 14:26:59.562"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.562" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:26:59.562" endtime="20241124 14:26:59.562"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.563" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:26:59.562" endtime="20241124 14:26:59.563"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.563" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:26:59.563" endtime="20241124 14:26:59.563"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.563" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:26:59.563" endtime="20241124 14:26:59.563"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.564" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:26:59.564" endtime="20241124 14:26:59.564"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.564" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:26:59.564" endtime="20241124 14:26:59.564"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:59.564" endtime="20241124 14:26:59.565"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:26:59.567" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:26:59.566" endtime="20241124 14:26:59.567"/>
</kw>
<msg timestamp="20241124 14:26:59.567" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:59.566" endtime="20241124 14:26:59.567"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.567" endtime="20241124 14:26:59.568"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.568" endtime="20241124 14:26:59.568"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.568" endtime="20241124 14:26:59.568"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.568" endtime="20241124 14:26:59.568"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.568" endtime="20241124 14:26:59.568"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.568" endtime="20241124 14:26:59.568"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.567" endtime="20241124 14:26:59.568"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.567" endtime="20241124 14:26:59.568"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:59.568" endtime="20241124 14:26:59.568"/>
</return>
<msg timestamp="20241124 14:26:59.568" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:59.566" endtime="20241124 14:26:59.568"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:59.569" endtime="20241124 14:26:59.570"/>
</kw>
<msg timestamp="20241124 14:26:59.570" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.569" endtime="20241124 14:26:59.570"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.570" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:26:59.570" endtime="20241124 14:26:59.570"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.571" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.571" endtime="20241124 14:26:59.571"/>
</kw>
<status status="PASS" starttime="20241124 14:26:59.570" endtime="20241124 14:26:59.571"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.571" endtime="20241124 14:26:59.571"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.571" endtime="20241124 14:26:59.571"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.570" endtime="20241124 14:26:59.571"/>
</if>
<status status="PASS" starttime="20241124 14:26:59.570" endtime="20241124 14:26:59.571"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.570" endtime="20241124 14:26:59.571"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:59.571" endtime="20241124 14:26:59.572"/>
</return>
<msg timestamp="20241124 14:26:59.572" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.569" endtime="20241124 14:26:59.572"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:26:59.572" endtime="20241124 14:26:59.572"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.572" endtime="20241124 14:26:59.572"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.572" endtime="20241124 14:26:59.572"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.573" endtime="20241124 14:26:59.573"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:26:59.573" endtime="20241124 14:26:59.573"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.573" endtime="20241124 14:26:59.573"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.574" endtime="20241124 14:26:59.575"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:26:59.575" endtime="20241124 14:26:59.575"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.574" endtime="20241124 14:26:59.575"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.573" endtime="20241124 14:26:59.575"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.572" endtime="20241124 14:26:59.577"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.572" endtime="20241124 14:26:59.577"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.578" endtime="20241124 14:26:59.578"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:26:59.578" endtime="20241124 14:26:59.578"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.577" endtime="20241124 14:26:59.578"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.579" endtime="20241124 14:26:59.579"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:26:59.579" endtime="20241124 14:26:59.579"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.578" endtime="20241124 14:26:59.579"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.577" endtime="20241124 14:26:59.579"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.577" endtime="20241124 14:26:59.579"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.577" endtime="20241124 14:26:59.579"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.572" endtime="20241124 14:26:59.580"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.572" endtime="20241124 14:26:59.580"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:26:59.580" endtime="20241124 14:26:59.580"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.580" endtime="20241124 14:26:59.580"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.580" endtime="20241124 14:26:59.580"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.580" endtime="20241124 14:26:59.581"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.580" endtime="20241124 14:26:59.581"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.580" endtime="20241124 14:26:59.581"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.581" endtime="20241124 14:26:59.581"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.582" endtime="20241124 14:26:59.582"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:26:59.582" endtime="20241124 14:26:59.582"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.582" endtime="20241124 14:26:59.582"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.582" endtime="20241124 14:26:59.582"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:26:59.583" endtime="20241124 14:26:59.583"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.582" endtime="20241124 14:26:59.583"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.582" endtime="20241124 14:26:59.583"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.581" endtime="20241124 14:26:59.583"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.581" endtime="20241124 14:26:59.583"/>
</if>
<status status="PASS" starttime="20241124 14:26:59.580" endtime="20241124 14:26:59.583"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.580" endtime="20241124 14:26:59.583"/>
</if>
<status status="PASS" starttime="20241124 14:26:59.561" endtime="20241124 14:26:59.583"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.583" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:26:59.583" endtime="20241124 14:26:59.583"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.585" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:26:59.585" endtime="20241124 14:26:59.585"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.585" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:26:59.585" endtime="20241124 14:26:59.585"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.585" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:26:59.585" endtime="20241124 14:26:59.585"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.585" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.585" endtime="20241124 14:26:59.585"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.585" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:26:59.585" endtime="20241124 14:26:59.585"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.586" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:26:59.585" endtime="20241124 14:26:59.586"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:59.586" endtime="20241124 14:26:59.586"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:26:59.588" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:26:59.588" endtime="20241124 14:26:59.588"/>
</kw>
<msg timestamp="20241124 14:26:59.588" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:59.588" endtime="20241124 14:26:59.588"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.589" endtime="20241124 14:26:59.589"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.589" endtime="20241124 14:26:59.589"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.589" endtime="20241124 14:26:59.589"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.590" endtime="20241124 14:26:59.590"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.589" endtime="20241124 14:26:59.590"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.589" endtime="20241124 14:26:59.590"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.589" endtime="20241124 14:26:59.590"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.588" endtime="20241124 14:26:59.590"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:59.590" endtime="20241124 14:26:59.590"/>
</return>
<msg timestamp="20241124 14:26:59.590" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:59.587" endtime="20241124 14:26:59.590"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:26:59.592" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<msg timestamp="20241124 14:26:59.592" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</return>
<msg timestamp="20241124 14:26:59.592" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</if>
<status status="PASS" starttime="20241124 14:26:59.583" endtime="20241124 14:26:59.592"/>
</iter>
<status status="PASS" starttime="20241124 14:26:59.561" endtime="20241124 14:26:59.592"/>
</for>
<msg timestamp="20241124 14:26:59.592" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:26:59.560" endtime="20241124 14:26:59.592"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:26:59.592" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '282', 'status': 'COMPLETED', 'actionName': 'Set login username', 'actionType': 'TYPE_TEXT', 'actionXpath': 'id=username', 'inputValue': 'bharani@ideas2it.com', 'errorM...</msg>
<status status="PASS" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:26:59.592" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "282", "status": "COMPLETED", "actionName": "Set login username", "actionType": "TYPE_TEXT", "actionXpath": "id=username", "inputValue": "bharani@ideas2it.com", "errorM...</msg>
<status status="PASS" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.592"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:26:59.609" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:26:59.609" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.609"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</return>
<status status="PASS" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.609"/>
</kw>
<status status="PASS" starttime="20241124 14:26:59.592" endtime="20241124 14:26:59.609"/>
</kw>
<status status="PASS" starttime="20241124 14:26:58.293" endtime="20241124 14:26:59.609"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</branch>
<status status="PASS" starttime="20241124 14:26:58.293" endtime="20241124 14:26:59.609"/>
</try>
<status status="PASS" starttime="20241124 14:26:58.293" endtime="20241124 14:26:59.609"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '44', 'actionId': '31', 'flowId': '14', 'order': 3, 'createdAt': '2024-11-21T16:43:09.646Z', 'updatedAt': '2024-11-22T04:20:41.481Z', 'action': {'id': '31', 'name': 'Click login button', 'type'...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.609" level="INFO">${action} = {'id': '31', 'name': 'Click login button', 'type': 'CLICK', 'xpath': '//button[@type="submit" and text()="Login"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:41:25.179Z', 'updated...</msg>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:26:59.609" level="INFO">${input} = {'id': '28', 'actionId': '31', 'name': 'Input 01', 'value': '', 'waitAfterAction': '5', 'isDefault': True, 'createdAt': '2024-11-21T16:41:25.706Z', 'updatedAt': '2024-11-21T17:38:31.563Z'}</msg>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:26:59.609" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.609"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:59.625" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state attached</msg>
<status status="PASS" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</kw>
<msg timestamp="20241124 14:26:59.625" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</return>
<status status="PASS" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</try>
<msg timestamp="20241124 14:26:59.625" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</return>
<status status="PASS" starttime="20241124 14:26:59.624" endtime="20241124 14:26:59.625"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</return>
<status status="NOT RUN" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.624" endtime="20241124 14:26:59.625"/>
</try>
<msg timestamp="20241124 14:26:59.625" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.625"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</if>
<status status="PASS" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.625"/>
</kw>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.625"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:59.642" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state visible</msg>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.642"/>
</kw>
<msg timestamp="20241124 14:26:59.642" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.642"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.642"/>
</return>
<status status="PASS" starttime="20241124 14:26:59.641" endtime="20241124 14:26:59.642"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.642"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.642"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.642"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.641" endtime="20241124 14:26:59.642"/>
</try>
<msg timestamp="20241124 14:26:59.642" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.642"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.642"/>
</return>
<msg timestamp="20241124 14:26:59.642" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.642"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.642"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.642"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.642"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.642"/>
</if>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.642"/>
</kw>
<status status="PASS" starttime="20241124 14:26:59.625" endtime="20241124 14:26:59.642"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:26:59.658" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state enabled</msg>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.658"/>
</kw>
<msg timestamp="20241124 14:26:59.658" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.658"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.658"/>
</return>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.658"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.658"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.658"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.658"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.658"/>
</try>
<msg timestamp="20241124 14:26:59.658" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.658"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.658"/>
</return>
<msg timestamp="20241124 14:26:59.658" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.658"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.658"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.658"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.658"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.658"/>
</if>
<status status="PASS" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.658"/>
</kw>
<status status="PASS" starttime="20241124 14:26:59.642" endtime="20241124 14:26:59.658"/>
</kw>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.658"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:26:59.658" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.658"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.674" endtime="20241124 14:26:59.674"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.674"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:26:59.675" endtime="20241124 14:26:59.675"/>
</kw>
<status status="PASS" starttime="20241124 14:26:59.674" endtime="20241124 14:26:59.675"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.675"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241124 14:26:59.675" endtime="20241124 14:26:59.729"/>
</kw>
<status status="PASS" starttime="20241124 14:26:59.675" endtime="20241124 14:26:59.729"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.675" endtime="20241124 14:26:59.729"/>
</try>
<status status="PASS" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.729"/>
</kw>
<status status="PASS" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.729"/>
</kw>
<status status="PASS" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.729"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.658" endtime="20241124 14:26:59.729"/>
</try>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.729"/>
</kw>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.729"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.729" endtime="20241124 14:26:59.729"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.741" endtime="20241124 14:26:59.742"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.741" endtime="20241124 14:26:59.742"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.743" endtime="20241124 14:26:59.743"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.743" endtime="20241124 14:26:59.743"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.743" endtime="20241124 14:26:59.743"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.743" endtime="20241124 14:26:59.743"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.743" endtime="20241124 14:26:59.744"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.743" endtime="20241124 14:26:59.744"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.742" endtime="20241124 14:26:59.744"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:26:59.748" endtime="20241124 14:26:59.748"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.750" endtime="20241124 14:26:59.750"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.744" endtime="20241124 14:26:59.750"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.751" endtime="20241124 14:26:59.751"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.751" endtime="20241124 14:26:59.752"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.751" endtime="20241124 14:26:59.752"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.752" endtime="20241124 14:26:59.752"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.752" endtime="20241124 14:26:59.752"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.751" endtime="20241124 14:26:59.752"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.750" endtime="20241124 14:26:59.752"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:26:59.756" endtime="20241124 14:26:59.756"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.759" endtime="20241124 14:26:59.759"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.752" endtime="20241124 14:26:59.759"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.760" endtime="20241124 14:26:59.760"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.761" endtime="20241124 14:26:59.761"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.761" endtime="20241124 14:26:59.761"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.761" endtime="20241124 14:26:59.761"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.761" endtime="20241124 14:26:59.761"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:26:59.761" endtime="20241124 14:26:59.761"/>
</if>
<status status="NOT RUN" starttime="20241124 14:26:59.759" endtime="20241124 14:26:59.761"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.763" endtime="20241124 14:26:59.763"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.761" endtime="20241124 14:26:59.763"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:26:59.767" endtime="20241124 14:26:59.767"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:26:59.767" endtime="20241124 14:26:59.767"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:26:59.763" endtime="20241124 14:26:59.767"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:26:59.767"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:26:59.768" endtime="20241124 14:26:59.769"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:27:04.783" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20241124 14:26:59.769" endtime="20241124 14:27:04.783"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:27:04.783" endtime="20241124 14:27:04.783"/>
</return>
<msg timestamp="20241124 14:27:04.784" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:27:04.784"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.785" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:44</msg>
<status status="PASS" starttime="20241124 14:27:04.785" endtime="20241124 14:27:04.785"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.786" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:27:04.786" endtime="20241124 14:27:04.786"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.786" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:27:04.786" endtime="20241124 14:27:04.786"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.787" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:27:04.786" endtime="20241124 14:27:04.787"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.788" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:27:04.787" endtime="20241124 14:27:04.788"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.789" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:27:04.788" endtime="20241124 14:27:04.789"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.789" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:27:04.789" endtime="20241124 14:27:04.789"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.790" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:27:04.790" endtime="20241124 14:27:04.790"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:04.790" endtime="20241124 14:27:04.791"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:27:04.795" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:27:04.794" endtime="20241124 14:27:04.795"/>
</kw>
<msg timestamp="20241124 14:27:04.795" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:04.793" endtime="20241124 14:27:04.795"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.796" endtime="20241124 14:27:04.796"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.796" endtime="20241124 14:27:04.796"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.796" endtime="20241124 14:27:04.796"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.797" endtime="20241124 14:27:04.797"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.797" endtime="20241124 14:27:04.797"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.796" endtime="20241124 14:27:04.797"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.795" endtime="20241124 14:27:04.798"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.795" endtime="20241124 14:27:04.798"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:04.798" endtime="20241124 14:27:04.798"/>
</return>
<msg timestamp="20241124 14:27:04.798" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:04.793" endtime="20241124 14:27:04.798"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:04.802" endtime="20241124 14:27:04.802"/>
</kw>
<msg timestamp="20241124 14:27:04.802" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.801" endtime="20241124 14:27:04.802"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.803" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:27:04.803" endtime="20241124 14:27:04.803"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.804" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.804" endtime="20241124 14:27:04.804"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.804" endtime="20241124 14:27:04.804"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.805" endtime="20241124 14:27:04.805"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.805" endtime="20241124 14:27:04.805"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.803" endtime="20241124 14:27:04.805"/>
</if>
<status status="PASS" starttime="20241124 14:27:04.803" endtime="20241124 14:27:04.805"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.802" endtime="20241124 14:27:04.805"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:04.805" endtime="20241124 14:27:04.805"/>
</return>
<msg timestamp="20241124 14:27:04.806" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.800" endtime="20241124 14:27:04.806"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:04.806" endtime="20241124 14:27:04.806"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.806" endtime="20241124 14:27:04.806"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.806" endtime="20241124 14:27:04.807"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.807" endtime="20241124 14:27:04.807"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:04.807" endtime="20241124 14:27:04.807"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.807" endtime="20241124 14:27:04.807"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.807" endtime="20241124 14:27:04.808"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:04.808" endtime="20241124 14:27:04.808"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.807" endtime="20241124 14:27:04.808"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.807" endtime="20241124 14:27:04.808"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.807" endtime="20241124 14:27:04.808"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.807" endtime="20241124 14:27:04.808"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.808" endtime="20241124 14:27:04.808"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:04.808" endtime="20241124 14:27:04.808"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.808" endtime="20241124 14:27:04.809"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.809" endtime="20241124 14:27:04.809"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:04.809" endtime="20241124 14:27:04.809"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.809" endtime="20241124 14:27:04.809"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.808" endtime="20241124 14:27:04.809"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.808" endtime="20241124 14:27:04.809"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.808" endtime="20241124 14:27:04.809"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.806" endtime="20241124 14:27:04.809"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.806" endtime="20241124 14:27:04.809"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:04.810" endtime="20241124 14:27:04.810"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.810" endtime="20241124 14:27:04.810"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.810" endtime="20241124 14:27:04.810"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.811" endtime="20241124 14:27:04.811"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.810" endtime="20241124 14:27:04.811"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.810" endtime="20241124 14:27:04.811"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.811" endtime="20241124 14:27:04.811"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.811" endtime="20241124 14:27:04.812"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:04.812" endtime="20241124 14:27:04.812"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.811" endtime="20241124 14:27:04.812"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.812" endtime="20241124 14:27:04.812"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:04.812" endtime="20241124 14:27:04.812"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.812" endtime="20241124 14:27:04.812"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.811" endtime="20241124 14:27:04.812"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.811" endtime="20241124 14:27:04.812"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.811" endtime="20241124 14:27:04.812"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.810" endtime="20241124 14:27:04.813"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.810" endtime="20241124 14:27:04.813"/>
</if>
<status status="PASS" starttime="20241124 14:27:04.785" endtime="20241124 14:27:04.813"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.813" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:27:04.813" endtime="20241124 14:27:04.813"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.814" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:27:04.813" endtime="20241124 14:27:04.814"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.814" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:27:04.814" endtime="20241124 14:27:04.814"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.815" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:27:04.814" endtime="20241124 14:27:04.815"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.815" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.815" endtime="20241124 14:27:04.815"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.815" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:27:04.815" endtime="20241124 14:27:04.815"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.816" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:27:04.816" endtime="20241124 14:27:04.816"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:04.816" endtime="20241124 14:27:04.816"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:27:04.819" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:27:04.818" endtime="20241124 14:27:04.819"/>
</kw>
<msg timestamp="20241124 14:27:04.819" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:04.818" endtime="20241124 14:27:04.819"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.820" endtime="20241124 14:27:04.820"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.820" endtime="20241124 14:27:04.820"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.820" endtime="20241124 14:27:04.820"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.821" endtime="20241124 14:27:04.821"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.820" endtime="20241124 14:27:04.821"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.820" endtime="20241124 14:27:04.821"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.820" endtime="20241124 14:27:04.821"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.819" endtime="20241124 14:27:04.821"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:04.822" endtime="20241124 14:27:04.822"/>
</return>
<msg timestamp="20241124 14:27:04.822" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:04.818" endtime="20241124 14:27:04.822"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:27:04.826" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:27:04.825" endtime="20241124 14:27:04.826"/>
</kw>
<msg timestamp="20241124 14:27:04.826" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:04.825" endtime="20241124 14:27:04.826"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.827" endtime="20241124 14:27:04.827"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.827" endtime="20241124 14:27:04.827"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.827" endtime="20241124 14:27:04.827"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.828" endtime="20241124 14:27:04.828"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.827" endtime="20241124 14:27:04.828"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.827" endtime="20241124 14:27:04.828"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.827" endtime="20241124 14:27:04.828"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.826" endtime="20241124 14:27:04.828"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:04.828" endtime="20241124 14:27:04.828"/>
</return>
<msg timestamp="20241124 14:27:04.828" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:04.824" endtime="20241124 14:27:04.828"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:04.829" endtime="20241124 14:27:04.829"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.829" endtime="20241124 14:27:04.829"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.829" endtime="20241124 14:27:04.829"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.829" endtime="20241124 14:27:04.829"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:04.829" endtime="20241124 14:27:04.830"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.829" endtime="20241124 14:27:04.830"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.830" endtime="20241124 14:27:04.830"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:04.830" endtime="20241124 14:27:04.830"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.830" endtime="20241124 14:27:04.830"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.829" endtime="20241124 14:27:04.830"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.829" endtime="20241124 14:27:04.830"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.829" endtime="20241124 14:27:04.830"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.831" endtime="20241124 14:27:04.831"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:04.831" endtime="20241124 14:27:04.831"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.831" endtime="20241124 14:27:04.831"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.831" endtime="20241124 14:27:04.831"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:04.831" endtime="20241124 14:27:04.831"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.831" endtime="20241124 14:27:04.831"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.830" endtime="20241124 14:27:04.831"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.830" endtime="20241124 14:27:04.831"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.830" endtime="20241124 14:27:04.832"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.828" endtime="20241124 14:27:04.832"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.828" endtime="20241124 14:27:04.832"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:04.832" endtime="20241124 14:27:04.832"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.832" endtime="20241124 14:27:04.832"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.832" endtime="20241124 14:27:04.832"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.833" endtime="20241124 14:27:04.833"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.832" endtime="20241124 14:27:04.833"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.832" endtime="20241124 14:27:04.833"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.833" endtime="20241124 14:27:04.833"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.833" endtime="20241124 14:27:04.833"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:04.833" endtime="20241124 14:27:04.834"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.833" endtime="20241124 14:27:04.834"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.834" endtime="20241124 14:27:04.834"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:04.834" endtime="20241124 14:27:04.834"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.834" endtime="20241124 14:27:04.834"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.833" endtime="20241124 14:27:04.834"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.833" endtime="20241124 14:27:04.834"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:04.833" endtime="20241124 14:27:04.834"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:04.832" endtime="20241124 14:27:04.834"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.832" endtime="20241124 14:27:04.834"/>
</if>
<status status="PASS" starttime="20241124 14:27:04.813" endtime="20241124 14:27:04.834"/>
</iter>
<status status="PASS" starttime="20241124 14:27:04.785" endtime="20241124 14:27:04.834"/>
</for>
<msg timestamp="20241124 14:27:04.835" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:27:04.784" endtime="20241124 14:27:04.835"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:04.835" endtime="20241124 14:27:04.835"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:27:04.838" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '283', 'status': 'COMPLETED', 'actionName': 'Click login button', 'actionType': 'CLICK', 'actionXpath': '//button[@type="submit" and text()="Login"]', 'inputValue': '',...</msg>
<status status="PASS" starttime="20241124 14:27:04.837" endtime="20241124 14:27:04.838"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:27:04.839" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "283", "status": "COMPLETED", "actionName": "Click login button", "actionType": "CLICK", "actionXpath": "//button[@type=\"submit\" and text()=\"Login\"]", "inputValue":...</msg>
<status status="PASS" starttime="20241124 14:27:04.839" endtime="20241124 14:27:04.839"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:27:04.844" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:27:04.844" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:27:04.839" endtime="20241124 14:27:04.844"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:04.844" endtime="20241124 14:27:04.845"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:27:04.845" endtime="20241124 14:27:04.845"/>
</return>
<status status="PASS" starttime="20241124 14:27:04.838" endtime="20241124 14:27:04.846"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.835" endtime="20241124 14:27:04.846"/>
</kw>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:27:04.846"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.846" endtime="20241124 14:27:04.847"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:27:04.847" endtime="20241124 14:27:04.847"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.847" endtime="20241124 14:27:04.848"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.846" endtime="20241124 14:27:04.848"/>
</branch>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:27:04.848"/>
</try>
<status status="PASS" starttime="20241124 14:26:59.609" endtime="20241124 14:27:04.848"/>
</iter>
<status status="PASS" starttime="20241124 14:26:50.431" endtime="20241124 14:27:04.848"/>
</for>
<status status="PASS" starttime="20241124 14:26:50.431" endtime="20241124 14:27:04.849"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.431" endtime="20241124 14:27:04.849"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:27:04.851" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '75', 'status': 'COMPLETED', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241124 14:27:04.850" endtime="20241124 14:27:04.851"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:27:04.853" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "75", "status": "COMPLETED", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241124 14:27:04.852" endtime="20241124 14:27:04.853"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:27:04.878" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:27:04.878" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:27:04.853" endtime="20241124 14:27:04.878"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:04.878" endtime="20241124 14:27:04.879"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:27:04.879" endtime="20241124 14:27:04.879"/>
</return>
<status status="PASS" starttime="20241124 14:27:04.852" endtime="20241124 14:27:04.880"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.849" endtime="20241124 14:27:04.880"/>
</kw>
<status status="PASS" starttime="20241124 14:26:50.423" endtime="20241124 14:27:04.880"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.880" endtime="20241124 14:27:04.881"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:27:04.881" endtime="20241124 14:27:04.881"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.881" endtime="20241124 14:27:04.881"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.880" endtime="20241124 14:27:04.881"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.423" endtime="20241124 14:27:04.881"/>
</try>
<status status="PASS" starttime="20241124 14:26:50.422" endtime="20241124 14:27:04.881"/>
</iter>
<iter>
<var name="${testCaseFlowSequence}">{'id': '47', 'testCaseId': '27', 'flowId': '15', 'order': 1, 'createdAt': '2024-11-21T17:34:46.435Z', 'updatedAt': '2024-11-24T06:57:13.421Z', 'flow': {'id': '15', 'name': 'Navigate to profile', 'proj...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.882" level="INFO">${flow} = {'id': '15', 'name': 'Navigate to profile', 'projectId': '4', 'createdAt': '2024-11-21T17:34:26.845Z', 'updatedAt': '2024-11-24T06:43:12.878Z', 'flowActionSequences': [{'id': '45', 'actionId': '32', '...</msg>
<status status="PASS" starttime="20241124 14:27:04.882" endtime="20241124 14:27:04.882"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:04.883" endtime="20241124 14:27:04.883"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:04.887" endtime="20241124 14:27:04.888"/>
</kw>
<msg timestamp="20241124 14:27:04.888" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.887" endtime="20241124 14:27:04.888"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.889" level="INFO">${values} = [{'id': '45', 'actionId': '32', 'flowId': '15', 'order': 0, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.562Z', 'action': {'id': '32', 'name': 'Click Profile image icon',...</msg>
<status status="PASS" starttime="20241124 14:27:04.889" endtime="20241124 14:27:04.889"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.890" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.890" endtime="20241124 14:27:04.890"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.889" endtime="20241124 14:27:04.890"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.890" endtime="20241124 14:27:04.891"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.890" endtime="20241124 14:27:04.891"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.889" endtime="20241124 14:27:04.891"/>
</if>
<status status="PASS" starttime="20241124 14:27:04.888" endtime="20241124 14:27:04.891"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.888" endtime="20241124 14:27:04.891"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:04.891" endtime="20241124 14:27:04.891"/>
</return>
<msg timestamp="20241124 14:27:04.891" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.886" endtime="20241124 14:27:04.891"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '45', 'actionId': '32', 'flowId': '15', 'order': 0, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.562Z', 'action': {'id': '32', 'name': 'Click Profile image icon', ...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.893" level="INFO">${action} = {'id': '32', 'name': 'Click Profile image icon', 'type': 'CLICK', 'xpath': 'id=headerProfileImage', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T17:30:46.836Z', 'updatedAt': '2024-11-21...</msg>
<status status="PASS" starttime="20241124 14:27:04.892" endtime="20241124 14:27:04.893"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:04.893" endtime="20241124 14:27:04.894"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:27:04.894" level="INFO">${input} = {'id': '29', 'actionId': '32', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-21T17:30:47.048Z', 'updatedAt': '2024-11-21T17:30:47.048Z'}</msg>
<status status="PASS" starttime="20241124 14:27:04.894" endtime="20241124 14:27:04.894"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.895" endtime="20241124 14:27:04.895"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.895" endtime="20241124 14:27:04.895"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.895" endtime="20241124 14:27:04.895"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.894" endtime="20241124 14:27:04.895"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:04.896" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:27:04.896" endtime="20241124 14:27:04.896"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:27:04.896" endtime="20241124 14:27:04.896"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.896" endtime="20241124 14:27:04.896"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:27:04.897" endtime="20241124 14:27:04.897"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.897" endtime="20241124 14:27:04.897"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:27:04.911" level="INFO">Waited for Element with selector id=headerProfileImage at state attached</msg>
<status status="PASS" starttime="20241124 14:27:04.904" endtime="20241124 14:27:04.911"/>
</kw>
<msg timestamp="20241124 14:27:04.911" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.904" endtime="20241124 14:27:04.911"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:04.912" endtime="20241124 14:27:04.912"/>
</return>
<status status="PASS" starttime="20241124 14:27:04.903" endtime="20241124 14:27:04.912"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.912" endtime="20241124 14:27:04.912"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.912" endtime="20241124 14:27:04.912"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.912" endtime="20241124 14:27:04.913"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.903" endtime="20241124 14:27:04.913"/>
</try>
<msg timestamp="20241124 14:27:04.913" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.903" endtime="20241124 14:27:04.913"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:04.913" endtime="20241124 14:27:04.913"/>
</return>
<status status="PASS" starttime="20241124 14:27:04.902" endtime="20241124 14:27:04.913"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:27:04.914" endtime="20241124 14:27:04.914"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:04.914" endtime="20241124 14:27:04.914"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.902" endtime="20241124 14:27:04.914"/>
</try>
<msg timestamp="20241124 14:27:04.914" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.901" endtime="20241124 14:27:04.914"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.917" endtime="20241124 14:27:04.917"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.917" endtime="20241124 14:27:04.917"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.917" endtime="20241124 14:27:04.918"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.917" endtime="20241124 14:27:04.918"/>
</if>
<status status="PASS" starttime="20241124 14:27:04.915" endtime="20241124 14:27:04.918"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.901" endtime="20241124 14:27:04.918"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:27:04.930" level="INFO">Waited for Element with selector id=headerProfileImage at state visible</msg>
<status status="PASS" starttime="20241124 14:27:04.925" endtime="20241124 14:27:04.931"/>
</kw>
<msg timestamp="20241124 14:27:04.931" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.924" endtime="20241124 14:27:04.931"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:04.931" endtime="20241124 14:27:04.931"/>
</return>
<status status="PASS" starttime="20241124 14:27:04.924" endtime="20241124 14:27:04.931"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.931" endtime="20241124 14:27:04.931"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.931" endtime="20241124 14:27:04.932"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.931" endtime="20241124 14:27:04.932"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.924" endtime="20241124 14:27:04.932"/>
</try>
<msg timestamp="20241124 14:27:04.932" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.923" endtime="20241124 14:27:04.932"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:04.932" endtime="20241124 14:27:04.932"/>
</return>
<msg timestamp="20241124 14:27:04.932" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.922" endtime="20241124 14:27:04.932"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.934" endtime="20241124 14:27:04.934"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.935" endtime="20241124 14:27:04.935"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.934" endtime="20241124 14:27:04.935"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.934" endtime="20241124 14:27:04.935"/>
</if>
<status status="PASS" starttime="20241124 14:27:04.933" endtime="20241124 14:27:04.935"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.921" endtime="20241124 14:27:04.935"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:27:04.958" level="INFO">Waited for Element with selector id=headerProfileImage at state enabled</msg>
<status status="PASS" starttime="20241124 14:27:04.943" endtime="20241124 14:27:04.959"/>
</kw>
<msg timestamp="20241124 14:27:04.959" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.942" endtime="20241124 14:27:04.959"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:04.959" endtime="20241124 14:27:04.959"/>
</return>
<status status="PASS" starttime="20241124 14:27:04.942" endtime="20241124 14:27:04.959"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.959" endtime="20241124 14:27:04.960"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.960" endtime="20241124 14:27:04.960"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.959" endtime="20241124 14:27:04.960"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.942" endtime="20241124 14:27:04.960"/>
</try>
<msg timestamp="20241124 14:27:04.960" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.941" endtime="20241124 14:27:04.960"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:04.960" endtime="20241124 14:27:04.960"/>
</return>
<msg timestamp="20241124 14:27:04.961" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241124 14:27:04.939" endtime="20241124 14:27:04.961"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.963" endtime="20241124 14:27:04.963"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.964" endtime="20241124 14:27:04.964"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.963" endtime="20241124 14:27:04.964"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.963" endtime="20241124 14:27:04.964"/>
</if>
<status status="PASS" starttime="20241124 14:27:04.962" endtime="20241124 14:27:04.964"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.938" endtime="20241124 14:27:04.964"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.899" endtime="20241124 14:27:04.964"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:27:04.965" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:27:04.964" endtime="20241124 14:27:04.965"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241124 14:27:04.966" endtime="20241124 14:27:04.967"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:04.966" endtime="20241124 14:27:04.967"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:04.967" endtime="20241124 14:27:04.967"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.967" endtime="20241124 14:27:04.967"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.966" endtime="20241124 14:27:04.967"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241124 14:27:04.968" endtime="20241124 14:27:05.007"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.967" endtime="20241124 14:27:05.007"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.007" endtime="20241124 14:27:05.008"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.008" endtime="20241124 14:27:05.008"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.007" endtime="20241124 14:27:05.008"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.967" endtime="20241124 14:27:05.008"/>
</try>
<status status="PASS" starttime="20241124 14:27:04.966" endtime="20241124 14:27:05.008"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.965" endtime="20241124 14:27:05.008"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.965" endtime="20241124 14:27:05.008"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.009" endtime="20241124 14:27:05.009"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.008" endtime="20241124 14:27:05.009"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.965" endtime="20241124 14:27:05.009"/>
</try>
<status status="PASS" starttime="20241124 14:27:04.899" endtime="20241124 14:27:05.009"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.897" endtime="20241124 14:27:05.009"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.013" endtime="20241124 14:27:05.013"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.016" endtime="20241124 14:27:05.016"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.009" endtime="20241124 14:27:05.016"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.018" endtime="20241124 14:27:05.019"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.017" endtime="20241124 14:27:05.019"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.025" endtime="20241124 14:27:05.025"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.020" endtime="20241124 14:27:05.025"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.028" endtime="20241124 14:27:05.029"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.025" endtime="20241124 14:27:05.029"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.030" endtime="20241124 14:27:05.031"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.029" endtime="20241124 14:27:05.031"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.032" endtime="20241124 14:27:05.032"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.032" endtime="20241124 14:27:05.032"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.032" endtime="20241124 14:27:05.032"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.032" endtime="20241124 14:27:05.033"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.032" endtime="20241124 14:27:05.033"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.032" endtime="20241124 14:27:05.033"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.031" endtime="20241124 14:27:05.033"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:27:05.038" endtime="20241124 14:27:05.038"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.040" endtime="20241124 14:27:05.040"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.033" endtime="20241124 14:27:05.041"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.042" endtime="20241124 14:27:05.042"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.042" endtime="20241124 14:27:05.042"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.042" endtime="20241124 14:27:05.042"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.042" endtime="20241124 14:27:05.042"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.042" endtime="20241124 14:27:05.042"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.042" endtime="20241124 14:27:05.043"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.041" endtime="20241124 14:27:05.043"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:27:05.047" endtime="20241124 14:27:05.047"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.050" endtime="20241124 14:27:05.050"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.043" endtime="20241124 14:27:05.050"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.051" endtime="20241124 14:27:05.051"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.051" endtime="20241124 14:27:05.051"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.051" endtime="20241124 14:27:05.052"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.052" endtime="20241124 14:27:05.052"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.052" endtime="20241124 14:27:05.052"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.051" endtime="20241124 14:27:05.052"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.050" endtime="20241124 14:27:05.052"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.055" endtime="20241124 14:27:05.055"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.052" endtime="20241124 14:27:05.056"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:27:05.061" endtime="20241124 14:27:05.061"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.061" endtime="20241124 14:27:05.061"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.056" endtime="20241124 14:27:05.061"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.896" endtime="20241124 14:27:05.061"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.062"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:27:05.062" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.062"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.062"/>
</return>
<msg timestamp="20241124 14:27:05.062" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:27:04.895" endtime="20241124 14:27:05.062"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.062" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:45</msg>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.062"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.062" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.062"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.062" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.062"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.062" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.062"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.062" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.062"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.062" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.062"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.062" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.062"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.062" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.062"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.062"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:27:05.073" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:27:05.072" endtime="20241124 14:27:05.074"/>
</kw>
<msg timestamp="20241124 14:27:05.074" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.071" endtime="20241124 14:27:05.074"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.075" endtime="20241124 14:27:05.075"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.076" endtime="20241124 14:27:05.076"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.075" endtime="20241124 14:27:05.076"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.076" endtime="20241124 14:27:05.076"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.076" endtime="20241124 14:27:05.077"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.075" endtime="20241124 14:27:05.077"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.074" endtime="20241124 14:27:05.078"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.074" endtime="20241124 14:27:05.078"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:05.078" endtime="20241124 14:27:05.078"/>
</return>
<msg timestamp="20241124 14:27:05.079" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.070" endtime="20241124 14:27:05.079"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:05.083" endtime="20241124 14:27:05.083"/>
</kw>
<msg timestamp="20241124 14:27:05.083" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.082" endtime="20241124 14:27:05.083"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.088" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:27:05.084" endtime="20241124 14:27:05.088"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.089" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.089" endtime="20241124 14:27:05.089"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.089" endtime="20241124 14:27:05.089"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.090" endtime="20241124 14:27:05.090"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.090" endtime="20241124 14:27:05.090"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.088" endtime="20241124 14:27:05.090"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.084" endtime="20241124 14:27:05.090"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.084" endtime="20241124 14:27:05.090"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:05.090" endtime="20241124 14:27:05.090"/>
</return>
<msg timestamp="20241124 14:27:05.091" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.081" endtime="20241124 14:27:05.091"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:05.091" endtime="20241124 14:27:05.091"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.091" endtime="20241124 14:27:05.091"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.091" endtime="20241124 14:27:05.091"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.092" endtime="20241124 14:27:05.092"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.092" endtime="20241124 14:27:05.092"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.092" endtime="20241124 14:27:05.092"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.092" endtime="20241124 14:27:05.092"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.092" endtime="20241124 14:27:05.093"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.092" endtime="20241124 14:27:05.093"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.092" endtime="20241124 14:27:05.093"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.092" endtime="20241124 14:27:05.093"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.091" endtime="20241124 14:27:05.093"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.093" endtime="20241124 14:27:05.093"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.093" endtime="20241124 14:27:05.093"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.093" endtime="20241124 14:27:05.093"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.094" endtime="20241124 14:27:05.094"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.094" endtime="20241124 14:27:05.095"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.093" endtime="20241124 14:27:05.095"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.093" endtime="20241124 14:27:05.095"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.093" endtime="20241124 14:27:05.095"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.093" endtime="20241124 14:27:05.095"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.091" endtime="20241124 14:27:05.095"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.091" endtime="20241124 14:27:05.095"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:05.096" endtime="20241124 14:27:05.097"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.096" endtime="20241124 14:27:05.097"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.096" endtime="20241124 14:27:05.097"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.097" endtime="20241124 14:27:05.097"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.097" endtime="20241124 14:27:05.097"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.097" endtime="20241124 14:27:05.097"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.098" endtime="20241124 14:27:05.098"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.098" endtime="20241124 14:27:05.099"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.099" endtime="20241124 14:27:05.099"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.098" endtime="20241124 14:27:05.099"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.099" endtime="20241124 14:27:05.099"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.099" endtime="20241124 14:27:05.099"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.099" endtime="20241124 14:27:05.099"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.098" endtime="20241124 14:27:05.099"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.098" endtime="20241124 14:27:05.100"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.098" endtime="20241124 14:27:05.100"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.096" endtime="20241124 14:27:05.100"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.096" endtime="20241124 14:27:05.100"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.100"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.101" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:27:05.101" endtime="20241124 14:27:05.101"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.102" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:27:05.102" endtime="20241124 14:27:05.102"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.103" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.102" endtime="20241124 14:27:05.103"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.103" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:27:05.103" endtime="20241124 14:27:05.103"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.104" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.104" endtime="20241124 14:27:05.104"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.106" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:27:05.105" endtime="20241124 14:27:05.106"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.107" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:27:05.106" endtime="20241124 14:27:05.107"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:05.107" endtime="20241124 14:27:05.108"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:27:05.111" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:27:05.110" endtime="20241124 14:27:05.111"/>
</kw>
<msg timestamp="20241124 14:27:05.111" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.110" endtime="20241124 14:27:05.111"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.112" endtime="20241124 14:27:05.112"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.112" endtime="20241124 14:27:05.112"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.112" endtime="20241124 14:27:05.113"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.113" endtime="20241124 14:27:05.113"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.113" endtime="20241124 14:27:05.113"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.112" endtime="20241124 14:27:05.113"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.112" endtime="20241124 14:27:05.113"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.111" endtime="20241124 14:27:05.113"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:05.113" endtime="20241124 14:27:05.114"/>
</return>
<msg timestamp="20241124 14:27:05.114" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.109" endtime="20241124 14:27:05.114"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:27:05.117" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:27:05.116" endtime="20241124 14:27:05.117"/>
</kw>
<msg timestamp="20241124 14:27:05.118" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.116" endtime="20241124 14:27:05.118"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.118" endtime="20241124 14:27:05.118"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.118" endtime="20241124 14:27:05.118"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.118" endtime="20241124 14:27:05.118"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.119" endtime="20241124 14:27:05.119"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.119" endtime="20241124 14:27:05.119"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.118" endtime="20241124 14:27:05.119"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.118" endtime="20241124 14:27:05.119"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.118" endtime="20241124 14:27:05.119"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:05.119" endtime="20241124 14:27:05.119"/>
</return>
<msg timestamp="20241124 14:27:05.119" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.115" endtime="20241124 14:27:05.119"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:05.121" endtime="20241124 14:27:05.121"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.120" endtime="20241124 14:27:05.121"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.120" endtime="20241124 14:27:05.121"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.122" endtime="20241124 14:27:05.122"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.122" endtime="20241124 14:27:05.122"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.122" endtime="20241124 14:27:05.122"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.123" endtime="20241124 14:27:05.123"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.123" endtime="20241124 14:27:05.123"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.123" endtime="20241124 14:27:05.123"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.121" endtime="20241124 14:27:05.123"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.121" endtime="20241124 14:27:05.123"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.121" endtime="20241124 14:27:05.124"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.124" endtime="20241124 14:27:05.124"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.124" endtime="20241124 14:27:05.125"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.124" endtime="20241124 14:27:05.125"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.125" endtime="20241124 14:27:05.125"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.125" endtime="20241124 14:27:05.125"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.125" endtime="20241124 14:27:05.125"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.124" endtime="20241124 14:27:05.125"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.124" endtime="20241124 14:27:05.125"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.124" endtime="20241124 14:27:05.125"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.120" endtime="20241124 14:27:05.125"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.119" endtime="20241124 14:27:05.126"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:05.126" endtime="20241124 14:27:05.126"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.126" endtime="20241124 14:27:05.126"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.126" endtime="20241124 14:27:05.126"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.126" endtime="20241124 14:27:05.127"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.126" endtime="20241124 14:27:05.127"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.126" endtime="20241124 14:27:05.127"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.127" endtime="20241124 14:27:05.127"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.127" endtime="20241124 14:27:05.127"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.128" endtime="20241124 14:27:05.128"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.127" endtime="20241124 14:27:05.128"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.128" endtime="20241124 14:27:05.128"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.128" endtime="20241124 14:27:05.128"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.128" endtime="20241124 14:27:05.128"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.127" endtime="20241124 14:27:05.128"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.127" endtime="20241124 14:27:05.128"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.127" endtime="20241124 14:27:05.128"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.126" endtime="20241124 14:27:05.128"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.126" endtime="20241124 14:27:05.128"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.100" endtime="20241124 14:27:05.128"/>
</iter>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.129"/>
</for>
<msg timestamp="20241124 14:27:05.129" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:27:05.062" endtime="20241124 14:27:05.129"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:05.129" endtime="20241124 14:27:05.129"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:27:05.131" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '284', 'status': 'COMPLETED', 'actionName': 'Click Profile image icon', 'actionType': 'CLICK', 'actionXpath': 'id=headerProfileImage', 'inputValue': '', 'errorMessage':...</msg>
<status status="PASS" starttime="20241124 14:27:05.131" endtime="20241124 14:27:05.132"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:27:05.132" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "284", "status": "COMPLETED", "actionName": "Click Profile image icon", "actionType": "CLICK", "actionXpath": "id=headerProfileImage", "inputValue": "", "errorMessage":...</msg>
<status status="PASS" starttime="20241124 14:27:05.132" endtime="20241124 14:27:05.132"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:27:05.137" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:27:05.138" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:27:05.133" endtime="20241124 14:27:05.138"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:05.138" endtime="20241124 14:27:05.138"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:27:05.139" endtime="20241124 14:27:05.139"/>
</return>
<status status="PASS" starttime="20241124 14:27:05.132" endtime="20241124 14:27:05.139"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.130" endtime="20241124 14:27:05.139"/>
</kw>
<status status="PASS" starttime="20241124 14:27:04.892" endtime="20241124 14:27:05.139"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.140" endtime="20241124 14:27:05.140"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:27:05.140" endtime="20241124 14:27:05.141"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.141" endtime="20241124 14:27:05.141"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.140" endtime="20241124 14:27:05.141"/>
</branch>
<status status="PASS" starttime="20241124 14:27:04.892" endtime="20241124 14:27:05.141"/>
</try>
<status status="PASS" starttime="20241124 14:27:04.892" endtime="20241124 14:27:05.142"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '46', 'actionId': '33', 'flowId': '15', 'order': 1, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.564Z', 'action': {'id': '33', 'name': 'Click Profile Dropdown acti...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.143" level="INFO">${action} = {'id': '33', 'name': 'Click Profile Dropdown action', 'type': 'CLICK', 'xpath': '//p[text()="Profile"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T17:32:01.896Z', 'updatedAt': '2024-...</msg>
<status status="PASS" starttime="20241124 14:27:05.143" endtime="20241124 14:27:05.143"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:05.143" endtime="20241124 14:27:05.144"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:27:05.144" level="INFO">${input} = {'id': '30', 'actionId': '33', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-21T17:32:02.118Z', 'updatedAt': '2024-11-21T17:32:02.118Z'}</msg>
<status status="PASS" starttime="20241124 14:27:05.144" endtime="20241124 14:27:05.144"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.145" endtime="20241124 14:27:05.145"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.145" endtime="20241124 14:27:05.145"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.144" endtime="20241124 14:27:05.145"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.144" endtime="20241124 14:27:05.145"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.146" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:27:05.146" endtime="20241124 14:27:05.146"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:27:05.146" endtime="20241124 14:27:05.146"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.146" endtime="20241124 14:27:05.146"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:27:05.147" endtime="20241124 14:27:05.147"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.147" endtime="20241124 14:27:05.147"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:27:05.161" level="INFO">Waited for Element with selector //p[text()="Profile"] at state attached</msg>
<status status="PASS" starttime="20241124 14:27:05.156" endtime="20241124 14:27:05.161"/>
</kw>
<msg timestamp="20241124 14:27:05.161" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.155" endtime="20241124 14:27:05.161"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:05.161" endtime="20241124 14:27:05.162"/>
</return>
<status status="PASS" starttime="20241124 14:27:05.155" endtime="20241124 14:27:05.162"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.162" endtime="20241124 14:27:05.162"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.162" endtime="20241124 14:27:05.162"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.162" endtime="20241124 14:27:05.162"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.155" endtime="20241124 14:27:05.162"/>
</try>
<msg timestamp="20241124 14:27:05.163" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.154" endtime="20241124 14:27:05.163"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:05.163" endtime="20241124 14:27:05.163"/>
</return>
<status status="PASS" starttime="20241124 14:27:05.153" endtime="20241124 14:27:05.163"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.163" endtime="20241124 14:27:05.163"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.163" endtime="20241124 14:27:05.163"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.153" endtime="20241124 14:27:05.163"/>
</try>
<msg timestamp="20241124 14:27:05.163" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.152" endtime="20241124 14:27:05.163"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.165" endtime="20241124 14:27:05.165"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.166" endtime="20241124 14:27:05.166"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.165" endtime="20241124 14:27:05.166"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.165" endtime="20241124 14:27:05.166"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.164" endtime="20241124 14:27:05.166"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.151" endtime="20241124 14:27:05.166"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:27:05.178" level="INFO">Waited for Element with selector //p[text()="Profile"] at state visible</msg>
<status status="PASS" starttime="20241124 14:27:05.174" endtime="20241124 14:27:05.179"/>
</kw>
<msg timestamp="20241124 14:27:05.179" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.173" endtime="20241124 14:27:05.179"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:05.179" endtime="20241124 14:27:05.179"/>
</return>
<status status="PASS" starttime="20241124 14:27:05.173" endtime="20241124 14:27:05.179"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.179" endtime="20241124 14:27:05.179"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.180" endtime="20241124 14:27:05.180"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.179" endtime="20241124 14:27:05.180"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.173" endtime="20241124 14:27:05.180"/>
</try>
<msg timestamp="20241124 14:27:05.180" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.172" endtime="20241124 14:27:05.180"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:05.180" endtime="20241124 14:27:05.180"/>
</return>
<msg timestamp="20241124 14:27:05.181" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.168" endtime="20241124 14:27:05.181"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.183" endtime="20241124 14:27:05.183"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.183" endtime="20241124 14:27:05.184"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.183" endtime="20241124 14:27:05.184"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.183" endtime="20241124 14:27:05.184"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.182" endtime="20241124 14:27:05.184"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.168" endtime="20241124 14:27:05.184"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:27:05.203" level="INFO">Waited for Element with selector //p[text()="Profile"] at state enabled</msg>
<status status="PASS" starttime="20241124 14:27:05.189" endtime="20241124 14:27:05.204"/>
</kw>
<msg timestamp="20241124 14:27:05.204" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.189" endtime="20241124 14:27:05.204"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:05.204" endtime="20241124 14:27:05.204"/>
</return>
<status status="PASS" starttime="20241124 14:27:05.189" endtime="20241124 14:27:05.204"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.205" endtime="20241124 14:27:05.205"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.205" endtime="20241124 14:27:05.205"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.205" endtime="20241124 14:27:05.206"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.189" endtime="20241124 14:27:05.206"/>
</try>
<msg timestamp="20241124 14:27:05.206" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.188" endtime="20241124 14:27:05.206"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:05.206" endtime="20241124 14:27:05.206"/>
</return>
<msg timestamp="20241124 14:27:05.206" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.186" endtime="20241124 14:27:05.206"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.209" endtime="20241124 14:27:05.209"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.209" endtime="20241124 14:27:05.209"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.209" endtime="20241124 14:27:05.209"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.208" endtime="20241124 14:27:05.209"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.207" endtime="20241124 14:27:05.209"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.186" endtime="20241124 14:27:05.210"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.149" endtime="20241124 14:27:05.210"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:27:05.210" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:27:05.210" endtime="20241124 14:27:05.210"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.212" endtime="20241124 14:27:05.212"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.212" endtime="20241124 14:27:05.212"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:05.212" endtime="20241124 14:27:05.213"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.212" endtime="20241124 14:27:05.213"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.212" endtime="20241124 14:27:05.213"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241124 14:27:05.213" endtime="20241124 14:27:05.377"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.213" endtime="20241124 14:27:05.377"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.377" endtime="20241124 14:27:05.377"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.378" endtime="20241124 14:27:05.378"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.377" endtime="20241124 14:27:05.378"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.213" endtime="20241124 14:27:05.378"/>
</try>
<status status="PASS" starttime="20241124 14:27:05.211" endtime="20241124 14:27:05.378"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.211" endtime="20241124 14:27:05.378"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.211" endtime="20241124 14:27:05.378"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.379" endtime="20241124 14:27:05.379"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.378" endtime="20241124 14:27:05.379"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.210" endtime="20241124 14:27:05.379"/>
</try>
<status status="PASS" starttime="20241124 14:27:05.149" endtime="20241124 14:27:05.379"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.147" endtime="20241124 14:27:05.379"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.381" endtime="20241124 14:27:05.381"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.383" endtime="20241124 14:27:05.383"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.379" endtime="20241124 14:27:05.383"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.384" endtime="20241124 14:27:05.384"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.383" endtime="20241124 14:27:05.384"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.390" endtime="20241124 14:27:05.391"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.385" endtime="20241124 14:27:05.391"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.393" endtime="20241124 14:27:05.394"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.391" endtime="20241124 14:27:05.394"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.395" endtime="20241124 14:27:05.396"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.394" endtime="20241124 14:27:05.396"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.398" endtime="20241124 14:27:05.398"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.399" endtime="20241124 14:27:05.399"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.399" endtime="20241124 14:27:05.399"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.400" endtime="20241124 14:27:05.400"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.399" endtime="20241124 14:27:05.400"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.398" endtime="20241124 14:27:05.400"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.396" endtime="20241124 14:27:05.400"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:27:05.412" endtime="20241124 14:27:05.412"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.416" endtime="20241124 14:27:05.416"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.401" endtime="20241124 14:27:05.416"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.418" endtime="20241124 14:27:05.418"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.419" endtime="20241124 14:27:05.419"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.418" endtime="20241124 14:27:05.419"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.419" endtime="20241124 14:27:05.419"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.419" endtime="20241124 14:27:05.419"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.418" endtime="20241124 14:27:05.419"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.417" endtime="20241124 14:27:05.419"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:27:05.431" endtime="20241124 14:27:05.431"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.435" endtime="20241124 14:27:05.436"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.419" endtime="20241124 14:27:05.436"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.439" endtime="20241124 14:27:05.440"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.440" endtime="20241124 14:27:05.441"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.440" endtime="20241124 14:27:05.441"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.441" endtime="20241124 14:27:05.441"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.441" endtime="20241124 14:27:05.441"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.440" endtime="20241124 14:27:05.441"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.436" endtime="20241124 14:27:05.441"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.443" endtime="20241124 14:27:05.444"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.441" endtime="20241124 14:27:05.444"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:27:05.453" endtime="20241124 14:27:05.455"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.455" endtime="20241124 14:27:05.456"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.444" endtime="20241124 14:27:05.456"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.146" endtime="20241124 14:27:05.456"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:05.457" endtime="20241124 14:27:05.457"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:27:05.458" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:27:05.457" endtime="20241124 14:27:05.458"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:27:05.458" endtime="20241124 14:27:05.458"/>
</return>
<msg timestamp="20241124 14:27:05.458" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:27:05.145" endtime="20241124 14:27:05.458"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.459" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:46</msg>
<status status="PASS" starttime="20241124 14:27:05.459" endtime="20241124 14:27:05.459"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.460" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:27:05.460" endtime="20241124 14:27:05.460"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.460" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:27:05.460" endtime="20241124 14:27:05.460"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.461" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.461" endtime="20241124 14:27:05.461"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.461" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:27:05.461" endtime="20241124 14:27:05.461"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.462" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.461" endtime="20241124 14:27:05.462"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.462" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:27:05.462" endtime="20241124 14:27:05.462"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.462" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:27:05.462" endtime="20241124 14:27:05.462"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:05.463" endtime="20241124 14:27:05.463"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:27:05.465" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:27:05.465" endtime="20241124 14:27:05.465"/>
</kw>
<msg timestamp="20241124 14:27:05.465" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.465" endtime="20241124 14:27:05.466"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.466" endtime="20241124 14:27:05.466"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.466" endtime="20241124 14:27:05.466"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.466" endtime="20241124 14:27:05.466"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.467" endtime="20241124 14:27:05.467"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.467" endtime="20241124 14:27:05.467"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.466" endtime="20241124 14:27:05.467"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.466" endtime="20241124 14:27:05.467"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.466" endtime="20241124 14:27:05.467"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:05.467" endtime="20241124 14:27:05.467"/>
</return>
<msg timestamp="20241124 14:27:05.467" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.464" endtime="20241124 14:27:05.468"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:05.472" endtime="20241124 14:27:05.473"/>
</kw>
<msg timestamp="20241124 14:27:05.473" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.469" endtime="20241124 14:27:05.473"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.474" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:27:05.474" endtime="20241124 14:27:05.474"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.475" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.475" endtime="20241124 14:27:05.475"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.475" endtime="20241124 14:27:05.476"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.476" endtime="20241124 14:27:05.476"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.476" endtime="20241124 14:27:05.476"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.474" endtime="20241124 14:27:05.476"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.473" endtime="20241124 14:27:05.476"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.473" endtime="20241124 14:27:05.476"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:05.476" endtime="20241124 14:27:05.477"/>
</return>
<msg timestamp="20241124 14:27:05.477" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.469" endtime="20241124 14:27:05.477"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:05.478" endtime="20241124 14:27:05.478"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.478" endtime="20241124 14:27:05.478"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.478" endtime="20241124 14:27:05.478"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.479" endtime="20241124 14:27:05.479"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.479" endtime="20241124 14:27:05.479"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.479" endtime="20241124 14:27:05.479"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.480" endtime="20241124 14:27:05.480"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.480" endtime="20241124 14:27:05.480"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.480" endtime="20241124 14:27:05.480"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.479" endtime="20241124 14:27:05.480"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.478" endtime="20241124 14:27:05.481"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.478" endtime="20241124 14:27:05.481"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.481" endtime="20241124 14:27:05.481"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.481" endtime="20241124 14:27:05.481"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.481" endtime="20241124 14:27:05.481"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.482" endtime="20241124 14:27:05.482"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.482" endtime="20241124 14:27:05.482"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.482" endtime="20241124 14:27:05.482"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.481" endtime="20241124 14:27:05.482"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.481" endtime="20241124 14:27:05.482"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.481" endtime="20241124 14:27:05.482"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.477" endtime="20241124 14:27:05.483"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.477" endtime="20241124 14:27:05.483"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:05.483" endtime="20241124 14:27:05.483"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.483" endtime="20241124 14:27:05.484"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.483" endtime="20241124 14:27:05.484"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.484" endtime="20241124 14:27:05.484"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.484" endtime="20241124 14:27:05.484"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.484" endtime="20241124 14:27:05.484"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.485" endtime="20241124 14:27:05.485"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.485" endtime="20241124 14:27:05.485"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.485" endtime="20241124 14:27:05.486"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.485" endtime="20241124 14:27:05.486"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.487" endtime="20241124 14:27:05.488"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.488" endtime="20241124 14:27:05.488"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.486" endtime="20241124 14:27:05.488"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.485" endtime="20241124 14:27:05.488"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.484" endtime="20241124 14:27:05.488"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.484" endtime="20241124 14:27:05.489"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.483" endtime="20241124 14:27:05.489"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.483" endtime="20241124 14:27:05.489"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.460" endtime="20241124 14:27:05.489"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.491" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:27:05.490" endtime="20241124 14:27:05.491"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.491" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:27:05.491" endtime="20241124 14:27:05.492"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.492" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.492" endtime="20241124 14:27:05.492"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.493" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:27:05.493" endtime="20241124 14:27:05.493"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.494" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.493" endtime="20241124 14:27:05.494"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.494" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:27:05.494" endtime="20241124 14:27:05.494"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.495" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:27:05.495" endtime="20241124 14:27:05.495"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:05.495" endtime="20241124 14:27:05.496"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:27:05.503" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:27:05.501" endtime="20241124 14:27:05.503"/>
</kw>
<msg timestamp="20241124 14:27:05.503" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.500" endtime="20241124 14:27:05.503"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.505" endtime="20241124 14:27:05.505"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.506" endtime="20241124 14:27:05.507"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.505" endtime="20241124 14:27:05.507"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.508" endtime="20241124 14:27:05.508"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.507" endtime="20241124 14:27:05.508"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.505" endtime="20241124 14:27:05.508"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.504" endtime="20241124 14:27:05.508"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.504" endtime="20241124 14:27:05.508"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:05.508" endtime="20241124 14:27:05.509"/>
</return>
<msg timestamp="20241124 14:27:05.509" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.498" endtime="20241124 14:27:05.509"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:27:05.514" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:27:05.513" endtime="20241124 14:27:05.514"/>
</kw>
<msg timestamp="20241124 14:27:05.515" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.512" endtime="20241124 14:27:05.515"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.515" endtime="20241124 14:27:05.515"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.515" endtime="20241124 14:27:05.516"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.515" endtime="20241124 14:27:05.516"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.516" endtime="20241124 14:27:05.516"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.516" endtime="20241124 14:27:05.516"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.515" endtime="20241124 14:27:05.516"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.515" endtime="20241124 14:27:05.516"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.515" endtime="20241124 14:27:05.516"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:05.516" endtime="20241124 14:27:05.516"/>
</return>
<msg timestamp="20241124 14:27:05.517" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.511" endtime="20241124 14:27:05.517"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:05.517" endtime="20241124 14:27:05.517"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.517" endtime="20241124 14:27:05.517"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.517" endtime="20241124 14:27:05.517"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.518" endtime="20241124 14:27:05.518"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.518" endtime="20241124 14:27:05.518"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.517" endtime="20241124 14:27:05.518"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.518" endtime="20241124 14:27:05.518"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.518" endtime="20241124 14:27:05.518"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.518" endtime="20241124 14:27:05.518"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.517" endtime="20241124 14:27:05.518"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.517" endtime="20241124 14:27:05.519"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.517" endtime="20241124 14:27:05.519"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.521" endtime="20241124 14:27:05.521"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.521" endtime="20241124 14:27:05.521"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.520" endtime="20241124 14:27:05.521"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.522" endtime="20241124 14:27:05.522"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.523" endtime="20241124 14:27:05.523"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.521" endtime="20241124 14:27:05.523"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.520" endtime="20241124 14:27:05.523"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.520" endtime="20241124 14:27:05.523"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.520" endtime="20241124 14:27:05.523"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.517" endtime="20241124 14:27:05.523"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.517" endtime="20241124 14:27:05.523"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:05.524" endtime="20241124 14:27:05.524"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.524" endtime="20241124 14:27:05.524"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.524" endtime="20241124 14:27:05.524"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.525" endtime="20241124 14:27:05.525"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.524" endtime="20241124 14:27:05.525"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.524" endtime="20241124 14:27:05.525"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.525" endtime="20241124 14:27:05.525"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.526" endtime="20241124 14:27:05.526"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.526" endtime="20241124 14:27:05.526"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.525" endtime="20241124 14:27:05.526"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.526" endtime="20241124 14:27:05.526"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.526" endtime="20241124 14:27:05.526"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.526" endtime="20241124 14:27:05.526"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.525" endtime="20241124 14:27:05.526"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.525" endtime="20241124 14:27:05.527"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.525" endtime="20241124 14:27:05.527"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.524" endtime="20241124 14:27:05.527"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.523" endtime="20241124 14:27:05.527"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.490" endtime="20241124 14:27:05.527"/>
</iter>
<status status="PASS" starttime="20241124 14:27:05.459" endtime="20241124 14:27:05.527"/>
</for>
<msg timestamp="20241124 14:27:05.527" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:27:05.458" endtime="20241124 14:27:05.527"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:05.528" endtime="20241124 14:27:05.528"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:27:05.530" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '285', 'status': 'COMPLETED', 'actionName': 'Click Profile Dropdown action', 'actionType': 'CLICK', 'actionXpath': '//p[text()="Profile"]', 'inputValue': '', 'errorMess...</msg>
<status status="PASS" starttime="20241124 14:27:05.529" endtime="20241124 14:27:05.530"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:27:05.531" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "285", "status": "COMPLETED", "actionName": "Click Profile Dropdown action", "actionType": "CLICK", "actionXpath": "//p[text()=\"Profile\"]", "inputValue": "", "errorMe...</msg>
<status status="PASS" starttime="20241124 14:27:05.531" endtime="20241124 14:27:05.531"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:27:05.535" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:27:05.536" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:27:05.532" endtime="20241124 14:27:05.536"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:05.537" endtime="20241124 14:27:05.538"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:27:05.538" endtime="20241124 14:27:05.539"/>
</return>
<status status="PASS" starttime="20241124 14:27:05.530" endtime="20241124 14:27:05.539"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.528" endtime="20241124 14:27:05.540"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.142" endtime="20241124 14:27:05.540"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.541" endtime="20241124 14:27:05.541"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:27:05.541" endtime="20241124 14:27:05.541"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.542" endtime="20241124 14:27:05.542"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.540" endtime="20241124 14:27:05.542"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.142" endtime="20241124 14:27:05.542"/>
</try>
<status status="PASS" starttime="20241124 14:27:05.142" endtime="20241124 14:27:05.542"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '47', 'actionId': '34', 'flowId': '15', 'order': 2, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.566Z', 'action': {'id': '34', 'name': 'Is Name heading visible', '...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.544" level="INFO">${action} = {'id': '34', 'name': 'Is Name heading visible', 'type': 'IS_ELEMENT_VISIBLE', 'xpath': '//h4[text()="bharani deepan"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T17:33:53.346Z', 'upd...</msg>
<status status="PASS" starttime="20241124 14:27:05.543" endtime="20241124 14:27:05.544"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:05.545" endtime="20241124 14:27:05.545"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:27:05.546" level="INFO">${input} = {'id': '31', 'actionId': '34', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-21T17:33:53.666Z', 'updatedAt': '2024-11-21T17:33:53.666Z'}</msg>
<status status="PASS" starttime="20241124 14:27:05.546" endtime="20241124 14:27:05.546"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.547" endtime="20241124 14:27:05.547"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.548" endtime="20241124 14:27:05.548"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.547" endtime="20241124 14:27:05.548"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.547" endtime="20241124 14:27:05.548"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.549" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:27:05.549" endtime="20241124 14:27:05.550"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:27:05.551" endtime="20241124 14:27:05.551"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.550" endtime="20241124 14:27:05.551"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:27:05.551" endtime="20241124 14:27:05.552"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.551" endtime="20241124 14:27:05.552"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.557" endtime="20241124 14:27:05.557"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.553" endtime="20241124 14:27:05.557"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.560" endtime="20241124 14:27:05.560"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.561" endtime="20241124 14:27:05.562"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.557" endtime="20241124 14:27:05.562"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.563" endtime="20241124 14:27:05.563"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.562" endtime="20241124 14:27:05.563"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.566" endtime="20241124 14:27:05.566"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.563" endtime="20241124 14:27:05.566"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.568" endtime="20241124 14:27:05.569"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.566" endtime="20241124 14:27:05.569"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.573" endtime="20241124 14:27:05.573"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.569" endtime="20241124 14:27:05.573"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.576" endtime="20241124 14:27:05.576"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.576" endtime="20241124 14:27:05.577"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.576" endtime="20241124 14:27:05.577"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.577" endtime="20241124 14:27:05.577"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.577" endtime="20241124 14:27:05.577"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.576" endtime="20241124 14:27:05.578"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.574" endtime="20241124 14:27:05.578"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:27:05.589" endtime="20241124 14:27:05.589"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.593" endtime="20241124 14:27:05.593"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.578" endtime="20241124 14:27:05.593"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.594" endtime="20241124 14:27:05.594"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.595" endtime="20241124 14:27:05.595"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.595" endtime="20241124 14:27:05.595"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.595" endtime="20241124 14:27:05.595"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.595" endtime="20241124 14:27:05.595"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.594" endtime="20241124 14:27:05.595"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.593" endtime="20241124 14:27:05.595"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:27:05.601" endtime="20241124 14:27:05.602"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.608" endtime="20241124 14:27:05.608"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.596" endtime="20241124 14:27:05.608"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:27:05.845" level="INFO">Waited for Element with selector //h4[text()="bharani deepan"] at state attached</msg>
<status status="PASS" starttime="20241124 14:27:05.610" endtime="20241124 14:27:05.846"/>
</kw>
<msg timestamp="20241124 14:27:05.846" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.610" endtime="20241124 14:27:05.846"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:05.846" endtime="20241124 14:27:05.846"/>
</return>
<status status="PASS" starttime="20241124 14:27:05.610" endtime="20241124 14:27:05.847"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.847" endtime="20241124 14:27:05.847"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.848" endtime="20241124 14:27:05.848"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.847" endtime="20241124 14:27:05.848"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.610" endtime="20241124 14:27:05.848"/>
</try>
<msg timestamp="20241124 14:27:05.849" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.610" endtime="20241124 14:27:05.849"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:05.849" endtime="20241124 14:27:05.849"/>
</return>
<status status="PASS" starttime="20241124 14:27:05.610" endtime="20241124 14:27:05.849"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.850" endtime="20241124 14:27:05.850"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.849" endtime="20241124 14:27:05.850"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.610" endtime="20241124 14:27:05.850"/>
</try>
<msg timestamp="20241124 14:27:05.851" level="INFO">${value} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.610" endtime="20241124 14:27:05.851"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.852" level="INFO">${value} = TRUE</msg>
<status status="PASS" starttime="20241124 14:27:05.851" endtime="20241124 14:27:05.852"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.851" endtime="20241124 14:27:05.852"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.853" endtime="20241124 14:27:05.854"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.852" endtime="20241124 14:27:05.855"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.851" endtime="20241124 14:27:05.855"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.608" endtime="20241124 14:27:05.855"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.860" endtime="20241124 14:27:05.860"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.856" endtime="20241124 14:27:05.860"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:27:05.866" endtime="20241124 14:27:05.867"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.867" endtime="20241124 14:27:05.867"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.860" endtime="20241124 14:27:05.867"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.550" endtime="20241124 14:27:05.867"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:05.867" endtime="20241124 14:27:05.868"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:27:05.869" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:27:05.868" endtime="20241124 14:27:05.869"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:27:05.869" endtime="20241124 14:27:05.869"/>
</return>
<msg timestamp="20241124 14:27:05.869" level="INFO">${value} = TRUE</msg>
<status status="PASS" starttime="20241124 14:27:05.548" endtime="20241124 14:27:05.870"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.872" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:27:05.871" endtime="20241124 14:27:05.872"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.872" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:27:05.872" endtime="20241124 14:27:05.872"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.873" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:27:05.873" endtime="20241124 14:27:05.873"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.874" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.874" endtime="20241124 14:27:05.874"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.875" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:27:05.874" endtime="20241124 14:27:05.875"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.877" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.876" endtime="20241124 14:27:05.877"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.878" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:27:05.877" endtime="20241124 14:27:05.878"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.879" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:27:05.879" endtime="20241124 14:27:05.879"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:05.879" endtime="20241124 14:27:05.880"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:27:05.882" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:27:05.882" endtime="20241124 14:27:05.882"/>
</kw>
<msg timestamp="20241124 14:27:05.883" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.882" endtime="20241124 14:27:05.883"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.883" endtime="20241124 14:27:05.883"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.883" endtime="20241124 14:27:05.883"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.883" endtime="20241124 14:27:05.883"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.884" endtime="20241124 14:27:05.884"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.884" endtime="20241124 14:27:05.884"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.883" endtime="20241124 14:27:05.884"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.883" endtime="20241124 14:27:05.884"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.883" endtime="20241124 14:27:05.884"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:05.884" endtime="20241124 14:27:05.884"/>
</return>
<msg timestamp="20241124 14:27:05.884" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.881" endtime="20241124 14:27:05.884"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:05.890" endtime="20241124 14:27:05.891"/>
</kw>
<msg timestamp="20241124 14:27:05.891" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.890" endtime="20241124 14:27:05.891"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.892" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:27:05.892" endtime="20241124 14:27:05.892"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.893" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.893" endtime="20241124 14:27:05.893"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.893" endtime="20241124 14:27:05.893"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.894" endtime="20241124 14:27:05.894"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.894" endtime="20241124 14:27:05.894"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.892" endtime="20241124 14:27:05.894"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.892" endtime="20241124 14:27:05.894"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.891" endtime="20241124 14:27:05.894"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:05.894" endtime="20241124 14:27:05.895"/>
</return>
<msg timestamp="20241124 14:27:05.895" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.888" endtime="20241124 14:27:05.895"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:05.896" endtime="20241124 14:27:05.896"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.896" endtime="20241124 14:27:05.896"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.896" endtime="20241124 14:27:05.896"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.897" endtime="20241124 14:27:05.897"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.897" endtime="20241124 14:27:05.897"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.897" endtime="20241124 14:27:05.898"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.898" endtime="20241124 14:27:05.898"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.898" endtime="20241124 14:27:05.898"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.898" endtime="20241124 14:27:05.898"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.897" endtime="20241124 14:27:05.898"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.897" endtime="20241124 14:27:05.899"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.896" endtime="20241124 14:27:05.899"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.899" endtime="20241124 14:27:05.899"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.900" endtime="20241124 14:27:05.900"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.899" endtime="20241124 14:27:05.900"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.900" endtime="20241124 14:27:05.900"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.900" endtime="20241124 14:27:05.901"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.900" endtime="20241124 14:27:05.901"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.899" endtime="20241124 14:27:05.901"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.899" endtime="20241124 14:27:05.901"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.899" endtime="20241124 14:27:05.901"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.895" endtime="20241124 14:27:05.901"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.895" endtime="20241124 14:27:05.901"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:05.902" endtime="20241124 14:27:05.902"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.902" endtime="20241124 14:27:05.902"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.902" endtime="20241124 14:27:05.902"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.903" endtime="20241124 14:27:05.903"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.903" endtime="20241124 14:27:05.903"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.902" endtime="20241124 14:27:05.903"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.903" endtime="20241124 14:27:05.903"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.904" endtime="20241124 14:27:05.904"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.904" endtime="20241124 14:27:05.904"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.904" endtime="20241124 14:27:05.904"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.904" endtime="20241124 14:27:05.904"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.905" endtime="20241124 14:27:05.905"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.904" endtime="20241124 14:27:05.905"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.904" endtime="20241124 14:27:05.905"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.903" endtime="20241124 14:27:05.905"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.903" endtime="20241124 14:27:05.905"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.902" endtime="20241124 14:27:05.905"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.901" endtime="20241124 14:27:05.905"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.872" endtime="20241124 14:27:05.905"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.906" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:27:05.905" endtime="20241124 14:27:05.906"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.906" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:27:05.906" endtime="20241124 14:27:05.906"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.907" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.907" endtime="20241124 14:27:05.907"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.908" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:27:05.907" endtime="20241124 14:27:05.908"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.909" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.908" endtime="20241124 14:27:05.909"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.909" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:27:05.909" endtime="20241124 14:27:05.909"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.909" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:27:05.909" endtime="20241124 14:27:05.910"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:05.910" endtime="20241124 14:27:05.910"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:05.913" endtime="20241124 14:27:05.913"/>
</kw>
<msg timestamp="20241124 14:27:05.913" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.912" endtime="20241124 14:27:05.913"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.914" level="INFO">${values} = TRUE</msg>
<status status="PASS" starttime="20241124 14:27:05.914" endtime="20241124 14:27:05.914"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.915" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.914" endtime="20241124 14:27:05.915"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.914" endtime="20241124 14:27:05.915"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.915" endtime="20241124 14:27:05.915"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.915" endtime="20241124 14:27:05.915"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.914" endtime="20241124 14:27:05.915"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.913" endtime="20241124 14:27:05.915"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.913" endtime="20241124 14:27:05.915"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:05.915" endtime="20241124 14:27:05.916"/>
</return>
<msg timestamp="20241124 14:27:05.916" level="INFO">${is_source_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:05.912" endtime="20241124 14:27:05.916"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:27:05.922" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:27:05.919" endtime="20241124 14:27:05.922"/>
</kw>
<msg timestamp="20241124 14:27:05.922" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.919" endtime="20241124 14:27:05.922"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.923" endtime="20241124 14:27:05.923"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.923" endtime="20241124 14:27:05.923"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.923" endtime="20241124 14:27:05.923"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.924" endtime="20241124 14:27:05.924"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.923" endtime="20241124 14:27:05.924"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.923" endtime="20241124 14:27:05.924"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.923" endtime="20241124 14:27:05.924"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.922" endtime="20241124 14:27:05.924"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:05.924" endtime="20241124 14:27:05.924"/>
</return>
<msg timestamp="20241124 14:27:05.924" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:27:05.917" endtime="20241124 14:27:05.924"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:05.925" endtime="20241124 14:27:05.925"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.925" endtime="20241124 14:27:05.925"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.925" endtime="20241124 14:27:05.925"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20241124 14:27:05.926" endtime="20241124 14:27:05.927"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="PASS" starttime="20241124 14:27:05.927" endtime="20241124 14:27:05.928"/>
</return>
<status status="PASS" starttime="20241124 14:27:05.926" endtime="20241124 14:27:05.928"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.928" endtime="20241124 14:27:05.929"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:05.929" endtime="20241124 14:27:05.929"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.928" endtime="20241124 14:27:05.929"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.926" endtime="20241124 14:27:05.929"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.926" endtime="20241124 14:27:05.929"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.926" endtime="20241124 14:27:05.930"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.931" endtime="20241124 14:27:05.931"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.931" endtime="20241124 14:27:05.932"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.931" endtime="20241124 14:27:05.932"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.932" endtime="20241124 14:27:05.932"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.932" endtime="20241124 14:27:05.932"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.932" endtime="20241124 14:27:05.933"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.930" endtime="20241124 14:27:05.933"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.930" endtime="20241124 14:27:05.933"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.930" endtime="20241124 14:27:05.933"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.925" endtime="20241124 14:27:05.933"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.925" endtime="20241124 14:27:05.933"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:05.934" endtime="20241124 14:27:05.934"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.934" endtime="20241124 14:27:05.934"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.934" endtime="20241124 14:27:05.934"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.936" endtime="20241124 14:27:05.936"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.936" endtime="20241124 14:27:05.937"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.936" endtime="20241124 14:27:05.937"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.938" endtime="20241124 14:27:05.938"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.939" endtime="20241124 14:27:05.939"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.939" endtime="20241124 14:27:05.939"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.939" endtime="20241124 14:27:05.939"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.939" endtime="20241124 14:27:05.940"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:05.940" endtime="20241124 14:27:05.940"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:05.939" endtime="20241124 14:27:05.940"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.939" endtime="20241124 14:27:05.940"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.937" endtime="20241124 14:27:05.940"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.937" endtime="20241124 14:27:05.940"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.934" endtime="20241124 14:27:05.940"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.933" endtime="20241124 14:27:05.940"/>
</if>
<status status="PASS" starttime="20241124 14:27:05.905" endtime="20241124 14:27:05.940"/>
</iter>
<status status="PASS" starttime="20241124 14:27:05.872" endtime="20241124 14:27:05.940"/>
</for>
<msg timestamp="20241124 14:27:05.941" level="INFO">${assertion_message} = Assertion passed: TRUE == TRUE</msg>
<status status="PASS" starttime="20241124 14:27:05.870" endtime="20241124 14:27:05.941"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:05.941" endtime="20241124 14:27:05.941"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:27:05.945" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '286', 'status': 'COMPLETED', 'actionName': 'Is Name heading visible', 'actionType': 'IS_ELEMENT_VISIBLE', 'actionXpath': '//h4[text()="bharani deepan"]', 'inputValue':...</msg>
<status status="PASS" starttime="20241124 14:27:05.944" endtime="20241124 14:27:05.945"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:27:05.946" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "286", "status": "COMPLETED", "actionName": "Is Name heading visible", "actionType": "IS_ELEMENT_VISIBLE", "actionXpath": "//h4[text()=\"bharani deepan\"]", "inputValue...</msg>
<status status="PASS" starttime="20241124 14:27:05.946" endtime="20241124 14:27:05.946"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:27:05.951" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:27:05.952" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:27:05.947" endtime="20241124 14:27:05.952"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:05.952" endtime="20241124 14:27:05.953"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:27:05.954" endtime="20241124 14:27:05.954"/>
</return>
<status status="PASS" starttime="20241124 14:27:05.946" endtime="20241124 14:27:05.955"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.942" endtime="20241124 14:27:05.955"/>
</kw>
<status status="PASS" starttime="20241124 14:27:05.543" endtime="20241124 14:27:05.955"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.956" endtime="20241124 14:27:05.956"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:27:05.956" endtime="20241124 14:27:05.956"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.956" endtime="20241124 14:27:05.957"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.955" endtime="20241124 14:27:05.957"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.543" endtime="20241124 14:27:05.957"/>
</try>
<status status="PASS" starttime="20241124 14:27:05.543" endtime="20241124 14:27:05.957"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '52', 'actionId': '35', 'flowId': '15', 'order': 3, 'createdAt': '2024-11-24T06:43:12.545Z', 'updatedAt': '2024-11-24T06:43:12.545Z', 'action': {'id': '35', 'name': 'Get email id', 'type': 'GET...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.958" level="INFO">${action} = {'id': '35', 'name': 'Get email id', 'type': 'GET_TEXT', 'xpath': '//p[text()="EMAIL"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-23T19:18:23.510Z', 'updatedAt': '2024-11-24T08:38:42.2...</msg>
<status status="PASS" starttime="20241124 14:27:05.958" endtime="20241124 14:27:05.958"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:05.958" endtime="20241124 14:27:05.959"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:27:05.959" level="INFO">${input} = {'id': '32', 'actionId': '35', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-23T19:18:23.679Z', 'updatedAt': '2024-11-23T19:18:23.679Z'}</msg>
<status status="PASS" starttime="20241124 14:27:05.959" endtime="20241124 14:27:05.959"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.961" endtime="20241124 14:27:05.961"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.961" endtime="20241124 14:27:05.961"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.959" endtime="20241124 14:27:05.961"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.959" endtime="20241124 14:27:05.961"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:05.962" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:27:05.962" endtime="20241124 14:27:05.962"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:27:05.962" endtime="20241124 14:27:05.963"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.962" endtime="20241124 14:27:05.963"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:27:05.963" endtime="20241124 14:27:05.963"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.963" endtime="20241124 14:27:05.963"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.965" endtime="20241124 14:27:05.965"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.963" endtime="20241124 14:27:05.965"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.967" endtime="20241124 14:27:05.967"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.970" endtime="20241124 14:27:05.971"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.965" endtime="20241124 14:27:05.971"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.974" endtime="20241124 14:27:05.974"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.972" endtime="20241124 14:27:05.974"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.978" endtime="20241124 14:27:05.978"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.975" endtime="20241124 14:27:05.978"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.980" endtime="20241124 14:27:05.980"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.978" endtime="20241124 14:27:05.980"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.981" endtime="20241124 14:27:05.981"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.980" endtime="20241124 14:27:05.981"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.983" endtime="20241124 14:27:05.983"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.983" endtime="20241124 14:27:05.983"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.983" endtime="20241124 14:27:05.983"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.983" endtime="20241124 14:27:05.983"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.983" endtime="20241124 14:27:05.983"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.983" endtime="20241124 14:27:05.983"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.982" endtime="20241124 14:27:05.984"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:27:05.991" endtime="20241124 14:27:05.991"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.994" endtime="20241124 14:27:05.994"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.984" endtime="20241124 14:27:05.994"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.995" endtime="20241124 14:27:05.995"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.995" endtime="20241124 14:27:05.996"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.995" endtime="20241124 14:27:05.996"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:05.996" endtime="20241124 14:27:05.996"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.996" endtime="20241124 14:27:05.996"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:05.995" endtime="20241124 14:27:05.996"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:05.994" endtime="20241124 14:27:05.996"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:27:06.002" endtime="20241124 14:27:06.002"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.006" endtime="20241124 14:27:06.007"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:05.996" endtime="20241124 14:27:06.007"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.008" endtime="20241124 14:27:06.008"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.009" endtime="20241124 14:27:06.009"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:06.008" endtime="20241124 14:27:06.009"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.009" endtime="20241124 14:27:06.009"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:06.009" endtime="20241124 14:27:06.009"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:06.008" endtime="20241124 14:27:06.009"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:06.007" endtime="20241124 14:27:06.009"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:27:06.025" level="INFO">Waited for Element with selector //p[text()="EMAIL"] at state attached</msg>
<status status="PASS" starttime="20241124 14:27:06.018" endtime="20241124 14:27:06.025"/>
</kw>
<msg timestamp="20241124 14:27:06.025" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:06.017" endtime="20241124 14:27:06.025"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:06.025" endtime="20241124 14:27:06.025"/>
</return>
<status status="PASS" starttime="20241124 14:27:06.017" endtime="20241124 14:27:06.025"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.026" endtime="20241124 14:27:06.026"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.026" endtime="20241124 14:27:06.026"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:06.025" endtime="20241124 14:27:06.026"/>
</branch>
<status status="PASS" starttime="20241124 14:27:06.017" endtime="20241124 14:27:06.026"/>
</try>
<msg timestamp="20241124 14:27:06.026" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:27:06.016" endtime="20241124 14:27:06.026"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:27:06.027" endtime="20241124 14:27:06.027"/>
</return>
<status status="PASS" starttime="20241124 14:27:06.015" endtime="20241124 14:27:06.027"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:27:06.027" endtime="20241124 14:27:06.027"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:06.027" endtime="20241124 14:27:06.027"/>
</branch>
<status status="PASS" starttime="20241124 14:27:06.015" endtime="20241124 14:27:06.027"/>
</try>
<msg timestamp="20241124 14:27:06.027" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:27:06.014" endtime="20241124 14:27:06.027"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.030" endtime="20241124 14:27:06.030"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.030" endtime="20241124 14:27:06.030"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:06.029" endtime="20241124 14:27:06.030"/>
</branch>
<status status="PASS" starttime="20241124 14:27:06.029" endtime="20241124 14:27:06.030"/>
</if>
<status status="PASS" starttime="20241124 14:27:06.028" endtime="20241124 14:27:06.030"/>
</kw>
<status status="PASS" starttime="20241124 14:27:06.014" endtime="20241124 14:27:06.030"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:27:06.041" level="INFO">Property: 'EMAIL'</msg>
<msg timestamp="20241124 14:27:06.041" level="INFO">${property} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:27:06.031" endtime="20241124 14:27:06.041"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:27:06.041" endtime="20241124 14:27:06.041"/>
</return>
<status status="PASS" starttime="20241124 14:27:06.031" endtime="20241124 14:27:06.041"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.041" endtime="20241124 14:27:06.041"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.041" endtime="20241124 14:27:06.041"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:06.041" endtime="20241124 14:27:06.041"/>
</branch>
<status status="PASS" starttime="20241124 14:27:06.030" endtime="20241124 14:27:06.041"/>
</try>
<msg timestamp="20241124 14:27:06.041" level="INFO">${value} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:27:06.011" endtime="20241124 14:27:06.041"/>
</kw>
<status status="PASS" starttime="20241124 14:27:06.010" endtime="20241124 14:27:06.041"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:27:06.041" endtime="20241124 14:27:06.041"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.041" endtime="20241124 14:27:06.041"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:06.041" endtime="20241124 14:27:06.041"/>
</branch>
<status status="PASS" starttime="20241124 14:27:05.962" endtime="20241124 14:27:06.041"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:06.041" endtime="20241124 14:27:06.041"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:27:06.052" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:27:06.041" endtime="20241124 14:27:06.052"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:27:06.052" endtime="20241124 14:27:06.052"/>
</return>
<msg timestamp="20241124 14:27:06.053" level="INFO">${value} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:27:05.961" endtime="20241124 14:27:06.053"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:06.054" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:27:06.054" endtime="20241124 14:27:06.054"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:06.055" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:27:06.055" endtime="20241124 14:27:06.055"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:06.055" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:27:06.055" endtime="20241124 14:27:06.056"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:06.056" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:27:06.056" endtime="20241124 14:27:06.056"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:06.056" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:27:06.056" endtime="20241124 14:27:06.056"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:06.057" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:27:06.056" endtime="20241124 14:27:06.057"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:06.057" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:27:06.057" endtime="20241124 14:27:06.057"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:06.058" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:27:06.057" endtime="20241124 14:27:06.058"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:06.058" endtime="20241124 14:27:06.058"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:06.060" endtime="20241124 14:27:06.060"/>
</kw>
<msg timestamp="20241124 14:27:06.061" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:06.060" endtime="20241124 14:27:06.061"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:06.061" level="INFO">${values} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:27:06.061" endtime="20241124 14:27:06.061"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:06.062" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:06.062" endtime="20241124 14:27:06.062"/>
</kw>
<status status="PASS" starttime="20241124 14:27:06.062" endtime="20241124 14:27:06.062"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.062" endtime="20241124 14:27:06.062"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:06.062" endtime="20241124 14:27:06.062"/>
</branch>
<status status="PASS" starttime="20241124 14:27:06.061" endtime="20241124 14:27:06.063"/>
</if>
<status status="PASS" starttime="20241124 14:27:06.061" endtime="20241124 14:27:06.063"/>
</branch>
<status status="PASS" starttime="20241124 14:27:06.061" endtime="20241124 14:27:06.063"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:06.063" endtime="20241124 14:27:06.063"/>
</return>
<msg timestamp="20241124 14:27:06.063" level="INFO">${is_source_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:06.059" endtime="20241124 14:27:06.063"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:27:06.066" endtime="20241124 14:27:06.066"/>
</kw>
<msg timestamp="20241124 14:27:06.066" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:06.065" endtime="20241124 14:27:06.066"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:06.067" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:27:06.066" endtime="20241124 14:27:06.067"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:27:06.068" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:06.067" endtime="20241124 14:27:06.068"/>
</kw>
<status status="PASS" starttime="20241124 14:27:06.067" endtime="20241124 14:27:06.068"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.068" endtime="20241124 14:27:06.068"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:06.068" endtime="20241124 14:27:06.068"/>
</branch>
<status status="PASS" starttime="20241124 14:27:06.067" endtime="20241124 14:27:06.069"/>
</if>
<status status="PASS" starttime="20241124 14:27:06.066" endtime="20241124 14:27:06.069"/>
</branch>
<status status="PASS" starttime="20241124 14:27:06.066" endtime="20241124 14:27:06.069"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:27:06.069" endtime="20241124 14:27:06.070"/>
</return>
<msg timestamp="20241124 14:27:06.070" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:27:06.065" endtime="20241124 14:27:06.071"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:06.073" endtime="20241124 14:27:06.073"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:06.073" endtime="20241124 14:27:06.074"/>
</branch>
<status status="PASS" starttime="20241124 14:27:06.073" endtime="20241124 14:27:06.074"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.074" endtime="20241124 14:27:06.074"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:06.075" endtime="20241124 14:27:06.075"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:06.074" endtime="20241124 14:27:06.075"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.075" endtime="20241124 14:27:06.075"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:27:06.075" endtime="20241124 14:27:06.076"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:06.075" endtime="20241124 14:27:06.076"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:06.074" endtime="20241124 14:27:06.076"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:06.074" endtime="20241124 14:27:06.076"/>
</branch>
<status status="PASS" starttime="20241124 14:27:06.074" endtime="20241124 14:27:06.076"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<msg timestamp="20241124 14:27:06.077" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:27:06.077" endtime="20241124 14:27:06.077"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:06.078" endtime="20241124 14:27:06.078"/>
</return>
<status status="FAIL" starttime="20241124 14:27:06.076" endtime="20241124 14:27:06.078"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.078" endtime="20241124 14:27:06.078"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:27:06.079" endtime="20241124 14:27:06.079"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:06.078" endtime="20241124 14:27:06.079"/>
</branch>
<status status="FAIL" starttime="20241124 14:27:06.076" endtime="20241124 14:27:06.079"/>
</if>
<status status="FAIL" starttime="20241124 14:27:06.076" endtime="20241124 14:27:06.079"/>
</branch>
<status status="FAIL" starttime="20241124 14:27:06.076" endtime="20241124 14:27:06.079"/>
</if>
<status status="FAIL" starttime="20241124 14:27:06.072" endtime="20241124 14:27:06.080"/>
</branch>
<status status="FAIL" starttime="20241124 14:27:06.071" endtime="20241124 14:27:06.080"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:27:06.080" endtime="20241124 14:27:06.080"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:06.080" endtime="20241124 14:27:06.081"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:06.080" endtime="20241124 14:27:06.081"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.081" endtime="20241124 14:27:06.081"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:06.081" endtime="20241124 14:27:06.081"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:06.081" endtime="20241124 14:27:06.081"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.082" endtime="20241124 14:27:06.082"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.082" endtime="20241124 14:27:06.082"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:06.082" endtime="20241124 14:27:06.082"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:06.082" endtime="20241124 14:27:06.082"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.082" endtime="20241124 14:27:06.083"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:27:06.083" endtime="20241124 14:27:06.083"/>
</return>
<status status="NOT RUN" starttime="20241124 14:27:06.082" endtime="20241124 14:27:06.083"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:06.082" endtime="20241124 14:27:06.083"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:06.081" endtime="20241124 14:27:06.083"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:06.081" endtime="20241124 14:27:06.083"/>
</if>
<status status="NOT RUN" starttime="20241124 14:27:06.080" endtime="20241124 14:27:06.083"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:27:06.080" endtime="20241124 14:27:06.083"/>
</if>
<status status="FAIL" starttime="20241124 14:27:06.055" endtime="20241124 14:27:06.083"/>
</iter>
<status status="FAIL" starttime="20241124 14:27:06.055" endtime="20241124 14:27:06.084"/>
</for>
<status status="FAIL" starttime="20241124 14:27:06.053" endtime="20241124 14:27:06.085"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.085" endtime="20241124 14:27:06.086"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<status status="NOT RUN" starttime="20241124 14:27:06.086" endtime="20241124 14:27:06.086"/>
</kw>
<status status="FAIL" starttime="20241124 14:27:05.957" endtime="20241124 14:27:06.086"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:06.087" endtime="20241124 14:27:06.088"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:27:06.092" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '287', 'status': 'FAILED', 'actionName': 'Get email id', 'actionType': 'GET_TEXT', 'actionXpath': '//p[text()="EMAIL"]', 'inputValue': '', 'errorMessage': 'Email mismat...</msg>
<status status="PASS" starttime="20241124 14:27:06.091" endtime="20241124 14:27:06.092"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:27:06.093" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "287", "status": "FAILED", "actionName": "Get email id", "actionType": "GET_TEXT", "actionXpath": "//p[text()=\"EMAIL\"]", "inputValue": "", "errorMessage": "Email mism...</msg>
<status status="PASS" starttime="20241124 14:27:06.092" endtime="20241124 14:27:06.093"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:27:06.099" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:27:06.099" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:27:06.093" endtime="20241124 14:27:06.099"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:06.099" endtime="20241124 14:27:06.100"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:27:06.100" endtime="20241124 14:27:06.100"/>
</return>
<status status="PASS" starttime="20241124 14:27:06.092" endtime="20241124 14:27:06.101"/>
</kw>
<status status="PASS" starttime="20241124 14:27:06.088" endtime="20241124 14:27:06.102"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Error occurred:${exception}===&gt;</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:06.108" endtime="20241124 14:27:06.110"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>${exception}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20241124 14:27:06.112" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:27:06.111" endtime="20241124 14:27:06.112"/>
</kw>
<status status="FAIL" starttime="20241124 14:27:06.102" endtime="20241124 14:27:06.114"/>
</kw>
<status status="FAIL" starttime="20241124 14:27:06.087" endtime="20241124 14:27:06.114"/>
</branch>
<status status="FAIL" starttime="20241124 14:27:05.957" endtime="20241124 14:27:06.115"/>
</try>
<status status="FAIL" starttime="20241124 14:27:05.957" endtime="20241124 14:27:06.116"/>
</iter>
<status status="FAIL" starttime="20241124 14:27:04.891" endtime="20241124 14:27:06.116"/>
</for>
<status status="FAIL" starttime="20241124 14:27:04.891" endtime="20241124 14:27:06.117"/>
</branch>
<status status="FAIL" starttime="20241124 14:27:04.891" endtime="20241124 14:27:06.117"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<status status="NOT RUN" starttime="20241124 14:27:06.119" endtime="20241124 14:27:06.119"/>
</kw>
<status status="FAIL" starttime="20241124 14:27:04.882" endtime="20241124 14:27:06.121"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:06.125" endtime="20241124 14:27:06.126"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:27:06.128" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '76', 'status': 'FAILED', 'errorMessage': 'Email mismatch: EMAIL != bharani@ideas2it.com'}</msg>
<status status="PASS" starttime="20241124 14:27:06.127" endtime="20241124 14:27:06.128"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:27:06.129" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "76", "status": "FAILED", "errorMessage": "Email mismatch: EMAIL != bharani@ideas2it.com"}</msg>
<status status="PASS" starttime="20241124 14:27:06.129" endtime="20241124 14:27:06.129"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:27:06.136" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:27:06.137" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:27:06.130" endtime="20241124 14:27:06.137"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:06.138" endtime="20241124 14:27:06.140"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:27:06.140" endtime="20241124 14:27:06.140"/>
</return>
<status status="PASS" starttime="20241124 14:27:06.128" endtime="20241124 14:27:06.141"/>
</kw>
<status status="PASS" starttime="20241124 14:27:06.126" endtime="20241124 14:27:06.141"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Error occurred:${exception}===&gt;</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:06.143" endtime="20241124 14:27:06.144"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>${exception}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20241124 14:27:06.146" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:27:06.144" endtime="20241124 14:27:06.146"/>
</kw>
<status status="FAIL" starttime="20241124 14:27:06.142" endtime="20241124 14:27:06.148"/>
</kw>
<status status="FAIL" starttime="20241124 14:27:06.124" endtime="20241124 14:27:06.150"/>
</branch>
<status status="FAIL" starttime="20241124 14:27:04.882" endtime="20241124 14:27:06.150"/>
</try>
<status status="FAIL" starttime="20241124 14:27:04.881" endtime="20241124 14:27:06.150"/>
</iter>
<status status="FAIL" starttime="20241124 14:26:50.421" endtime="20241124 14:27:06.150"/>
</for>
<status status="FAIL" starttime="20241124 14:26:50.417" endtime="20241124 14:27:06.151"/>
</branch>
<status status="FAIL" starttime="20241124 14:26:50.417" endtime="20241124 14:27:06.151"/>
</if>
<kw name="send-test-case-run-message">
<arg>${testCaseRun}[id]</arg>
<arg>PASS</arg>
<status status="NOT RUN" starttime="20241124 14:27:06.153" endtime="20241124 14:27:06.153"/>
</kw>
<status status="FAIL" starttime="20241124 14:26:50.398" endtime="20241124 14:27:06.153"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:06.157" endtime="20241124 14:27:06.158"/>
</kw>
<kw name="send-test-case-run-message">
<arg>${testCaseRun}[id]</arg>
<arg>FAIL</arg>
<arg>errorMessage=${error_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseRunId=${testCaseRunId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:27:06.160" level="INFO">${response_message} = {'testCaseRunId': '38', 'status': 'FAIL', 'errorMessage': 'Email mismatch: EMAIL != bharani@ideas2it.com'}</msg>
<status status="PASS" starttime="20241124 14:27:06.159" endtime="20241124 14:27:06.160"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:27:06.161" level="INFO">${json_response} = {"testCaseRunId": "38", "status": "FAIL", "errorMessage": "Email mismatch: EMAIL != bharani@ideas2it.com"}</msg>
<status status="PASS" starttime="20241124 14:27:06.161" endtime="20241124 14:27:06.161"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:27:06.165" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:27:06.165" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:27:06.161" endtime="20241124 14:27:06.165"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:06.165" endtime="20241124 14:27:06.166"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:27:06.166" endtime="20241124 14:27:06.166"/>
</return>
<status status="PASS" starttime="20241124 14:27:06.160" endtime="20241124 14:27:06.167"/>
</kw>
<status status="PASS" starttime="20241124 14:27:06.159" endtime="20241124 14:27:06.167"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Error occurred:${exception}===&gt;</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:06.169" endtime="20241124 14:27:06.174"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>${exception}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20241124 14:27:06.176" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:27:06.175" endtime="20241124 14:27:06.176"/>
</kw>
<status status="FAIL" starttime="20241124 14:27:06.167" endtime="20241124 14:27:06.177"/>
</kw>
<status status="FAIL" starttime="20241124 14:27:06.155" endtime="20241124 14:27:06.177"/>
</branch>
<status status="FAIL" starttime="20241124 14:26:50.398" endtime="20241124 14:27:06.178"/>
</try>
<status status="FAIL" starttime="20241124 14:26:50.372" endtime="20241124 14:27:06.178"/>
</branch>
<branch type="ELSE">
<kw name="Log To Console" library="BuiltIn">
<arg>Command type not developed</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.178" endtime="20241124 14:27:06.178"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:06.178" endtime="20241124 14:27:06.178"/>
</branch>
<status status="FAIL" starttime="20241124 14:26:50.371" endtime="20241124 14:27:06.178"/>
</if>
<status status="FAIL" starttime="20241124 14:26:50.345" endtime="20241124 14:27:06.179"/>
</kw>
<status status="FAIL" starttime="20241124 14:26:50.345" endtime="20241124 14:27:06.179"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:06.180" endtime="20241124 14:27:06.180"/>
</kw>
<status status="PASS" starttime="20241124 14:27:06.180" endtime="20241124 14:27:06.180"/>
</branch>
<status status="PASS" starttime="20241124 14:26:50.345" endtime="20241124 14:27:06.181"/>
</try>
<kw name="close-browser" library="COMP_BrowserContext">
<try>
<branch type="TRY">
<kw name="Close Browser" library="RPA.Browser.Playwright">
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Closes the current browser.</doc>
<msg timestamp="20241124 14:27:06.562" level="INFO">Closed browser</msg>
<status status="PASS" starttime="20241124 14:27:06.182" endtime="20241124 14:27:06.562"/>
</kw>
<status status="PASS" starttime="20241124 14:27:06.181" endtime="20241124 14:27:06.562"/>
</branch>
<branch type="EXCEPT" variable="${err}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while closing browser: ${err}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:27:06.563" endtime="20241124 14:27:06.563"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:27:06.563" endtime="20241124 14:27:06.563"/>
</branch>
<status status="PASS" starttime="20241124 14:27:06.181" endtime="20241124 14:27:06.563"/>
</try>
<status status="PASS" starttime="20241124 14:27:06.181" endtime="20241124 14:27:06.563"/>
</kw>
<status status="PASS" starttime="20241124 14:17:32.853" endtime="20241124 14:27:06.563"/>
</iter>
<iter>
<kw name="launch-browser" library="COMP_BrowserContext">
<kw name="New Browser" library="RPA.Browser.Playwright">
<arg>chromium</arg>
<arg>headless=False</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new playwright Browser with specified options.</doc>
<msg timestamp="20241124 14:27:06.565" level="INFO">{"browser": "chromium", "headless": false, "devtools": false, "handleSIGHUP": true, "handleSIGINT": true, "handleSIGTERM": true, "slowMo": 0.0, "timeout": 30000.0, "deprecated_pos_args": [], "tracesDir": "C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\79ae5e75-b98d-4f70-be3a-87056ac929f8"}</msg>
<msg timestamp="20241124 14:27:07.400" level="INFO">Successfully created browser with options: {"browser":"chromium","headless":false,"devtools":false,"handleSIGHUP":true,"handleSIGINT":true,"handleSIGTERM":true,"slowMo":0,"timeout":30000,"deprecated_pos_args":[],"tracesDir":"C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\79ae5e75-b98d-4f70-be3a-87056ac929f8"}</msg>
<status status="PASS" starttime="20241124 14:27:06.564" endtime="20241124 14:27:07.400"/>
</kw>
<kw name="New Context" library="RPA.Browser.Playwright">
<arg>viewport={'width': 1280, 'height': 720}</arg>
<arg>acceptDownloads=True</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new BrowserContext with specified options.</doc>
<msg timestamp="20241124 14:27:07.403" level="INFO">{
  "acceptDownloads": true,
  "bypassCSP": false,
  "forcedColors": "none",
  "hideRfBrowser": false,
  "ignoreHTTPSErrors": false,
  "javaScriptEnabled": true,
  "offline": false,
  "reducedMotion": "no-preference",
  "viewport": {
    "width": 1280,
    "height": 720
  },
  "deprecated_pos_args": []
}</msg>
<msg timestamp="20241124 14:27:07.430" level="INFO">Successfully created context. </msg>
<msg timestamp="20241124 14:27:07.430" level="INFO">{'acceptDownloads': True, 'bypassCSP': False, 'forcedColors': 'none', 'hideRfBrowser': False, 'ignoreHTTPSErrors': False, 'javaScriptEnabled': True, 'offline': False, 'reducedMotion': 'no-preference', 'viewport': {'width': 1280, 'height': 720}, 'deprecated_pos_args': []}</msg>
<status status="PASS" starttime="20241124 14:27:07.401" endtime="20241124 14:27:07.430"/>
</kw>
<kw name="Set Browser Timeout" library="RPA.Browser.Playwright">
<arg>${browser_timeout}</arg>
<tag>Config</tag>
<tag>Setter</tag>
<doc>Sets the timeout used by most input and getter keywords.</doc>
<status status="PASS" starttime="20241124 14:27:07.431" endtime="20241124 14:27:07.432"/>
</kw>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>https://www.google.com/</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241124 14:27:10.806" level="INFO">Successfully initialized new page object and opened url: https://www.google.com/</msg>
<msg timestamp="20241124 14:27:10.806" level="INFO">${page_id} = {'page_id': 'page=04b488e3-4bbe-4061-aae7-954d630f21dd', 'video_path': ''}</msg>
<status status="PASS" starttime="20241124 14:27:07.432" endtime="20241124 14:27:10.806"/>
</kw>
<status status="PASS" starttime="20241124 14:27:06.564" endtime="20241124 14:27:10.807"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Polling message===&gt;</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:27:10.807" endtime="20241124 14:27:10.808"/>
</kw>
<kw name="Get A Command" library="CommandConsumer">
<var>${json}</var>
<arg>${5}</arg>
<msg timestamp="20241124 14:28:30.760" level="INFO">${json} = {'type': 'START_RUN', 'payload': {'testCaseRun': {'id': '39', 'testCaseId': '27', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-24T08:58:30.613Z', 'createdAt': '2024-11-24T08:58:30.613Z', 'errorMe...</msg>
<status status="PASS" starttime="20241124 14:27:10.809" endtime="20241124 14:28:30.760"/>
</kw>
<if>
<branch type="IF" condition="'${json}[type]' == 'KILL'">
<break>
<status status="NOT RUN" starttime="20241124 14:28:30.761" endtime="20241124 14:28:30.761"/>
</break>
<status status="NOT RUN" starttime="20241124 14:28:30.761" endtime="20241124 14:28:30.761"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.760" endtime="20241124 14:28:30.761"/>
</if>
<try>
<branch type="TRY">
<kw name="execute-test-case">
<arg>${json}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Data=&gt; ${input}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:30.763" endtime="20241124 14:28:30.772"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_type_exists}</var>
<arg>${input}</arg>
<arg>type</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:30.779" endtime="20241124 14:28:30.780"/>
</kw>
<msg timestamp="20241124 14:28:30.780" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.778" endtime="20241124 14:28:30.780"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.781" level="INFO">${values} = START_RUN</msg>
<status status="PASS" starttime="20241124 14:28:30.781" endtime="20241124 14:28:30.781"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.782" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.782" endtime="20241124 14:28:30.782"/>
</kw>
<status status="PASS" starttime="20241124 14:28:30.782" endtime="20241124 14:28:30.783"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:30.783" endtime="20241124 14:28:30.783"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:30.783" endtime="20241124 14:28:30.783"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.781" endtime="20241124 14:28:30.783"/>
</if>
<status status="PASS" starttime="20241124 14:28:30.780" endtime="20241124 14:28:30.783"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.780" endtime="20241124 14:28:30.783"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:30.783" endtime="20241124 14:28:30.783"/>
</return>
<msg timestamp="20241124 14:28:30.784" level="INFO">${is_type_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.776" endtime="20241124 14:28:30.784"/>
</kw>
<if>
<branch type="IF" condition="$is_type_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Type not exists in the input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:30.784" endtime="20241124 14:28:30.784"/>
</kw>
<return>
<status status="NOT RUN" starttime="20241124 14:28:30.784" endtime="20241124 14:28:30.784"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:30.784" endtime="20241124 14:28:30.784"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.784" endtime="20241124 14:28:30.784"/>
</if>
<if>
<branch type="IF" condition="'${input}[type]' == '${COMMAND_TYPE_START_RUN}'">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCase</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:30.787" endtime="20241124 14:28:30.787"/>
</kw>
<msg timestamp="20241124 14:28:30.787" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.787" endtime="20241124 14:28:30.787"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.788" level="INFO">${values} = {'id': '27', 'name': 'Login positive', 'projectId': '4', 'createdAt': '2024-11-21T16:43:35.118Z', 'updatedAt': '2024-11-24T06:57:13.357Z', 'testCaseFlowSequences': [{'id': '46', 'testCaseId': '27', 'f...</msg>
<status status="PASS" starttime="20241124 14:28:30.788" endtime="20241124 14:28:30.788"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.789" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.789" endtime="20241124 14:28:30.789"/>
</kw>
<status status="PASS" starttime="20241124 14:28:30.788" endtime="20241124 14:28:30.789"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:30.789" endtime="20241124 14:28:30.789"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:30.789" endtime="20241124 14:28:30.790"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.788" endtime="20241124 14:28:30.790"/>
</if>
<status status="PASS" starttime="20241124 14:28:30.787" endtime="20241124 14:28:30.790"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.787" endtime="20241124 14:28:30.790"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:30.790" endtime="20241124 14:28:30.790"/>
</return>
<msg timestamp="20241124 14:28:30.791" level="INFO">${is_test_case_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.786" endtime="20241124 14:28:30.791"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_run_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCaseRun</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:30.799" endtime="20241124 14:28:30.800"/>
</kw>
<msg timestamp="20241124 14:28:30.801" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.798" endtime="20241124 14:28:30.801"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.802" level="INFO">${values} = {'id': '39', 'testCaseId': '27', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-24T08:58:30.613Z', 'createdAt': '2024-11-24T08:58:30.613Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241124 14:28:30.802" endtime="20241124 14:28:30.802"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.803" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.803" endtime="20241124 14:28:30.803"/>
</kw>
<status status="PASS" starttime="20241124 14:28:30.802" endtime="20241124 14:28:30.803"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:30.804" endtime="20241124 14:28:30.804"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:30.804" endtime="20241124 14:28:30.804"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.802" endtime="20241124 14:28:30.804"/>
</if>
<status status="PASS" starttime="20241124 14:28:30.801" endtime="20241124 14:28:30.804"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.801" endtime="20241124 14:28:30.804"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:30.804" endtime="20241124 14:28:30.804"/>
</return>
<msg timestamp="20241124 14:28:30.805" level="INFO">${is_test_case_run_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.797" endtime="20241124 14:28:30.805"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_exists == $False or $is_test_case_run_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Testcase or TestCaseRun data not available in input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:30.805" endtime="20241124 14:28:30.805"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:30.805" endtime="20241124 14:28:30.805"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.805" endtime="20241124 14:28:30.805"/>
</if>
<kw name="Set Variable" library="BuiltIn">
<var>${testCase}</var>
<arg>${input}[payload][testCase]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.806" level="INFO">${testCase} = {'id': '27', 'name': 'Login positive', 'projectId': '4', 'createdAt': '2024-11-21T16:43:35.118Z', 'updatedAt': '2024-11-24T06:57:13.357Z', 'testCaseFlowSequences': [{'id': '46', 'testCaseId': '27', 'f...</msg>
<status status="PASS" starttime="20241124 14:28:30.805" endtime="20241124 14:28:30.807"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${testCaseRun}</var>
<arg>${input}[payload][testCaseRun]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.808" level="INFO">${testCaseRun} = {'id': '39', 'testCaseId': '27', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-24T08:58:30.613Z', 'createdAt': '2024-11-24T08:58:30.613Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241124 14:28:30.807" endtime="20241124 14:28:30.809"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${assertions}</var>
<arg>${testCase}[assertions]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.810" level="INFO">${assertions} = [{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cus...</msg>
<status status="PASS" starttime="20241124 14:28:30.810" endtime="20241124 14:28:30.810"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Name: ${testCase}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:30.811" endtime="20241124 14:28:30.812"/>
</kw>
<try>
<branch type="TRY">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_flow_sequences_exists}</var>
<arg>${testCase}</arg>
<arg>testCaseFlowSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:30.816" endtime="20241124 14:28:30.816"/>
</kw>
<msg timestamp="20241124 14:28:30.816" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.815" endtime="20241124 14:28:30.816"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.817" level="INFO">${values} = [{'id': '46', 'testCaseId': '27', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:35.233Z', 'updatedAt': '2024-11-24T06:57:13.419Z', 'flow': {'id': '14', 'name': 'Login', 'projectId': '4', ...</msg>
<status status="PASS" starttime="20241124 14:28:30.816" endtime="20241124 14:28:30.817"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.818" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.817" endtime="20241124 14:28:30.818"/>
</kw>
<status status="PASS" starttime="20241124 14:28:30.817" endtime="20241124 14:28:30.818"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:30.818" endtime="20241124 14:28:30.818"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:30.818" endtime="20241124 14:28:30.818"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.817" endtime="20241124 14:28:30.818"/>
</if>
<status status="PASS" starttime="20241124 14:28:30.816" endtime="20241124 14:28:30.818"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.816" endtime="20241124 14:28:30.818"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:30.818" endtime="20241124 14:28:30.818"/>
</return>
<msg timestamp="20241124 14:28:30.819" level="INFO">${is_test_case_flow_sequences_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.815" endtime="20241124 14:28:30.819"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${test_case_run_response_message}</var>
<arg>testCaseRunId=${testCaseRun}[id]</arg>
<arg>status=STARTED</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:30.819" level="INFO">${test_case_run_response_message} = {'testCaseRunId': '39', 'status': 'STARTED'}</msg>
<status status="PASS" starttime="20241124 14:28:30.819" endtime="20241124 14:28:30.819"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${test_case_run_response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:30.820" level="INFO">${json_response} = {"testCaseRunId": "39", "status": "STARTED"}</msg>
<status status="PASS" starttime="20241124 14:28:30.820" endtime="20241124 14:28:30.820"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:30.827" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:30.827" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:30.820" endtime="20241124 14:28:30.828"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:30.828" endtime="20241124 14:28:30.830"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:30.830" endtime="20241124 14:28:30.830"/>
</return>
<status status="PASS" starttime="20241124 14:28:30.820" endtime="20241124 14:28:30.831"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_flow_sequences_exists">
<kw name="Create Dictionary" library="BuiltIn">
<var>${ACCUMULATION}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:30.832" level="INFO">${ACCUMULATION} = {}</msg>
<status status="PASS" starttime="20241124 14:28:30.831" endtime="20241124 14:28:30.832"/>
</kw>
<for flavor="IN">
<var>${testCaseFlowSequence}</var>
<value>@{testCase}[testCaseFlowSequences]</value>
<iter>
<var name="${testCaseFlowSequence}">{'id': '46', 'testCaseId': '27', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:35.233Z', 'updatedAt': '2024-11-24T06:57:13.419Z', 'flow': {'id': '14', 'name': 'Login', 'projectId': '4', '...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.833" level="INFO">${flow} = {'id': '14', 'name': 'Login', 'projectId': '4', 'createdAt': '2024-11-21T16:43:09.327Z', 'updatedAt': '2024-11-22T04:20:41.623Z', 'flowActionSequences': [{'id': '41', 'actionId': '28', 'flowId': '14',...</msg>
<status status="PASS" starttime="20241124 14:28:30.832" endtime="20241124 14:28:30.833"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:30.833" endtime="20241124 14:28:30.834"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:30.838" endtime="20241124 14:28:30.840"/>
</kw>
<msg timestamp="20241124 14:28:30.840" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.837" endtime="20241124 14:28:30.840"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.845" level="INFO">${values} = [{'id': '41', 'actionId': '28', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:09.645Z', 'updatedAt': '2024-11-22T04:20:41.468Z', 'action': {'id': '28', 'name': 'Launch browser', 'type': '...</msg>
<status status="PASS" starttime="20241124 14:28:30.842" endtime="20241124 14:28:30.845"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.847" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.846" endtime="20241124 14:28:30.847"/>
</kw>
<status status="PASS" starttime="20241124 14:28:30.846" endtime="20241124 14:28:30.847"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:30.847" endtime="20241124 14:28:30.847"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:30.847" endtime="20241124 14:28:30.847"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.845" endtime="20241124 14:28:30.847"/>
</if>
<status status="PASS" starttime="20241124 14:28:30.841" endtime="20241124 14:28:30.848"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.841" endtime="20241124 14:28:30.848"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:30.848" endtime="20241124 14:28:30.848"/>
</return>
<msg timestamp="20241124 14:28:30.848" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:30.836" endtime="20241124 14:28:30.848"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '41', 'actionId': '28', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:09.645Z', 'updatedAt': '2024-11-22T04:20:41.468Z', 'action': {'id': '28', 'name': 'Launch browser', 'type': 'L...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.850" level="INFO">${action} = {'id': '28', 'name': 'Launch browser', 'type': 'LAUNCH_BROWSER', 'xpath': '', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:38:00.836Z', 'updatedAt': '2024-11-21T16:38:00.836Z', 'inpu...</msg>
<status status="PASS" starttime="20241124 14:28:30.849" endtime="20241124 14:28:30.850"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:30.850" endtime="20241124 14:28:30.850"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:28:30.851" level="INFO">${input} = {'id': '25', 'actionId': '28', 'name': 'Login page', 'value': 'https://iassistant.ideas2it.com/login', 'waitAfterAction': '1', 'isDefault': True, 'createdAt': '2024-11-21T16:38:01.166Z', 'updatedAt': ...</msg>
<status status="PASS" starttime="20241124 14:28:30.850" endtime="20241124 14:28:30.851"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:30.852" endtime="20241124 14:28:30.852"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:30.852" endtime="20241124 14:28:30.852"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:30.851" endtime="20241124 14:28:30.853"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.851" endtime="20241124 14:28:30.853"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:30.854" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241124 14:28:30.854" endtime="20241124 14:28:30.854"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>${url}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241124 14:28:36.043" level="INFO">Successfully initialized new page object and opened url: https://iassistant.ideas2it.com/login</msg>
<msg timestamp="20241124 14:28:36.043" level="INFO">${page_id} = {'page_id': 'page=a89c2789-7c78-4b53-b811-e40c3332b4f3', 'video_path': ''}</msg>
<status status="PASS" starttime="20241124 14:28:30.856" endtime="20241124 14:28:36.043"/>
</kw>
<kw name="Switch Page" library="RPA.Browser.Playwright">
<arg>${page_id}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Switches the active browser page to another open page by ``id`` or ``NEW``.</doc>
<msg timestamp="20241124 14:28:36.044" level="INFO">Switching to page {'page_id': 'page=a89c2789-7c78-4b53-b811-e40c3332b4f3', 'video_path': ''},context CURRENT, browser CURRENT</msg>
<msg timestamp="20241124 14:28:36.065" level="INFO">[
  {
    "type": "chromium",
    "id": "browser=d7480e93-12ff-4ec6-8525-cc8e5c10cad9",
    "contexts": [
      {
        "type": "context",
        "id": "context=efa55693-5cda-4219-8f4d-660898bf90d1",
        "activePage": "page=a89c2789-7c78-4b53-b811-e40c3332b4f3",
        "pages": [
          {
            "type": "page",
            "title": "Google",
            "url": "https://www.google.com/",
            "id": "page=04b488e3-4bbe-4061-aae7-954d630f21dd",
            "timestamp": 1732438627.745
          },
          {
            "type": "page",
            "title": "iAssistant",
            "url": "https://iassistant.ideas2it.com/login",
            "id": "page=a89c2789-7c78-4b53-b811-e40c3332b4f3",
            "timestamp": 1732438710.916
          }
        ]
      }
    ],
    "activeContext": "context=efa55693-5cda-4219-8f4d-660898bf90d1",
    "activeBrowser": true
  }
]</msg>
<msg timestamp="20241124 14:28:36.070" level="INFO">Successfully changed active page</msg>
<status status="PASS" starttime="20241124 14:28:36.043" endtime="20241124 14:28:36.070"/>
</kw>
<status status="PASS" starttime="20241124 14:28:30.855" endtime="20241124 14:28:36.071"/>
</kw>
<status status="PASS" starttime="20241124 14:28:30.855" endtime="20241124 14:28:36.071"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:36.071" endtime="20241124 14:28:36.071"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.071" endtime="20241124 14:28:36.071"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.073" endtime="20241124 14:28:36.073"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.071" endtime="20241124 14:28:36.074"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.075" endtime="20241124 14:28:36.075"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.077" endtime="20241124 14:28:36.077"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.074" endtime="20241124 14:28:36.077"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.078" endtime="20241124 14:28:36.078"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.077" endtime="20241124 14:28:36.079"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.080" endtime="20241124 14:28:36.080"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.079" endtime="20241124 14:28:36.080"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.082" endtime="20241124 14:28:36.082"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.080" endtime="20241124 14:28:36.082"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.083" endtime="20241124 14:28:36.083"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.082" endtime="20241124 14:28:36.083"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.084" endtime="20241124 14:28:36.084"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.085" endtime="20241124 14:28:36.085"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.085" endtime="20241124 14:28:36.085"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.085" endtime="20241124 14:28:36.085"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.085" endtime="20241124 14:28:36.085"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:36.085" endtime="20241124 14:28:36.085"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:36.083" endtime="20241124 14:28:36.085"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:36.091" endtime="20241124 14:28:36.091"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.094" endtime="20241124 14:28:36.095"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.087" endtime="20241124 14:28:36.095"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.096" endtime="20241124 14:28:36.096"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.097" endtime="20241124 14:28:36.097"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.096" endtime="20241124 14:28:36.097"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.097" endtime="20241124 14:28:36.097"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.097" endtime="20241124 14:28:36.097"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:36.096" endtime="20241124 14:28:36.097"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:36.095" endtime="20241124 14:28:36.097"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:36.104" endtime="20241124 14:28:36.104"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.106" endtime="20241124 14:28:36.106"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.097" endtime="20241124 14:28:36.106"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.108" endtime="20241124 14:28:36.108"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.108" endtime="20241124 14:28:36.108"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.108" endtime="20241124 14:28:36.108"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.108" endtime="20241124 14:28:36.108"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.108" endtime="20241124 14:28:36.108"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:36.108" endtime="20241124 14:28:36.109"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:36.107" endtime="20241124 14:28:36.109"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.111" endtime="20241124 14:28:36.111"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.109" endtime="20241124 14:28:36.111"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:28:36.117" endtime="20241124 14:28:36.117"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:36.117" endtime="20241124 14:28:36.117"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:36.111" endtime="20241124 14:28:36.117"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.854" endtime="20241124 14:28:36.117"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:36.118" endtime="20241124 14:28:36.119"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:28:37.134" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241124 14:28:36.119" endtime="20241124 14:28:37.135"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:28:37.135" endtime="20241124 14:28:37.135"/>
</return>
<msg timestamp="20241124 14:28:37.136" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241124 14:28:30.853" endtime="20241124 14:28:37.136"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.137" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:41</msg>
<status status="PASS" starttime="20241124 14:28:37.137" endtime="20241124 14:28:37.137"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.138" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:28:37.138" endtime="20241124 14:28:37.138"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.139" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:28:37.138" endtime="20241124 14:28:37.139"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.139" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:37.139" endtime="20241124 14:28:37.139"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.140" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:37.140" endtime="20241124 14:28:37.140"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.140" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:28:37.140" endtime="20241124 14:28:37.140"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.141" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:28:37.141" endtime="20241124 14:28:37.141"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.142" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:28:37.141" endtime="20241124 14:28:37.142"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:37.142" endtime="20241124 14:28:37.143"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:37.146" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:28:37.145" endtime="20241124 14:28:37.146"/>
</kw>
<msg timestamp="20241124 14:28:37.146" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:37.145" endtime="20241124 14:28:37.147"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.148" endtime="20241124 14:28:37.148"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.149" endtime="20241124 14:28:37.149"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.148" endtime="20241124 14:28:37.149"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.150" endtime="20241124 14:28:37.150"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.149" endtime="20241124 14:28:37.150"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.148" endtime="20241124 14:28:37.150"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.147" endtime="20241124 14:28:37.150"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.147" endtime="20241124 14:28:37.150"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:37.151" endtime="20241124 14:28:37.151"/>
</return>
<msg timestamp="20241124 14:28:37.151" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:37.144" endtime="20241124 14:28:37.151"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:37.154" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:46::flowActionSequenceId:42'.</msg>
<status status="FAIL" starttime="20241124 14:28:37.154" endtime="20241124 14:28:37.154"/>
</kw>
<msg timestamp="20241124 14:28:37.155" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:37.153" endtime="20241124 14:28:37.155"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.155" endtime="20241124 14:28:37.155"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.156" endtime="20241124 14:28:37.156"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.156" endtime="20241124 14:28:37.156"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.156" endtime="20241124 14:28:37.156"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.156" endtime="20241124 14:28:37.156"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.156" endtime="20241124 14:28:37.157"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.155" endtime="20241124 14:28:37.157"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.155" endtime="20241124 14:28:37.157"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:37.157" endtime="20241124 14:28:37.157"/>
</return>
<msg timestamp="20241124 14:28:37.158" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:37.153" endtime="20241124 14:28:37.158"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:37.159" endtime="20241124 14:28:37.159"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.159" endtime="20241124 14:28:37.159"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.159" endtime="20241124 14:28:37.159"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.160" endtime="20241124 14:28:37.161"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:37.161" endtime="20241124 14:28:37.161"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.160" endtime="20241124 14:28:37.161"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.161" endtime="20241124 14:28:37.162"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:37.162" endtime="20241124 14:28:37.162"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.161" endtime="20241124 14:28:37.162"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.160" endtime="20241124 14:28:37.163"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.160" endtime="20241124 14:28:37.193"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.160" endtime="20241124 14:28:37.194"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.195" endtime="20241124 14:28:37.196"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:37.196" endtime="20241124 14:28:37.196"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.195" endtime="20241124 14:28:37.197"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.197" endtime="20241124 14:28:37.198"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:37.198" endtime="20241124 14:28:37.198"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.197" endtime="20241124 14:28:37.198"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.195" endtime="20241124 14:28:37.198"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.194" endtime="20241124 14:28:37.202"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.194" endtime="20241124 14:28:37.202"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.159" endtime="20241124 14:28:37.202"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.158" endtime="20241124 14:28:37.202"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:37.203" endtime="20241124 14:28:37.203"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.203" endtime="20241124 14:28:37.203"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.203" endtime="20241124 14:28:37.203"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.205" endtime="20241124 14:28:37.205"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.203" endtime="20241124 14:28:37.205"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.203" endtime="20241124 14:28:37.212"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.213" endtime="20241124 14:28:37.218"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.219" endtime="20241124 14:28:37.219"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:37.219" endtime="20241124 14:28:37.219"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.219" endtime="20241124 14:28:37.220"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.220" endtime="20241124 14:28:37.220"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:37.220" endtime="20241124 14:28:37.221"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.220" endtime="20241124 14:28:37.221"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.218" endtime="20241124 14:28:37.221"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.213" endtime="20241124 14:28:37.221"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.213" endtime="20241124 14:28:37.221"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.203" endtime="20241124 14:28:37.221"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.202" endtime="20241124 14:28:37.221"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.137" endtime="20241124 14:28:37.222"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.223" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:28:37.222" endtime="20241124 14:28:37.223"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.224" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:37.223" endtime="20241124 14:28:37.224"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.225" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:37.224" endtime="20241124 14:28:37.225"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.226" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:37.225" endtime="20241124 14:28:37.226"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.227" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.226" endtime="20241124 14:28:37.227"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.239" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:37.238" endtime="20241124 14:28:37.239"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.240" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:28:37.239" endtime="20241124 14:28:37.240"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:37.240" endtime="20241124 14:28:37.241"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:37.248" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:28:37.246" endtime="20241124 14:28:37.248"/>
</kw>
<msg timestamp="20241124 14:28:37.249" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:37.246" endtime="20241124 14:28:37.249"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.250" endtime="20241124 14:28:37.250"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.251" endtime="20241124 14:28:37.251"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.251" endtime="20241124 14:28:37.252"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.252" endtime="20241124 14:28:37.253"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.252" endtime="20241124 14:28:37.253"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.250" endtime="20241124 14:28:37.253"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.249" endtime="20241124 14:28:37.253"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.249" endtime="20241124 14:28:37.253"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:37.253" endtime="20241124 14:28:37.253"/>
</return>
<msg timestamp="20241124 14:28:37.254" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:37.243" endtime="20241124 14:28:37.254"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:37.272" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:28:37.266" endtime="20241124 14:28:37.272"/>
</kw>
<msg timestamp="20241124 14:28:37.272" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:37.266" endtime="20241124 14:28:37.272"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.273" endtime="20241124 14:28:37.273"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.274" endtime="20241124 14:28:37.274"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.274" endtime="20241124 14:28:37.274"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.274" endtime="20241124 14:28:37.275"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.274" endtime="20241124 14:28:37.275"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.274" endtime="20241124 14:28:37.275"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.273" endtime="20241124 14:28:37.275"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.273" endtime="20241124 14:28:37.275"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:37.275" endtime="20241124 14:28:37.275"/>
</return>
<msg timestamp="20241124 14:28:37.276" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:37.264" endtime="20241124 14:28:37.276"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:37.277" endtime="20241124 14:28:37.277"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.277" endtime="20241124 14:28:37.277"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.276" endtime="20241124 14:28:37.277"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.278" endtime="20241124 14:28:37.278"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:37.278" endtime="20241124 14:28:37.278"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.277" endtime="20241124 14:28:37.278"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.278" endtime="20241124 14:28:37.279"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:37.279" endtime="20241124 14:28:37.279"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.278" endtime="20241124 14:28:37.279"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.277" endtime="20241124 14:28:37.279"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.277" endtime="20241124 14:28:37.279"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.277" endtime="20241124 14:28:37.279"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.280" endtime="20241124 14:28:37.281"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:37.281" endtime="20241124 14:28:37.281"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.280" endtime="20241124 14:28:37.281"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.281" endtime="20241124 14:28:37.282"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:37.282" endtime="20241124 14:28:37.282"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.281" endtime="20241124 14:28:37.282"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.280" endtime="20241124 14:28:37.282"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.280" endtime="20241124 14:28:37.282"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.280" endtime="20241124 14:28:37.282"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.276" endtime="20241124 14:28:37.282"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.276" endtime="20241124 14:28:37.282"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:37.283" endtime="20241124 14:28:37.283"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.283" endtime="20241124 14:28:37.283"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.283" endtime="20241124 14:28:37.283"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.285" endtime="20241124 14:28:37.286"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.284" endtime="20241124 14:28:37.286"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.283" endtime="20241124 14:28:37.286"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.287" endtime="20241124 14:28:37.287"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.287" endtime="20241124 14:28:37.287"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:37.287" endtime="20241124 14:28:37.287"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.287" endtime="20241124 14:28:37.287"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.288" endtime="20241124 14:28:37.288"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:37.288" endtime="20241124 14:28:37.288"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.288" endtime="20241124 14:28:37.288"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.287" endtime="20241124 14:28:37.288"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.286" endtime="20241124 14:28:37.288"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.286" endtime="20241124 14:28:37.288"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.283" endtime="20241124 14:28:37.288"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.282" endtime="20241124 14:28:37.288"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.222" endtime="20241124 14:28:37.289"/>
</iter>
<status status="PASS" starttime="20241124 14:28:37.137" endtime="20241124 14:28:37.289"/>
</for>
<msg timestamp="20241124 14:28:37.289" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:28:37.136" endtime="20241124 14:28:37.289"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:37.289" endtime="20241124 14:28:37.290"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:37.294" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '292', 'status': 'COMPLETED', 'actionName': 'Launch browser', 'actionType': 'LAUNCH_BROWSER', 'actionXpath': '', 'inputValue': 'https://iassistant.ideas2it.com/login', ...</msg>
<status status="PASS" starttime="20241124 14:28:37.293" endtime="20241124 14:28:37.295"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:37.296" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "292", "status": "COMPLETED", "actionName": "Launch browser", "actionType": "LAUNCH_BROWSER", "actionXpath": "", "inputValue": "https://iassistant.ideas2it.com/login", ...</msg>
<status status="PASS" starttime="20241124 14:28:37.296" endtime="20241124 14:28:37.296"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:37.360" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:37.361" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:37.297" endtime="20241124 14:28:37.361"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:37.362" endtime="20241124 14:28:37.364"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:37.369" endtime="20241124 14:28:37.370"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.295" endtime="20241124 14:28:37.376"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.290" endtime="20241124 14:28:37.377"/>
</kw>
<status status="PASS" starttime="20241124 14:28:30.849" endtime="20241124 14:28:37.378"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.378" endtime="20241124 14:28:37.378"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:28:37.378" endtime="20241124 14:28:37.378"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.379" endtime="20241124 14:28:37.380"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.378" endtime="20241124 14:28:37.381"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.849" endtime="20241124 14:28:37.381"/>
</try>
<status status="PASS" starttime="20241124 14:28:30.849" endtime="20241124 14:28:37.382"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '43', 'actionId': '30', 'flowId': '14', 'order': 1, 'createdAt': '2024-11-21T16:43:09.646Z', 'updatedAt': '2024-11-22T04:20:41.490Z', 'action': {'id': '30', 'name': 'Set login password', 'type'...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.389" level="INFO">${action} = {'id': '30', 'name': 'Set login password', 'type': 'TYPE_TEXT', 'xpath': '//input[@id="password"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:39:54.768Z', 'updatedAt': '2024-11-21...</msg>
<status status="PASS" starttime="20241124 14:28:37.387" endtime="20241124 14:28:37.389"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:37.389" endtime="20241124 14:28:37.390"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:28:37.391" level="INFO">${input} = {'id': '27', 'actionId': '30', 'name': 'Bharani', 'value': 'vijaybharani', 'waitAfterAction': '1', 'isDefault': True, 'createdAt': '2024-11-21T16:39:55.091Z', 'updatedAt': '2024-11-21T17:23:21.466Z'}</msg>
<status status="PASS" starttime="20241124 14:28:37.390" endtime="20241124 14:28:37.391"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.391" endtime="20241124 14:28:37.391"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.392" endtime="20241124 14:28:37.392"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.391" endtime="20241124 14:28:37.392"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.391" endtime="20241124 14:28:37.392"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:37.393" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:28:37.393" endtime="20241124 14:28:37.393"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:37.393" endtime="20241124 14:28:37.394"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.393" endtime="20241124 14:28:37.394"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:37.394" endtime="20241124 14:28:37.394"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.394" endtime="20241124 14:28:37.394"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.399" endtime="20241124 14:28:37.399"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.394" endtime="20241124 14:28:37.399"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.406" endtime="20241124 14:28:37.407"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.410" endtime="20241124 14:28:37.410"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.399" endtime="20241124 14:28:37.410"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.412" endtime="20241124 14:28:37.412"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.411" endtime="20241124 14:28:37.412"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.415" endtime="20241124 14:28:37.415"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.412" endtime="20241124 14:28:37.415"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="password"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:37.460" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:28:37.429" endtime="20241124 14:28:37.460"/>
</kw>
<msg timestamp="20241124 14:28:37.461" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.428" endtime="20241124 14:28:37.461"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.461" endtime="20241124 14:28:37.461"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.428" endtime="20241124 14:28:37.461"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.462" endtime="20241124 14:28:37.462"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.462" endtime="20241124 14:28:37.463"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.461" endtime="20241124 14:28:37.463"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.428" endtime="20241124 14:28:37.463"/>
</try>
<msg timestamp="20241124 14:28:37.463" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.427" endtime="20241124 14:28:37.463"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.463" endtime="20241124 14:28:37.464"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.426" endtime="20241124 14:28:37.464"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:37.464" endtime="20241124 14:28:37.464"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.464" endtime="20241124 14:28:37.464"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.426" endtime="20241124 14:28:37.464"/>
</try>
<msg timestamp="20241124 14:28:37.465" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.426" endtime="20241124 14:28:37.465"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.470" endtime="20241124 14:28:37.470"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.470" endtime="20241124 14:28:37.470"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.470" endtime="20241124 14:28:37.470"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.469" endtime="20241124 14:28:37.471"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.466" endtime="20241124 14:28:37.471"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.425" endtime="20241124 14:28:37.471"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:37.488" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:28:37.479" endtime="20241124 14:28:37.488"/>
</kw>
<msg timestamp="20241124 14:28:37.489" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.479" endtime="20241124 14:28:37.489"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.489" endtime="20241124 14:28:37.489"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.479" endtime="20241124 14:28:37.489"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.489" endtime="20241124 14:28:37.489"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.490" endtime="20241124 14:28:37.490"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.489" endtime="20241124 14:28:37.490"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.479" endtime="20241124 14:28:37.490"/>
</try>
<msg timestamp="20241124 14:28:37.490" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.478" endtime="20241124 14:28:37.490"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.490" endtime="20241124 14:28:37.490"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.477" endtime="20241124 14:28:37.490"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:37.491" endtime="20241124 14:28:37.491"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.490" endtime="20241124 14:28:37.491"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.477" endtime="20241124 14:28:37.491"/>
</try>
<msg timestamp="20241124 14:28:37.491" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.477" endtime="20241124 14:28:37.491"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.493" endtime="20241124 14:28:37.493"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.494" endtime="20241124 14:28:37.494"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.493" endtime="20241124 14:28:37.494"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.493" endtime="20241124 14:28:37.494"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.492" endtime="20241124 14:28:37.494"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.476" endtime="20241124 14:28:37.494"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:28:37.514" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:28:37.514" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:28:37.494" endtime="20241124 14:28:37.514"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:28:37.514" endtime="20241124 14:28:37.515"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.494" endtime="20241124 14:28:37.515"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.515" endtime="20241124 14:28:37.515"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.515" endtime="20241124 14:28:37.515"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.515" endtime="20241124 14:28:37.516"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.494" endtime="20241124 14:28:37.516"/>
</try>
<msg timestamp="20241124 14:28:37.516" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:28:37.474" endtime="20241124 14:28:37.516"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.520" endtime="20241124 14:28:37.520"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.521" endtime="20241124 14:28:37.521"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.520" endtime="20241124 14:28:37.521"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.520" endtime="20241124 14:28:37.521"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.519" endtime="20241124 14:28:37.521"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.473" endtime="20241124 14:28:37.521"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.521" endtime="20241124 14:28:37.521"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.521" endtime="20241124 14:28:37.521"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.473" endtime="20241124 14:28:37.522"/>
</try>
<status status="PASS" starttime="20241124 14:28:37.473" endtime="20241124 14:28:37.522"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:37.532" level="INFO">Waited for Element with selector //input[@id="password"] at state visible</msg>
<status status="PASS" starttime="20241124 14:28:37.526" endtime="20241124 14:28:37.532"/>
</kw>
<msg timestamp="20241124 14:28:37.532" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.526" endtime="20241124 14:28:37.532"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.532" endtime="20241124 14:28:37.532"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.526" endtime="20241124 14:28:37.533"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.533" endtime="20241124 14:28:37.533"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.534" endtime="20241124 14:28:37.535"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.533" endtime="20241124 14:28:37.535"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.526" endtime="20241124 14:28:37.535"/>
</try>
<msg timestamp="20241124 14:28:37.535" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.525" endtime="20241124 14:28:37.535"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.535" endtime="20241124 14:28:37.536"/>
</return>
<msg timestamp="20241124 14:28:37.536" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.524" endtime="20241124 14:28:37.536"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.538" endtime="20241124 14:28:37.538"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.538" endtime="20241124 14:28:37.539"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.538" endtime="20241124 14:28:37.539"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.538" endtime="20241124 14:28:37.539"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.537" endtime="20241124 14:28:37.539"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.523" endtime="20241124 14:28:37.539"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.422" endtime="20241124 14:28:37.539"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:37.565" level="INFO">Waited for Element with selector //input[@id="password"] at state editable</msg>
<status status="PASS" starttime="20241124 14:28:37.544" endtime="20241124 14:28:37.565"/>
</kw>
<msg timestamp="20241124 14:28:37.567" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.544" endtime="20241124 14:28:37.567"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.567" endtime="20241124 14:28:37.568"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.544" endtime="20241124 14:28:37.569"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.570" endtime="20241124 14:28:37.570"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.570" endtime="20241124 14:28:37.570"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.569" endtime="20241124 14:28:37.570"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.544" endtime="20241124 14:28:37.571"/>
</try>
<msg timestamp="20241124 14:28:37.571" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.543" endtime="20241124 14:28:37.571"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.571" endtime="20241124 14:28:37.572"/>
</return>
<msg timestamp="20241124 14:28:37.572" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.542" endtime="20241124 14:28:37.572"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.575" endtime="20241124 14:28:37.575"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.575" endtime="20241124 14:28:37.575"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.575" endtime="20241124 14:28:37.575"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.574" endtime="20241124 14:28:37.575"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.573" endtime="20241124 14:28:37.576"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.541" endtime="20241124 14:28:37.576"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:37.576" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:28:37.576" endtime="20241124 14:28:37.576"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="password"]: string</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.578" endtime="20241124 14:28:37.579"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.580" endtime="20241124 14:28:37.580"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.578" endtime="20241124 14:28:37.580"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:37.580" endtime="20241124 14:28:37.585"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.580" endtime="20241124 14:28:37.586"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.578" endtime="20241124 14:28:37.586"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241124 14:28:37.587" level="INFO">Fills the text 'vijaybharani' in the given field.</msg>
<status status="PASS" starttime="20241124 14:28:37.586" endtime="20241124 14:28:37.623"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.586" endtime="20241124 14:28:37.623"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.624" endtime="20241124 14:28:37.624"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.624" endtime="20241124 14:28:37.624"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.623" endtime="20241124 14:28:37.624"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.586" endtime="20241124 14:28:37.624"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="password"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:37.637" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:28:37.631" endtime="20241124 14:28:37.637"/>
</kw>
<msg timestamp="20241124 14:28:37.638" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.631" endtime="20241124 14:28:37.638"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.638" endtime="20241124 14:28:37.638"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.630" endtime="20241124 14:28:37.638"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.638" endtime="20241124 14:28:37.638"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.639" endtime="20241124 14:28:37.639"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.638" endtime="20241124 14:28:37.639"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.630" endtime="20241124 14:28:37.639"/>
</try>
<msg timestamp="20241124 14:28:37.639" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.630" endtime="20241124 14:28:37.639"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.639" endtime="20241124 14:28:37.639"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.629" endtime="20241124 14:28:37.639"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:37.639" endtime="20241124 14:28:37.639"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.639" endtime="20241124 14:28:37.640"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.629" endtime="20241124 14:28:37.640"/>
</try>
<msg timestamp="20241124 14:28:37.640" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.628" endtime="20241124 14:28:37.640"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.642" endtime="20241124 14:28:37.642"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.643" endtime="20241124 14:28:37.643"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.642" endtime="20241124 14:28:37.643"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.642" endtime="20241124 14:28:37.643"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.641" endtime="20241124 14:28:37.643"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.627" endtime="20241124 14:28:37.643"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:37.658" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:28:37.653" endtime="20241124 14:28:37.658"/>
</kw>
<msg timestamp="20241124 14:28:37.658" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.653" endtime="20241124 14:28:37.658"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.658" endtime="20241124 14:28:37.658"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.652" endtime="20241124 14:28:37.658"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.659" endtime="20241124 14:28:37.659"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.659" endtime="20241124 14:28:37.659"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.658" endtime="20241124 14:28:37.659"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.652" endtime="20241124 14:28:37.659"/>
</try>
<msg timestamp="20241124 14:28:37.659" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.652" endtime="20241124 14:28:37.659"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.659" endtime="20241124 14:28:37.660"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.650" endtime="20241124 14:28:37.660"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:37.660" endtime="20241124 14:28:37.660"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.660" endtime="20241124 14:28:37.660"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.650" endtime="20241124 14:28:37.660"/>
</try>
<msg timestamp="20241124 14:28:37.660" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.650" endtime="20241124 14:28:37.660"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.663" endtime="20241124 14:28:37.663"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.663" endtime="20241124 14:28:37.663"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.663" endtime="20241124 14:28:37.663"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.663" endtime="20241124 14:28:37.663"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.662" endtime="20241124 14:28:37.664"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.649" endtime="20241124 14:28:37.664"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:28:37.669" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:28:37.669" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:28:37.664" endtime="20241124 14:28:37.669"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.669"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.664" endtime="20241124 14:28:37.669"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.669"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.669"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.669"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.664" endtime="20241124 14:28:37.669"/>
</try>
<msg timestamp="20241124 14:28:37.669" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:28:37.647" endtime="20241124 14:28:37.669"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.669"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.669"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.669"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.669"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.669"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.646" endtime="20241124 14:28:37.669"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.669"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.669"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.645" endtime="20241124 14:28:37.669"/>
</try>
<status status="PASS" starttime="20241124 14:28:37.645" endtime="20241124 14:28:37.669"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:37.690" level="INFO">Waited for Element with selector //input[@id="password"] at state visible</msg>
<status status="PASS" starttime="20241124 14:28:37.685" endtime="20241124 14:28:37.690"/>
</kw>
<msg timestamp="20241124 14:28:37.690" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.684" endtime="20241124 14:28:37.690"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.690" endtime="20241124 14:28:37.690"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.684" endtime="20241124 14:28:37.690"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.691" endtime="20241124 14:28:37.691"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.691" endtime="20241124 14:28:37.691"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.690" endtime="20241124 14:28:37.691"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.684" endtime="20241124 14:28:37.691"/>
</try>
<msg timestamp="20241124 14:28:37.691" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.683" endtime="20241124 14:28:37.691"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.692" endtime="20241124 14:28:37.692"/>
</return>
<msg timestamp="20241124 14:28:37.692" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.692"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.694" endtime="20241124 14:28:37.694"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.695" endtime="20241124 14:28:37.695"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.694" endtime="20241124 14:28:37.695"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.694" endtime="20241124 14:28:37.695"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.693" endtime="20241124 14:28:37.695"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.669" endtime="20241124 14:28:37.695"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.626" endtime="20241124 14:28:37.695"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:37.709" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:28:37.703" endtime="20241124 14:28:37.709"/>
</kw>
<msg timestamp="20241124 14:28:37.709" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.703" endtime="20241124 14:28:37.709"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.709" endtime="20241124 14:28:37.709"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.702" endtime="20241124 14:28:37.709"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.710" endtime="20241124 14:28:37.710"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.710" endtime="20241124 14:28:37.710"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.709" endtime="20241124 14:28:37.710"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.702" endtime="20241124 14:28:37.710"/>
</try>
<msg timestamp="20241124 14:28:37.710" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.701" endtime="20241124 14:28:37.710"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.710" endtime="20241124 14:28:37.711"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.700" endtime="20241124 14:28:37.711"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:37.711" endtime="20241124 14:28:37.711"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:37.711" endtime="20241124 14:28:37.711"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.700" endtime="20241124 14:28:37.711"/>
</try>
<msg timestamp="20241124 14:28:37.711" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.699" endtime="20241124 14:28:37.711"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.714" endtime="20241124 14:28:37.714"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.714" endtime="20241124 14:28:37.714"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.713" endtime="20241124 14:28:37.714"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.713" endtime="20241124 14:28:37.714"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.712" endtime="20241124 14:28:37.714"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.699" endtime="20241124 14:28:37.714"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:28:37.723" level="INFO">Property: 'vijaybharani'</msg>
<msg timestamp="20241124 14:28:37.723" level="INFO">${property} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:28:37.715" endtime="20241124 14:28:37.723"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:28:37.723" endtime="20241124 14:28:37.723"/>
</return>
<status status="PASS" starttime="20241124 14:28:37.714" endtime="20241124 14:28:37.723"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.723" endtime="20241124 14:28:37.723"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.723" endtime="20241124 14:28:37.723"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.723" endtime="20241124 14:28:37.723"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.714" endtime="20241124 14:28:37.723"/>
</try>
<msg timestamp="20241124 14:28:37.723" level="INFO">${fieldTextValue} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:28:37.696" endtime="20241124 14:28:37.723"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241124 14:28:37.723" endtime="20241124 14:28:37.723"/>
</return>
<msg timestamp="20241124 14:28:37.723" level="INFO">${populated_value} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:28:37.625" endtime="20241124 14:28:37.723"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241124 14:28:37.735" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.723" endtime="20241124 14:28:37.735"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:37.735" endtime="20241124 14:28:37.735"/>
</return>
<msg timestamp="20241124 14:28:37.735" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241124 14:28:37.723" endtime="20241124 14:28:37.735"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.739" endtime="20241124 14:28:37.739"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.740" endtime="20241124 14:28:37.740"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.739" endtime="20241124 14:28:37.740"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.739" endtime="20241124 14:28:37.740"/>
</if>
<status status="PASS" starttime="20241124 14:28:37.738" endtime="20241124 14:28:37.740"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.625" endtime="20241124 14:28:37.740"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.578" endtime="20241124 14:28:37.740"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.576" endtime="20241124 14:28:37.740"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.576" endtime="20241124 14:28:37.740"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.741" endtime="20241124 14:28:37.741"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.741" endtime="20241124 14:28:37.741"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.576" endtime="20241124 14:28:37.741"/>
</try>
<status status="PASS" starttime="20241124 14:28:37.422" endtime="20241124 14:28:37.741"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.416" endtime="20241124 14:28:37.741"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.742" endtime="20241124 14:28:37.742"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.741" endtime="20241124 14:28:37.743"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.744" endtime="20241124 14:28:37.744"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.744" endtime="20241124 14:28:37.744"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.744" endtime="20241124 14:28:37.744"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.745" endtime="20241124 14:28:37.745"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.744" endtime="20241124 14:28:37.745"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.744" endtime="20241124 14:28:37.745"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.743" endtime="20241124 14:28:37.745"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:37.751" endtime="20241124 14:28:37.751"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.754" endtime="20241124 14:28:37.754"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.745" endtime="20241124 14:28:37.755"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.756" endtime="20241124 14:28:37.756"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.756" endtime="20241124 14:28:37.757"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.756" endtime="20241124 14:28:37.757"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.757" endtime="20241124 14:28:37.757"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.757" endtime="20241124 14:28:37.757"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.756" endtime="20241124 14:28:37.757"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.755" endtime="20241124 14:28:37.757"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:37.763" endtime="20241124 14:28:37.763"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.766" endtime="20241124 14:28:37.766"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.757" endtime="20241124 14:28:37.766"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.767" endtime="20241124 14:28:37.768"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.768" endtime="20241124 14:28:37.768"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.768" endtime="20241124 14:28:37.768"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.768" endtime="20241124 14:28:37.768"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.768" endtime="20241124 14:28:37.769"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:37.768" endtime="20241124 14:28:37.769"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:37.767" endtime="20241124 14:28:37.769"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.771" endtime="20241124 14:28:37.771"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.769" endtime="20241124 14:28:37.771"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:28:37.778" endtime="20241124 14:28:37.778"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:37.778" endtime="20241124 14:28:37.778"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:37.771" endtime="20241124 14:28:37.778"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.393" endtime="20241124 14:28:37.778"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:37.778" endtime="20241124 14:28:37.779"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:28:38.783" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241124 14:28:37.779" endtime="20241124 14:28:38.783"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:28:38.784" endtime="20241124 14:28:38.785"/>
</return>
<msg timestamp="20241124 14:28:38.786" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:28:37.392" endtime="20241124 14:28:38.786"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.791" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:43</msg>
<status status="PASS" starttime="20241124 14:28:38.790" endtime="20241124 14:28:38.791"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.794" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:28:38.793" endtime="20241124 14:28:38.794"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.796" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:28:38.795" endtime="20241124 14:28:38.796"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.797" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:38.796" endtime="20241124 14:28:38.798"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.801" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:38.798" endtime="20241124 14:28:38.801"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.802" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:28:38.801" endtime="20241124 14:28:38.802"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.803" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:28:38.802" endtime="20241124 14:28:38.803"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.804" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:28:38.803" endtime="20241124 14:28:38.804"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:38.805" endtime="20241124 14:28:38.806"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:38.812" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:28:38.810" endtime="20241124 14:28:38.812"/>
</kw>
<msg timestamp="20241124 14:28:38.812" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:38.810" endtime="20241124 14:28:38.812"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.813" endtime="20241124 14:28:38.814"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.814" endtime="20241124 14:28:38.815"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.814" endtime="20241124 14:28:38.815"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.817" endtime="20241124 14:28:38.817"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.816" endtime="20241124 14:28:38.817"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.814" endtime="20241124 14:28:38.817"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.813" endtime="20241124 14:28:38.817"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.813" endtime="20241124 14:28:38.818"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:38.818" endtime="20241124 14:28:38.818"/>
</return>
<msg timestamp="20241124 14:28:38.819" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:38.808" endtime="20241124 14:28:38.819"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:38.825" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:46::flowActionSequenceId:42'.</msg>
<status status="FAIL" starttime="20241124 14:28:38.824" endtime="20241124 14:28:38.825"/>
</kw>
<msg timestamp="20241124 14:28:38.826" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:38.823" endtime="20241124 14:28:38.826"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.827" endtime="20241124 14:28:38.827"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.828" endtime="20241124 14:28:38.828"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.828" endtime="20241124 14:28:38.828"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.828" endtime="20241124 14:28:38.828"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.828" endtime="20241124 14:28:38.829"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.827" endtime="20241124 14:28:38.829"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.827" endtime="20241124 14:28:38.829"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.826" endtime="20241124 14:28:38.829"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:38.829" endtime="20241124 14:28:38.830"/>
</return>
<msg timestamp="20241124 14:28:38.831" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:38.822" endtime="20241124 14:28:38.831"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:38.832" endtime="20241124 14:28:38.832"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.832" endtime="20241124 14:28:38.832"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.832" endtime="20241124 14:28:38.832"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.833" endtime="20241124 14:28:38.833"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:38.833" endtime="20241124 14:28:38.834"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.833" endtime="20241124 14:28:38.834"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.835" endtime="20241124 14:28:38.835"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:38.835" endtime="20241124 14:28:38.835"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.834" endtime="20241124 14:28:38.835"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.833" endtime="20241124 14:28:38.835"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.833" endtime="20241124 14:28:38.835"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.832" endtime="20241124 14:28:38.836"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.836" endtime="20241124 14:28:38.836"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:38.836" endtime="20241124 14:28:38.837"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.836" endtime="20241124 14:28:38.837"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.837" endtime="20241124 14:28:38.837"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:38.837" endtime="20241124 14:28:38.837"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.837" endtime="20241124 14:28:38.837"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.836" endtime="20241124 14:28:38.838"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.836" endtime="20241124 14:28:38.838"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.836" endtime="20241124 14:28:38.838"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.831" endtime="20241124 14:28:38.838"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.831" endtime="20241124 14:28:38.838"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:38.839" endtime="20241124 14:28:38.839"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.839" endtime="20241124 14:28:38.839"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.839" endtime="20241124 14:28:38.839"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.840" endtime="20241124 14:28:38.840"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.839" endtime="20241124 14:28:38.840"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.839" endtime="20241124 14:28:38.840"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.840" endtime="20241124 14:28:38.841"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.841" endtime="20241124 14:28:38.841"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:38.841" endtime="20241124 14:28:38.841"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.841" endtime="20241124 14:28:38.841"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.842" endtime="20241124 14:28:38.842"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:38.842" endtime="20241124 14:28:38.842"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.842" endtime="20241124 14:28:38.842"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.841" endtime="20241124 14:28:38.842"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.840" endtime="20241124 14:28:38.842"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.840" endtime="20241124 14:28:38.842"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.839" endtime="20241124 14:28:38.842"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.838" endtime="20241124 14:28:38.843"/>
</if>
<status status="PASS" starttime="20241124 14:28:38.792" endtime="20241124 14:28:38.843"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.843" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:28:38.843" endtime="20241124 14:28:38.843"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.844" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:38.844" endtime="20241124 14:28:38.844"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.845" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:38.844" endtime="20241124 14:28:38.845"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.845" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:38.845" endtime="20241124 14:28:38.845"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.846" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.845" endtime="20241124 14:28:38.846"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.846" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:38.846" endtime="20241124 14:28:38.846"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.847" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:28:38.846" endtime="20241124 14:28:38.847"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:38.847" endtime="20241124 14:28:38.848"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:38.850" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:28:38.850" endtime="20241124 14:28:38.850"/>
</kw>
<msg timestamp="20241124 14:28:38.851" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:38.849" endtime="20241124 14:28:38.851"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.851" endtime="20241124 14:28:38.851"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.852" endtime="20241124 14:28:38.852"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.851" endtime="20241124 14:28:38.852"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.852" endtime="20241124 14:28:38.852"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.852" endtime="20241124 14:28:38.852"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.851" endtime="20241124 14:28:38.852"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.851" endtime="20241124 14:28:38.852"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.851" endtime="20241124 14:28:38.852"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:38.852" endtime="20241124 14:28:38.852"/>
</return>
<msg timestamp="20241124 14:28:38.853" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:38.849" endtime="20241124 14:28:38.853"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:38.855" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:28:38.855" endtime="20241124 14:28:38.855"/>
</kw>
<msg timestamp="20241124 14:28:38.855" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:38.854" endtime="20241124 14:28:38.855"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.856" endtime="20241124 14:28:38.856"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.856" endtime="20241124 14:28:38.856"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.856" endtime="20241124 14:28:38.856"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.857" endtime="20241124 14:28:38.857"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.856" endtime="20241124 14:28:38.857"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.856" endtime="20241124 14:28:38.857"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.856" endtime="20241124 14:28:38.857"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.856" endtime="20241124 14:28:38.857"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:38.857" endtime="20241124 14:28:38.857"/>
</return>
<msg timestamp="20241124 14:28:38.857" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:38.854" endtime="20241124 14:28:38.857"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:38.858" endtime="20241124 14:28:38.858"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.858" endtime="20241124 14:28:38.858"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.858" endtime="20241124 14:28:38.858"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.858" endtime="20241124 14:28:38.858"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:38.859" endtime="20241124 14:28:38.859"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.858" endtime="20241124 14:28:38.859"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.859" endtime="20241124 14:28:38.859"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:38.859" endtime="20241124 14:28:38.859"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.859" endtime="20241124 14:28:38.859"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.858" endtime="20241124 14:28:38.859"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.858" endtime="20241124 14:28:38.859"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.858" endtime="20241124 14:28:38.859"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.860" endtime="20241124 14:28:38.860"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:38.860" endtime="20241124 14:28:38.860"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.860" endtime="20241124 14:28:38.860"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.861" endtime="20241124 14:28:38.861"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:38.861" endtime="20241124 14:28:38.861"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.860" endtime="20241124 14:28:38.861"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.860" endtime="20241124 14:28:38.861"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.859" endtime="20241124 14:28:38.861"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.859" endtime="20241124 14:28:38.861"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.858" endtime="20241124 14:28:38.861"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.857" endtime="20241124 14:28:38.861"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:38.862" endtime="20241124 14:28:38.862"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.862" endtime="20241124 14:28:38.862"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.862" endtime="20241124 14:28:38.862"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.863" endtime="20241124 14:28:38.863"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.862" endtime="20241124 14:28:38.863"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.862" endtime="20241124 14:28:38.863"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.863" endtime="20241124 14:28:38.863"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.863" endtime="20241124 14:28:38.863"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:38.863" endtime="20241124 14:28:38.863"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.863" endtime="20241124 14:28:38.863"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.864" endtime="20241124 14:28:38.864"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:38.864" endtime="20241124 14:28:38.864"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.863" endtime="20241124 14:28:38.864"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.863" endtime="20241124 14:28:38.864"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.863" endtime="20241124 14:28:38.864"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:38.863" endtime="20241124 14:28:38.864"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:38.861" endtime="20241124 14:28:38.864"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.861" endtime="20241124 14:28:38.864"/>
</if>
<status status="PASS" starttime="20241124 14:28:38.843" endtime="20241124 14:28:38.864"/>
</iter>
<status status="PASS" starttime="20241124 14:28:38.791" endtime="20241124 14:28:38.864"/>
</for>
<msg timestamp="20241124 14:28:38.864" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:28:38.787" endtime="20241124 14:28:38.864"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:38.865" endtime="20241124 14:28:38.865"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:38.867" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '293', 'status': 'COMPLETED', 'actionName': 'Set login password', 'actionType': 'TYPE_TEXT', 'actionXpath': '//input[@id="password"]', 'inputValue': 'vijaybharani', 'er...</msg>
<status status="PASS" starttime="20241124 14:28:38.867" endtime="20241124 14:28:38.867"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:38.868" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "293", "status": "COMPLETED", "actionName": "Set login password", "actionType": "TYPE_TEXT", "actionXpath": "//input[@id=\"password\"]", "inputValue": "vijaybharani", "...</msg>
<status status="PASS" starttime="20241124 14:28:38.868" endtime="20241124 14:28:38.868"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:38.908" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:38.908" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:38.868" endtime="20241124 14:28:38.908"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:38.909" endtime="20241124 14:28:38.911"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:38.911" endtime="20241124 14:28:38.911"/>
</return>
<status status="PASS" starttime="20241124 14:28:38.868" endtime="20241124 14:28:38.911"/>
</kw>
<status status="PASS" starttime="20241124 14:28:38.865" endtime="20241124 14:28:38.911"/>
</kw>
<status status="PASS" starttime="20241124 14:28:37.386" endtime="20241124 14:28:38.911"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.912" endtime="20241124 14:28:38.912"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:28:38.912" endtime="20241124 14:28:38.912"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.912" endtime="20241124 14:28:38.912"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.912" endtime="20241124 14:28:38.912"/>
</branch>
<status status="PASS" starttime="20241124 14:28:37.385" endtime="20241124 14:28:38.912"/>
</try>
<status status="PASS" starttime="20241124 14:28:37.383" endtime="20241124 14:28:38.913"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '42', 'actionId': '29', 'flowId': '14', 'order': 2, 'createdAt': '2024-11-21T16:43:09.645Z', 'updatedAt': '2024-11-22T04:20:41.497Z', 'action': {'id': '29', 'name': 'Set login username', 'type'...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.913" level="INFO">${action} = {'id': '29', 'name': 'Set login username', 'type': 'TYPE_TEXT', 'xpath': 'id=username', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:39:14.809Z', 'updatedAt': '2024-11-23T17:11:28.46...</msg>
<status status="PASS" starttime="20241124 14:28:38.913" endtime="20241124 14:28:38.913"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:38.914" endtime="20241124 14:28:38.915"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:28:38.917" level="INFO">${input} = {'id': '26', 'actionId': '29', 'name': 'Bharani', 'value': 'bharani@ideas2it.com', 'waitAfterAction': '1', 'isDefault': True, 'createdAt': '2024-11-21T16:39:15.038Z', 'updatedAt': '2024-11-21T17:23:16...</msg>
<status status="PASS" starttime="20241124 14:28:38.916" endtime="20241124 14:28:38.917"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.918" endtime="20241124 14:28:38.918"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.918" endtime="20241124 14:28:38.919"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.918" endtime="20241124 14:28:38.919"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.918" endtime="20241124 14:28:38.919"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:38.920" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:28:38.919" endtime="20241124 14:28:38.920"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:38.920" endtime="20241124 14:28:38.920"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.920" endtime="20241124 14:28:38.920"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:38.921" endtime="20241124 14:28:38.921"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.921" endtime="20241124 14:28:38.921"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.923" endtime="20241124 14:28:38.923"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.921" endtime="20241124 14:28:38.923"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.925" endtime="20241124 14:28:38.925"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.927" endtime="20241124 14:28:38.927"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.923" endtime="20241124 14:28:38.927"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.928" endtime="20241124 14:28:38.928"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.927" endtime="20241124 14:28:38.928"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.931" endtime="20241124 14:28:38.931"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.928" endtime="20241124 14:28:38.931"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=username: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:38.946" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:28:38.940" endtime="20241124 14:28:38.946"/>
</kw>
<msg timestamp="20241124 14:28:38.946" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.939" endtime="20241124 14:28:38.946"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:38.946" endtime="20241124 14:28:38.946"/>
</return>
<status status="PASS" starttime="20241124 14:28:38.939" endtime="20241124 14:28:38.946"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.946" endtime="20241124 14:28:38.946"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.947" endtime="20241124 14:28:38.947"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.946" endtime="20241124 14:28:38.947"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.939" endtime="20241124 14:28:38.947"/>
</try>
<msg timestamp="20241124 14:28:38.947" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.939" endtime="20241124 14:28:38.947"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:38.947" endtime="20241124 14:28:38.947"/>
</return>
<status status="PASS" starttime="20241124 14:28:38.938" endtime="20241124 14:28:38.947"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:38.947" endtime="20241124 14:28:38.947"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.947" endtime="20241124 14:28:38.947"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.938" endtime="20241124 14:28:38.947"/>
</try>
<msg timestamp="20241124 14:28:38.948" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.938" endtime="20241124 14:28:38.948"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.950" endtime="20241124 14:28:38.950"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.951" endtime="20241124 14:28:38.951"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.950" endtime="20241124 14:28:38.951"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.950" endtime="20241124 14:28:38.951"/>
</if>
<status status="PASS" starttime="20241124 14:28:38.949" endtime="20241124 14:28:38.951"/>
</kw>
<status status="PASS" starttime="20241124 14:28:38.937" endtime="20241124 14:28:38.951"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:38.963" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:28:38.958" endtime="20241124 14:28:38.963"/>
</kw>
<msg timestamp="20241124 14:28:38.964" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.958" endtime="20241124 14:28:38.964"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:38.964" endtime="20241124 14:28:38.964"/>
</return>
<status status="PASS" starttime="20241124 14:28:38.958" endtime="20241124 14:28:38.964"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.964" endtime="20241124 14:28:38.964"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.964" endtime="20241124 14:28:38.964"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.964" endtime="20241124 14:28:38.964"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.958" endtime="20241124 14:28:38.965"/>
</try>
<msg timestamp="20241124 14:28:38.965" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.958" endtime="20241124 14:28:38.965"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:38.965" endtime="20241124 14:28:38.965"/>
</return>
<status status="PASS" starttime="20241124 14:28:38.957" endtime="20241124 14:28:38.965"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:38.966" endtime="20241124 14:28:38.966"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:38.965" endtime="20241124 14:28:38.966"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.957" endtime="20241124 14:28:38.966"/>
</try>
<msg timestamp="20241124 14:28:38.966" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.956" endtime="20241124 14:28:38.966"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.969" endtime="20241124 14:28:38.969"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.969" endtime="20241124 14:28:38.969"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.969" endtime="20241124 14:28:38.969"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.969" endtime="20241124 14:28:38.969"/>
</if>
<status status="PASS" starttime="20241124 14:28:38.968" endtime="20241124 14:28:38.969"/>
</kw>
<status status="PASS" starttime="20241124 14:28:38.956" endtime="20241124 14:28:38.970"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:28:38.977" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:28:38.978" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:28:38.970" endtime="20241124 14:28:38.978"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:28:38.978" endtime="20241124 14:28:38.978"/>
</return>
<status status="PASS" starttime="20241124 14:28:38.970" endtime="20241124 14:28:38.978"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.978" endtime="20241124 14:28:38.978"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.978" endtime="20241124 14:28:38.978"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.978" endtime="20241124 14:28:38.979"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.970" endtime="20241124 14:28:38.979"/>
</try>
<msg timestamp="20241124 14:28:38.979" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:28:38.954" endtime="20241124 14:28:38.979"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.981" endtime="20241124 14:28:38.981"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.982" endtime="20241124 14:28:38.982"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.981" endtime="20241124 14:28:38.982"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.981" endtime="20241124 14:28:38.982"/>
</if>
<status status="PASS" starttime="20241124 14:28:38.980" endtime="20241124 14:28:38.982"/>
</kw>
<status status="PASS" starttime="20241124 14:28:38.954" endtime="20241124 14:28:38.982"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.982" endtime="20241124 14:28:38.982"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.982" endtime="20241124 14:28:38.982"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.954" endtime="20241124 14:28:38.982"/>
</try>
<status status="PASS" starttime="20241124 14:28:38.953" endtime="20241124 14:28:38.982"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:38.991" level="INFO">Waited for Element with selector id=username at state visible</msg>
<status status="PASS" starttime="20241124 14:28:38.987" endtime="20241124 14:28:38.991"/>
</kw>
<msg timestamp="20241124 14:28:38.991" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.986" endtime="20241124 14:28:38.991"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:38.992" endtime="20241124 14:28:38.992"/>
</return>
<status status="PASS" starttime="20241124 14:28:38.986" endtime="20241124 14:28:38.992"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.992" endtime="20241124 14:28:38.992"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.992" endtime="20241124 14:28:38.992"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.992" endtime="20241124 14:28:38.992"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.986" endtime="20241124 14:28:38.992"/>
</try>
<msg timestamp="20241124 14:28:38.993" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.986" endtime="20241124 14:28:38.993"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:38.993" endtime="20241124 14:28:38.993"/>
</return>
<msg timestamp="20241124 14:28:38.993" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.985" endtime="20241124 14:28:38.993"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.995" endtime="20241124 14:28:38.995"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:38.995" endtime="20241124 14:28:38.995"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:38.995" endtime="20241124 14:28:38.995"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.995" endtime="20241124 14:28:38.995"/>
</if>
<status status="PASS" starttime="20241124 14:28:38.994" endtime="20241124 14:28:38.995"/>
</kw>
<status status="PASS" starttime="20241124 14:28:38.984" endtime="20241124 14:28:38.996"/>
</kw>
<status status="PASS" starttime="20241124 14:28:38.935" endtime="20241124 14:28:38.996"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:39.010" level="INFO">Waited for Element with selector id=username at state editable</msg>
<status status="PASS" starttime="20241124 14:28:39.000" endtime="20241124 14:28:39.010"/>
</kw>
<msg timestamp="20241124 14:28:39.010" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.999" endtime="20241124 14:28:39.010"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:39.011" endtime="20241124 14:28:39.011"/>
</return>
<status status="PASS" starttime="20241124 14:28:38.999" endtime="20241124 14:28:39.011"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.011" endtime="20241124 14:28:39.011"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.011" endtime="20241124 14:28:39.011"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.011" endtime="20241124 14:28:39.011"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.999" endtime="20241124 14:28:39.011"/>
</try>
<msg timestamp="20241124 14:28:39.012" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.999" endtime="20241124 14:28:39.012"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:39.012" endtime="20241124 14:28:39.012"/>
</return>
<msg timestamp="20241124 14:28:39.012" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241124 14:28:38.997" endtime="20241124 14:28:39.012"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.014" endtime="20241124 14:28:39.014"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.014" endtime="20241124 14:28:39.014"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.014" endtime="20241124 14:28:39.015"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.014" endtime="20241124 14:28:39.015"/>
</if>
<status status="PASS" starttime="20241124 14:28:39.013" endtime="20241124 14:28:39.015"/>
</kw>
<status status="PASS" starttime="20241124 14:28:38.997" endtime="20241124 14:28:39.015"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:39.015" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:28:39.015" endtime="20241124 14:28:39.015"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=username: string</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.017" endtime="20241124 14:28:39.017"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.018" endtime="20241124 14:28:39.018"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.017" endtime="20241124 14:28:39.018"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:39.019" endtime="20241124 14:28:39.019"/>
</kw>
<status status="PASS" starttime="20241124 14:28:39.019" endtime="20241124 14:28:39.019"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.016" endtime="20241124 14:28:39.019"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241124 14:28:39.020" level="INFO">Fills the text 'bharani@ideas2it.com' in the given field.</msg>
<status status="PASS" starttime="20241124 14:28:39.019" endtime="20241124 14:28:39.037"/>
</kw>
<status status="PASS" starttime="20241124 14:28:39.019" endtime="20241124 14:28:39.037"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.038" endtime="20241124 14:28:39.038"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.038" endtime="20241124 14:28:39.038"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.038" endtime="20241124 14:28:39.038"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.019" endtime="20241124 14:28:39.038"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=username: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:39.048" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:28:39.043" endtime="20241124 14:28:39.048"/>
</kw>
<msg timestamp="20241124 14:28:39.048" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.043" endtime="20241124 14:28:39.048"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:39.048" endtime="20241124 14:28:39.048"/>
</return>
<status status="PASS" starttime="20241124 14:28:39.043" endtime="20241124 14:28:39.048"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.049" endtime="20241124 14:28:39.049"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.049" endtime="20241124 14:28:39.049"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.049" endtime="20241124 14:28:39.049"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.043" endtime="20241124 14:28:39.049"/>
</try>
<msg timestamp="20241124 14:28:39.050" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.042" endtime="20241124 14:28:39.050"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:39.050" endtime="20241124 14:28:39.050"/>
</return>
<status status="PASS" starttime="20241124 14:28:39.042" endtime="20241124 14:28:39.050"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:39.050" endtime="20241124 14:28:39.050"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:39.050" endtime="20241124 14:28:39.050"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.042" endtime="20241124 14:28:39.050"/>
</try>
<msg timestamp="20241124 14:28:39.050" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.041" endtime="20241124 14:28:39.050"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.051" endtime="20241124 14:28:39.051"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.052" endtime="20241124 14:28:39.052"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.051" endtime="20241124 14:28:39.052"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.051" endtime="20241124 14:28:39.052"/>
</if>
<status status="PASS" starttime="20241124 14:28:39.051" endtime="20241124 14:28:39.052"/>
</kw>
<status status="PASS" starttime="20241124 14:28:39.041" endtime="20241124 14:28:39.052"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:39.066" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:28:39.059" endtime="20241124 14:28:39.066"/>
</kw>
<msg timestamp="20241124 14:28:39.066" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.059" endtime="20241124 14:28:39.066"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:39.066" endtime="20241124 14:28:39.067"/>
</return>
<status status="PASS" starttime="20241124 14:28:39.059" endtime="20241124 14:28:39.067"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.067" endtime="20241124 14:28:39.067"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.067" endtime="20241124 14:28:39.067"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.067" endtime="20241124 14:28:39.067"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.059" endtime="20241124 14:28:39.067"/>
</try>
<msg timestamp="20241124 14:28:39.068" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.058" endtime="20241124 14:28:39.068"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:39.068" endtime="20241124 14:28:39.068"/>
</return>
<status status="PASS" starttime="20241124 14:28:39.057" endtime="20241124 14:28:39.068"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:39.068" endtime="20241124 14:28:39.068"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:39.068" endtime="20241124 14:28:39.068"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.057" endtime="20241124 14:28:39.068"/>
</try>
<msg timestamp="20241124 14:28:39.068" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.057" endtime="20241124 14:28:39.068"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.070" endtime="20241124 14:28:39.070"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.070" endtime="20241124 14:28:39.070"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.070" endtime="20241124 14:28:39.070"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.070" endtime="20241124 14:28:39.071"/>
</if>
<status status="PASS" starttime="20241124 14:28:39.069" endtime="20241124 14:28:39.071"/>
</kw>
<status status="PASS" starttime="20241124 14:28:39.057" endtime="20241124 14:28:39.071"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:28:39.079" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:28:39.079" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:28:39.071" endtime="20241124 14:28:39.079"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:28:39.079" endtime="20241124 14:28:39.079"/>
</return>
<status status="PASS" starttime="20241124 14:28:39.071" endtime="20241124 14:28:39.080"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.080" endtime="20241124 14:28:39.080"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.080" endtime="20241124 14:28:39.080"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.080" endtime="20241124 14:28:39.080"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.071" endtime="20241124 14:28:39.080"/>
</try>
<msg timestamp="20241124 14:28:39.080" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:28:39.055" endtime="20241124 14:28:39.080"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.083" endtime="20241124 14:28:39.083"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.083" endtime="20241124 14:28:39.083"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.083" endtime="20241124 14:28:39.083"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.082" endtime="20241124 14:28:39.083"/>
</if>
<status status="PASS" starttime="20241124 14:28:39.081" endtime="20241124 14:28:39.083"/>
</kw>
<status status="PASS" starttime="20241124 14:28:39.054" endtime="20241124 14:28:39.083"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.084" endtime="20241124 14:28:39.084"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.083" endtime="20241124 14:28:39.084"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.054" endtime="20241124 14:28:39.084"/>
</try>
<status status="PASS" starttime="20241124 14:28:39.054" endtime="20241124 14:28:39.084"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:39.093" level="INFO">Waited for Element with selector id=username at state visible</msg>
<status status="PASS" starttime="20241124 14:28:39.087" endtime="20241124 14:28:39.093"/>
</kw>
<msg timestamp="20241124 14:28:39.093" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.087" endtime="20241124 14:28:39.093"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:39.093" endtime="20241124 14:28:39.093"/>
</return>
<status status="PASS" starttime="20241124 14:28:39.087" endtime="20241124 14:28:39.093"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.093" endtime="20241124 14:28:39.093"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.094" endtime="20241124 14:28:39.094"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.093" endtime="20241124 14:28:39.094"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.087" endtime="20241124 14:28:39.094"/>
</try>
<msg timestamp="20241124 14:28:39.094" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.087" endtime="20241124 14:28:39.094"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:39.094" endtime="20241124 14:28:39.094"/>
</return>
<msg timestamp="20241124 14:28:39.094" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.086" endtime="20241124 14:28:39.094"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.096" endtime="20241124 14:28:39.096"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.097" endtime="20241124 14:28:39.097"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.096" endtime="20241124 14:28:39.097"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.096" endtime="20241124 14:28:39.097"/>
</if>
<status status="PASS" starttime="20241124 14:28:39.095" endtime="20241124 14:28:39.097"/>
</kw>
<status status="PASS" starttime="20241124 14:28:39.085" endtime="20241124 14:28:39.097"/>
</kw>
<status status="PASS" starttime="20241124 14:28:39.039" endtime="20241124 14:28:39.097"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:39.107" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:28:39.102" endtime="20241124 14:28:39.107"/>
</kw>
<msg timestamp="20241124 14:28:39.107" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.101" endtime="20241124 14:28:39.107"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:39.107" endtime="20241124 14:28:39.107"/>
</return>
<status status="PASS" starttime="20241124 14:28:39.101" endtime="20241124 14:28:39.107"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.107" endtime="20241124 14:28:39.107"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.108" endtime="20241124 14:28:39.108"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.107" endtime="20241124 14:28:39.108"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.101" endtime="20241124 14:28:39.108"/>
</try>
<msg timestamp="20241124 14:28:39.108" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.101" endtime="20241124 14:28:39.108"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:39.108" endtime="20241124 14:28:39.108"/>
</return>
<status status="PASS" starttime="20241124 14:28:39.100" endtime="20241124 14:28:39.108"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:39.108" endtime="20241124 14:28:39.108"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:39.108" endtime="20241124 14:28:39.108"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.100" endtime="20241124 14:28:39.108"/>
</try>
<msg timestamp="20241124 14:28:39.109" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.100" endtime="20241124 14:28:39.109"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.111" endtime="20241124 14:28:39.111"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.111" endtime="20241124 14:28:39.111"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.110" endtime="20241124 14:28:39.111"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.110" endtime="20241124 14:28:39.111"/>
</if>
<status status="PASS" starttime="20241124 14:28:39.110" endtime="20241124 14:28:39.111"/>
</kw>
<status status="PASS" starttime="20241124 14:28:39.099" endtime="20241124 14:28:39.111"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:28:39.120" level="INFO">Property: 'bharani@ideas2it.com'</msg>
<msg timestamp="20241124 14:28:39.120" level="INFO">${property} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:28:39.112" endtime="20241124 14:28:39.120"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:28:39.120" endtime="20241124 14:28:39.120"/>
</return>
<status status="PASS" starttime="20241124 14:28:39.111" endtime="20241124 14:28:39.120"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.120" endtime="20241124 14:28:39.121"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.121" endtime="20241124 14:28:39.121"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.120" endtime="20241124 14:28:39.121"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.111" endtime="20241124 14:28:39.121"/>
</try>
<msg timestamp="20241124 14:28:39.121" level="INFO">${fieldTextValue} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:28:39.098" endtime="20241124 14:28:39.121"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241124 14:28:39.121" endtime="20241124 14:28:39.121"/>
</return>
<msg timestamp="20241124 14:28:39.121" level="INFO">${populated_value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:28:39.039" endtime="20241124 14:28:39.121"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241124 14:28:39.127" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.123" endtime="20241124 14:28:39.127"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:39.127" endtime="20241124 14:28:39.127"/>
</return>
<msg timestamp="20241124 14:28:39.127" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241124 14:28:39.123" endtime="20241124 14:28:39.127"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.130" endtime="20241124 14:28:39.130"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.131" endtime="20241124 14:28:39.131"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.130" endtime="20241124 14:28:39.131"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.130" endtime="20241124 14:28:39.131"/>
</if>
<status status="PASS" starttime="20241124 14:28:39.129" endtime="20241124 14:28:39.131"/>
</kw>
<status status="PASS" starttime="20241124 14:28:39.038" endtime="20241124 14:28:39.131"/>
</kw>
<status status="PASS" starttime="20241124 14:28:39.016" endtime="20241124 14:28:39.131"/>
</kw>
<status status="PASS" starttime="20241124 14:28:39.016" endtime="20241124 14:28:39.131"/>
</kw>
<status status="PASS" starttime="20241124 14:28:39.015" endtime="20241124 14:28:39.131"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.132" endtime="20241124 14:28:39.132"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.131" endtime="20241124 14:28:39.132"/>
</branch>
<status status="PASS" starttime="20241124 14:28:39.015" endtime="20241124 14:28:39.132"/>
</try>
<status status="PASS" starttime="20241124 14:28:38.934" endtime="20241124 14:28:39.132"/>
</kw>
<status status="PASS" starttime="20241124 14:28:38.931" endtime="20241124 14:28:39.132"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.133" endtime="20241124 14:28:39.133"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.132" endtime="20241124 14:28:39.133"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.134" endtime="20241124 14:28:39.135"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.135" endtime="20241124 14:28:39.135"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.135" endtime="20241124 14:28:39.135"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.135" endtime="20241124 14:28:39.135"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.135" endtime="20241124 14:28:39.135"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:39.135" endtime="20241124 14:28:39.135"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:39.134" endtime="20241124 14:28:39.135"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:39.140" endtime="20241124 14:28:39.140"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.143" endtime="20241124 14:28:39.143"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.136" endtime="20241124 14:28:39.143"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.144" endtime="20241124 14:28:39.144"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.145" endtime="20241124 14:28:39.145"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.144" endtime="20241124 14:28:39.145"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.145" endtime="20241124 14:28:39.145"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.145" endtime="20241124 14:28:39.145"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:39.144" endtime="20241124 14:28:39.145"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:39.143" endtime="20241124 14:28:39.145"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:39.150" endtime="20241124 14:28:39.150"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.153" endtime="20241124 14:28:39.153"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.145" endtime="20241124 14:28:39.153"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.154" endtime="20241124 14:28:39.154"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.155" endtime="20241124 14:28:39.155"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.155" endtime="20241124 14:28:39.155"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.155" endtime="20241124 14:28:39.155"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.155" endtime="20241124 14:28:39.155"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:39.155" endtime="20241124 14:28:39.155"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:39.153" endtime="20241124 14:28:39.156"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.158" endtime="20241124 14:28:39.158"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.156" endtime="20241124 14:28:39.158"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:28:39.164" endtime="20241124 14:28:39.164"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:39.164" endtime="20241124 14:28:39.165"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:39.158" endtime="20241124 14:28:39.165"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.920" endtime="20241124 14:28:39.165"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:39.165" endtime="20241124 14:28:39.166"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:28:40.169" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241124 14:28:39.167" endtime="20241124 14:28:40.169"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:28:40.169" endtime="20241124 14:28:40.169"/>
</return>
<msg timestamp="20241124 14:28:40.170" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:28:38.919" endtime="20241124 14:28:40.170"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.172" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:28:40.171" endtime="20241124 14:28:40.172"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.173" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:28:40.173" endtime="20241124 14:28:40.173"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.174" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:28:40.173" endtime="20241124 14:28:40.174"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.174" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:40.174" endtime="20241124 14:28:40.174"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.175" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:40.175" endtime="20241124 14:28:40.175"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.176" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:28:40.175" endtime="20241124 14:28:40.176"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.177" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:28:40.176" endtime="20241124 14:28:40.177"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.177" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:28:40.177" endtime="20241124 14:28:40.177"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:40.178" endtime="20241124 14:28:40.178"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:40.182" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:28:40.181" endtime="20241124 14:28:40.182"/>
</kw>
<msg timestamp="20241124 14:28:40.183" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:40.180" endtime="20241124 14:28:40.183"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.185" endtime="20241124 14:28:40.185"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.186" endtime="20241124 14:28:40.186"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.185" endtime="20241124 14:28:40.186"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.186" endtime="20241124 14:28:40.186"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.186" endtime="20241124 14:28:40.186"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.185" endtime="20241124 14:28:40.186"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.184" endtime="20241124 14:28:40.187"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.184" endtime="20241124 14:28:40.187"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:40.187" endtime="20241124 14:28:40.187"/>
</return>
<msg timestamp="20241124 14:28:40.187" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:40.179" endtime="20241124 14:28:40.187"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:40.190" endtime="20241124 14:28:40.190"/>
</kw>
<msg timestamp="20241124 14:28:40.190" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.189" endtime="20241124 14:28:40.190"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.191" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:28:40.191" endtime="20241124 14:28:40.191"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.192" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.192" endtime="20241124 14:28:40.192"/>
</kw>
<status status="PASS" starttime="20241124 14:28:40.191" endtime="20241124 14:28:40.192"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.193" endtime="20241124 14:28:40.193"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.192" endtime="20241124 14:28:40.193"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.191" endtime="20241124 14:28:40.193"/>
</if>
<status status="PASS" starttime="20241124 14:28:40.190" endtime="20241124 14:28:40.193"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.190" endtime="20241124 14:28:40.193"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:40.193" endtime="20241124 14:28:40.193"/>
</return>
<msg timestamp="20241124 14:28:40.194" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.189" endtime="20241124 14:28:40.194"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:40.194" endtime="20241124 14:28:40.194"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.194" endtime="20241124 14:28:40.194"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.194" endtime="20241124 14:28:40.194"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.195" endtime="20241124 14:28:40.195"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:40.195" endtime="20241124 14:28:40.195"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.195" endtime="20241124 14:28:40.195"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.196" endtime="20241124 14:28:40.196"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:40.196" endtime="20241124 14:28:40.196"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.195" endtime="20241124 14:28:40.196"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.195" endtime="20241124 14:28:40.196"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.195" endtime="20241124 14:28:40.196"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.195" endtime="20241124 14:28:40.196"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.197" endtime="20241124 14:28:40.197"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:40.197" endtime="20241124 14:28:40.197"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.196" endtime="20241124 14:28:40.198"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.198" endtime="20241124 14:28:40.198"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:40.198" endtime="20241124 14:28:40.198"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.198" endtime="20241124 14:28:40.198"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.196" endtime="20241124 14:28:40.198"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.196" endtime="20241124 14:28:40.198"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.196" endtime="20241124 14:28:40.198"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.194" endtime="20241124 14:28:40.198"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.194" endtime="20241124 14:28:40.198"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:40.199" endtime="20241124 14:28:40.199"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.199" endtime="20241124 14:28:40.200"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.199" endtime="20241124 14:28:40.200"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.200" endtime="20241124 14:28:40.200"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.200" endtime="20241124 14:28:40.200"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.200" endtime="20241124 14:28:40.200"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.201" endtime="20241124 14:28:40.201"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.201" endtime="20241124 14:28:40.201"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:40.201" endtime="20241124 14:28:40.202"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.201" endtime="20241124 14:28:40.202"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.202" endtime="20241124 14:28:40.202"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:40.202" endtime="20241124 14:28:40.202"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.202" endtime="20241124 14:28:40.202"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.201" endtime="20241124 14:28:40.202"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.201" endtime="20241124 14:28:40.202"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.201" endtime="20241124 14:28:40.202"/>
</if>
<status status="PASS" starttime="20241124 14:28:40.199" endtime="20241124 14:28:40.202"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.199" endtime="20241124 14:28:40.202"/>
</if>
<status status="PASS" starttime="20241124 14:28:40.173" endtime="20241124 14:28:40.202"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.203" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:28:40.203" endtime="20241124 14:28:40.203"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.204" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:40.203" endtime="20241124 14:28:40.204"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.204" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:40.204" endtime="20241124 14:28:40.204"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.204" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:40.204" endtime="20241124 14:28:40.204"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.205" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.205" endtime="20241124 14:28:40.205"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.205" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:40.205" endtime="20241124 14:28:40.205"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.206" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:28:40.205" endtime="20241124 14:28:40.206"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:40.206" endtime="20241124 14:28:40.206"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:40.208" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:28:40.208" endtime="20241124 14:28:40.208"/>
</kw>
<msg timestamp="20241124 14:28:40.209" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:40.208" endtime="20241124 14:28:40.209"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.209" endtime="20241124 14:28:40.209"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.209" endtime="20241124 14:28:40.209"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.209" endtime="20241124 14:28:40.210"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.210" endtime="20241124 14:28:40.210"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.210" endtime="20241124 14:28:40.210"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.209" endtime="20241124 14:28:40.210"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.209" endtime="20241124 14:28:40.210"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.209" endtime="20241124 14:28:40.210"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:40.210" endtime="20241124 14:28:40.210"/>
</return>
<msg timestamp="20241124 14:28:40.211" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:40.207" endtime="20241124 14:28:40.211"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:40.215" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:28:40.214" endtime="20241124 14:28:40.216"/>
</kw>
<msg timestamp="20241124 14:28:40.216" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:40.214" endtime="20241124 14:28:40.216"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.216" endtime="20241124 14:28:40.216"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.217" endtime="20241124 14:28:40.217"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.217" endtime="20241124 14:28:40.217"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.217" endtime="20241124 14:28:40.217"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.217" endtime="20241124 14:28:40.217"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.216" endtime="20241124 14:28:40.217"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.216" endtime="20241124 14:28:40.217"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.216" endtime="20241124 14:28:40.217"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:40.217" endtime="20241124 14:28:40.218"/>
</return>
<msg timestamp="20241124 14:28:40.218" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:40.213" endtime="20241124 14:28:40.218"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:40.218" endtime="20241124 14:28:40.218"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.218" endtime="20241124 14:28:40.218"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.218" endtime="20241124 14:28:40.218"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.219" endtime="20241124 14:28:40.219"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:40.219" endtime="20241124 14:28:40.219"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.219" endtime="20241124 14:28:40.219"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.219" endtime="20241124 14:28:40.220"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:40.220" endtime="20241124 14:28:40.220"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.219" endtime="20241124 14:28:40.220"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.219" endtime="20241124 14:28:40.220"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.219" endtime="20241124 14:28:40.220"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.219" endtime="20241124 14:28:40.220"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.220" endtime="20241124 14:28:40.220"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:40.220" endtime="20241124 14:28:40.221"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.220" endtime="20241124 14:28:40.221"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.221" endtime="20241124 14:28:40.221"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:40.221" endtime="20241124 14:28:40.221"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.221" endtime="20241124 14:28:40.221"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.220" endtime="20241124 14:28:40.221"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.220" endtime="20241124 14:28:40.221"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.220" endtime="20241124 14:28:40.221"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.218" endtime="20241124 14:28:40.221"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.218" endtime="20241124 14:28:40.221"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:40.222" endtime="20241124 14:28:40.222"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.222" endtime="20241124 14:28:40.223"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.222" endtime="20241124 14:28:40.223"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.223" endtime="20241124 14:28:40.223"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.223" endtime="20241124 14:28:40.223"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.223" endtime="20241124 14:28:40.223"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.223" endtime="20241124 14:28:40.224"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.224" endtime="20241124 14:28:40.224"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:40.224" endtime="20241124 14:28:40.224"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.224" endtime="20241124 14:28:40.224"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.224" endtime="20241124 14:28:40.224"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:40.224" endtime="20241124 14:28:40.225"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.224" endtime="20241124 14:28:40.225"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.224" endtime="20241124 14:28:40.225"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.223" endtime="20241124 14:28:40.225"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.223" endtime="20241124 14:28:40.225"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.222" endtime="20241124 14:28:40.225"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.221" endtime="20241124 14:28:40.225"/>
</if>
<status status="PASS" starttime="20241124 14:28:40.203" endtime="20241124 14:28:40.225"/>
</iter>
<status status="PASS" starttime="20241124 14:28:40.172" endtime="20241124 14:28:40.225"/>
</for>
<msg timestamp="20241124 14:28:40.225" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:28:40.170" endtime="20241124 14:28:40.225"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:40.225" endtime="20241124 14:28:40.226"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:40.230" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '294', 'status': 'COMPLETED', 'actionName': 'Set login username', 'actionType': 'TYPE_TEXT', 'actionXpath': 'id=username', 'inputValue': 'bharani@ideas2it.com', 'errorM...</msg>
<status status="PASS" starttime="20241124 14:28:40.228" endtime="20241124 14:28:40.230"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:40.236" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "294", "status": "COMPLETED", "actionName": "Set login username", "actionType": "TYPE_TEXT", "actionXpath": "id=username", "inputValue": "bharani@ideas2it.com", "errorM...</msg>
<status status="PASS" starttime="20241124 14:28:40.232" endtime="20241124 14:28:40.236"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:40.241" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:40.242" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:40.237" endtime="20241124 14:28:40.242"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:40.242" endtime="20241124 14:28:40.242"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:40.243" endtime="20241124 14:28:40.243"/>
</return>
<status status="PASS" starttime="20241124 14:28:40.230" endtime="20241124 14:28:40.244"/>
</kw>
<status status="PASS" starttime="20241124 14:28:40.226" endtime="20241124 14:28:40.245"/>
</kw>
<status status="PASS" starttime="20241124 14:28:38.913" endtime="20241124 14:28:40.246"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.247" endtime="20241124 14:28:40.247"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:28:40.247" endtime="20241124 14:28:40.248"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.248" endtime="20241124 14:28:40.248"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.246" endtime="20241124 14:28:40.248"/>
</branch>
<status status="PASS" starttime="20241124 14:28:38.913" endtime="20241124 14:28:40.249"/>
</try>
<status status="PASS" starttime="20241124 14:28:38.913" endtime="20241124 14:28:40.249"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '44', 'actionId': '31', 'flowId': '14', 'order': 3, 'createdAt': '2024-11-21T16:43:09.646Z', 'updatedAt': '2024-11-22T04:20:41.481Z', 'action': {'id': '31', 'name': 'Click login button', 'type'...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.251" level="INFO">${action} = {'id': '31', 'name': 'Click login button', 'type': 'CLICK', 'xpath': '//button[@type="submit" and text()="Login"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:41:25.179Z', 'updated...</msg>
<status status="PASS" starttime="20241124 14:28:40.249" endtime="20241124 14:28:40.251"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:40.251" endtime="20241124 14:28:40.252"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:28:40.254" level="INFO">${input} = {'id': '28', 'actionId': '31', 'name': 'Input 01', 'value': '', 'waitAfterAction': '5', 'isDefault': True, 'createdAt': '2024-11-21T16:41:25.706Z', 'updatedAt': '2024-11-21T17:38:31.563Z'}</msg>
<status status="PASS" starttime="20241124 14:28:40.253" endtime="20241124 14:28:40.254"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.254" endtime="20241124 14:28:40.255"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.255" endtime="20241124 14:28:40.255"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.254" endtime="20241124 14:28:40.255"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.254" endtime="20241124 14:28:40.255"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:40.256" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:28:40.256" endtime="20241124 14:28:40.256"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:40.257" endtime="20241124 14:28:40.257"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.257" endtime="20241124 14:28:40.257"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:40.257" endtime="20241124 14:28:40.257"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.257" endtime="20241124 14:28:40.257"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:40.290" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state attached</msg>
<status status="PASS" starttime="20241124 14:28:40.279" endtime="20241124 14:28:40.290"/>
</kw>
<msg timestamp="20241124 14:28:40.291" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.277" endtime="20241124 14:28:40.291"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:40.291" endtime="20241124 14:28:40.291"/>
</return>
<status status="PASS" starttime="20241124 14:28:40.276" endtime="20241124 14:28:40.291"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.291" endtime="20241124 14:28:40.291"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.292" endtime="20241124 14:28:40.292"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.291" endtime="20241124 14:28:40.292"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.276" endtime="20241124 14:28:40.292"/>
</try>
<msg timestamp="20241124 14:28:40.292" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.274" endtime="20241124 14:28:40.293"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:40.293" endtime="20241124 14:28:40.293"/>
</return>
<status status="PASS" starttime="20241124 14:28:40.273" endtime="20241124 14:28:40.293"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:40.293" endtime="20241124 14:28:40.293"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:40.293" endtime="20241124 14:28:40.293"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.273" endtime="20241124 14:28:40.293"/>
</try>
<msg timestamp="20241124 14:28:40.294" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.272" endtime="20241124 14:28:40.294"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.300" endtime="20241124 14:28:40.300"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.301" endtime="20241124 14:28:40.301"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.299" endtime="20241124 14:28:40.301"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.299" endtime="20241124 14:28:40.301"/>
</if>
<status status="PASS" starttime="20241124 14:28:40.296" endtime="20241124 14:28:40.301"/>
</kw>
<status status="PASS" starttime="20241124 14:28:40.272" endtime="20241124 14:28:40.302"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:40.321" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state visible</msg>
<status status="PASS" starttime="20241124 14:28:40.309" endtime="20241124 14:28:40.321"/>
</kw>
<msg timestamp="20241124 14:28:40.321" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.308" endtime="20241124 14:28:40.321"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:40.322" endtime="20241124 14:28:40.322"/>
</return>
<status status="PASS" starttime="20241124 14:28:40.308" endtime="20241124 14:28:40.322"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.322" endtime="20241124 14:28:40.322"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.322" endtime="20241124 14:28:40.323"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.322" endtime="20241124 14:28:40.323"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.307" endtime="20241124 14:28:40.323"/>
</try>
<msg timestamp="20241124 14:28:40.323" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.307" endtime="20241124 14:28:40.323"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:40.323" endtime="20241124 14:28:40.323"/>
</return>
<msg timestamp="20241124 14:28:40.324" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.305" endtime="20241124 14:28:40.324"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.326" endtime="20241124 14:28:40.326"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.327" endtime="20241124 14:28:40.327"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.326" endtime="20241124 14:28:40.327"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.326" endtime="20241124 14:28:40.327"/>
</if>
<status status="PASS" starttime="20241124 14:28:40.325" endtime="20241124 14:28:40.327"/>
</kw>
<status status="PASS" starttime="20241124 14:28:40.304" endtime="20241124 14:28:40.327"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:40.357" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state enabled</msg>
<status status="PASS" starttime="20241124 14:28:40.338" endtime="20241124 14:28:40.358"/>
</kw>
<msg timestamp="20241124 14:28:40.358" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.338" endtime="20241124 14:28:40.358"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:40.358" endtime="20241124 14:28:40.358"/>
</return>
<status status="PASS" starttime="20241124 14:28:40.338" endtime="20241124 14:28:40.358"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.359" endtime="20241124 14:28:40.359"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.360" endtime="20241124 14:28:40.360"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.359" endtime="20241124 14:28:40.360"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.337" endtime="20241124 14:28:40.360"/>
</try>
<msg timestamp="20241124 14:28:40.361" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.336" endtime="20241124 14:28:40.361"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:40.361" endtime="20241124 14:28:40.361"/>
</return>
<msg timestamp="20241124 14:28:40.362" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241124 14:28:40.333" endtime="20241124 14:28:40.362"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.370" endtime="20241124 14:28:40.370"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.370" endtime="20241124 14:28:40.371"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.369" endtime="20241124 14:28:40.371"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.369" endtime="20241124 14:28:40.371"/>
</if>
<status status="PASS" starttime="20241124 14:28:40.365" endtime="20241124 14:28:40.371"/>
</kw>
<status status="PASS" starttime="20241124 14:28:40.330" endtime="20241124 14:28:40.372"/>
</kw>
<status status="PASS" starttime="20241124 14:28:40.267" endtime="20241124 14:28:40.372"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:40.373" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:28:40.372" endtime="20241124 14:28:40.373"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.377" endtime="20241124 14:28:40.377"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.376" endtime="20241124 14:28:40.377"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:40.377" endtime="20241124 14:28:40.380"/>
</kw>
<status status="PASS" starttime="20241124 14:28:40.377" endtime="20241124 14:28:40.381"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.376" endtime="20241124 14:28:40.382"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241124 14:28:40.383" endtime="20241124 14:28:40.468"/>
</kw>
<status status="PASS" starttime="20241124 14:28:40.383" endtime="20241124 14:28:40.469"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.469" endtime="20241124 14:28:40.469"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.470" endtime="20241124 14:28:40.470"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.469" endtime="20241124 14:28:40.470"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.382" endtime="20241124 14:28:40.470"/>
</try>
<status status="PASS" starttime="20241124 14:28:40.375" endtime="20241124 14:28:40.471"/>
</kw>
<status status="PASS" starttime="20241124 14:28:40.374" endtime="20241124 14:28:40.471"/>
</kw>
<status status="PASS" starttime="20241124 14:28:40.373" endtime="20241124 14:28:40.471"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.471" endtime="20241124 14:28:40.471"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.471" endtime="20241124 14:28:40.471"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.373" endtime="20241124 14:28:40.471"/>
</try>
<status status="PASS" starttime="20241124 14:28:40.259" endtime="20241124 14:28:40.472"/>
</kw>
<status status="PASS" starttime="20241124 14:28:40.258" endtime="20241124 14:28:40.472"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.474" endtime="20241124 14:28:40.474"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.477" endtime="20241124 14:28:40.477"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.472" endtime="20241124 14:28:40.477"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.478" endtime="20241124 14:28:40.478"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.477" endtime="20241124 14:28:40.478"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.484" endtime="20241124 14:28:40.484"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.478" endtime="20241124 14:28:40.484"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.488" endtime="20241124 14:28:40.488"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.484" endtime="20241124 14:28:40.488"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.490" endtime="20241124 14:28:40.490"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.489" endtime="20241124 14:28:40.490"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.491" endtime="20241124 14:28:40.491"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.491" endtime="20241124 14:28:40.491"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.491" endtime="20241124 14:28:40.491"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.491" endtime="20241124 14:28:40.491"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.491" endtime="20241124 14:28:40.491"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.491" endtime="20241124 14:28:40.491"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.490" endtime="20241124 14:28:40.491"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:40.499" endtime="20241124 14:28:40.499"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.502" endtime="20241124 14:28:40.503"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.491" endtime="20241124 14:28:40.503"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.504" endtime="20241124 14:28:40.504"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.505" endtime="20241124 14:28:40.505"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.504" endtime="20241124 14:28:40.505"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.505" endtime="20241124 14:28:40.505"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.505" endtime="20241124 14:28:40.505"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.504" endtime="20241124 14:28:40.505"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.503" endtime="20241124 14:28:40.505"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:40.510" endtime="20241124 14:28:40.511"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.515" endtime="20241124 14:28:40.515"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.505" endtime="20241124 14:28:40.516"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.518" endtime="20241124 14:28:40.518"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.519" endtime="20241124 14:28:40.519"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.519" endtime="20241124 14:28:40.519"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.520" endtime="20241124 14:28:40.520"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.519" endtime="20241124 14:28:40.520"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:40.518" endtime="20241124 14:28:40.520"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:40.516" endtime="20241124 14:28:40.520"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.523" endtime="20241124 14:28:40.523"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.520" endtime="20241124 14:28:40.523"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:28:40.531" endtime="20241124 14:28:40.532"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:40.532" endtime="20241124 14:28:40.533"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:40.523" endtime="20241124 14:28:40.533"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.256" endtime="20241124 14:28:40.533"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:40.533" endtime="20241124 14:28:40.533"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:28:45.542" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20241124 14:28:40.534" endtime="20241124 14:28:45.543"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:28:45.543" endtime="20241124 14:28:45.543"/>
</return>
<msg timestamp="20241124 14:28:45.544" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:28:40.255" endtime="20241124 14:28:45.544"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.546" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:44</msg>
<status status="PASS" starttime="20241124 14:28:45.545" endtime="20241124 14:28:45.546"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.547" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:28:45.547" endtime="20241124 14:28:45.547"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.548" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:28:45.548" endtime="20241124 14:28:45.548"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.549" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.548" endtime="20241124 14:28:45.549"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.550" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:45.549" endtime="20241124 14:28:45.550"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.551" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.550" endtime="20241124 14:28:45.551"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.552" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:28:45.551" endtime="20241124 14:28:45.552"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.553" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:28:45.552" endtime="20241124 14:28:45.553"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:45.553" endtime="20241124 14:28:45.554"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:45.560" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:28:45.559" endtime="20241124 14:28:45.560"/>
</kw>
<msg timestamp="20241124 14:28:45.561" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.558" endtime="20241124 14:28:45.561"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.562" endtime="20241124 14:28:45.562"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.563" endtime="20241124 14:28:45.563"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.562" endtime="20241124 14:28:45.563"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.564" endtime="20241124 14:28:45.564"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.563" endtime="20241124 14:28:45.564"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.562" endtime="20241124 14:28:45.565"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.561" endtime="20241124 14:28:45.565"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.561" endtime="20241124 14:28:45.565"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:45.565" endtime="20241124 14:28:45.565"/>
</return>
<msg timestamp="20241124 14:28:45.566" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.557" endtime="20241124 14:28:45.566"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:45.570" endtime="20241124 14:28:45.571"/>
</kw>
<msg timestamp="20241124 14:28:45.571" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.570" endtime="20241124 14:28:45.571"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.573" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:28:45.572" endtime="20241124 14:28:45.573"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.576" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.575" endtime="20241124 14:28:45.576"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.574" endtime="20241124 14:28:45.576"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.577" endtime="20241124 14:28:45.577"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.577" endtime="20241124 14:28:45.577"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.573" endtime="20241124 14:28:45.577"/>
</if>
<status status="PASS" starttime="20241124 14:28:45.572" endtime="20241124 14:28:45.578"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.572" endtime="20241124 14:28:45.578"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:45.578" endtime="20241124 14:28:45.578"/>
</return>
<msg timestamp="20241124 14:28:45.579" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.569" endtime="20241124 14:28:45.579"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:45.581" endtime="20241124 14:28:45.581"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.581" endtime="20241124 14:28:45.582"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.581" endtime="20241124 14:28:45.582"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.583" endtime="20241124 14:28:45.584"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:45.584" endtime="20241124 14:28:45.585"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.583" endtime="20241124 14:28:45.585"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.586" endtime="20241124 14:28:45.586"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:45.586" endtime="20241124 14:28:45.587"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.586" endtime="20241124 14:28:45.587"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.583" endtime="20241124 14:28:45.588"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.583" endtime="20241124 14:28:45.588"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.583" endtime="20241124 14:28:45.588"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.590" endtime="20241124 14:28:45.590"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.590" endtime="20241124 14:28:45.591"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.589" endtime="20241124 14:28:45.591"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.593" endtime="20241124 14:28:45.594"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.594" endtime="20241124 14:28:45.595"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.591" endtime="20241124 14:28:45.595"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.589" endtime="20241124 14:28:45.596"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.589" endtime="20241124 14:28:45.597"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.588" endtime="20241124 14:28:45.597"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.581" endtime="20241124 14:28:45.597"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.580" endtime="20241124 14:28:45.598"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:45.600" endtime="20241124 14:28:45.600"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.600" endtime="20241124 14:28:45.600"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.599" endtime="20241124 14:28:45.601"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.602" endtime="20241124 14:28:45.602"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.601" endtime="20241124 14:28:45.603"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.601" endtime="20241124 14:28:45.603"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.604" endtime="20241124 14:28:45.604"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.606" endtime="20241124 14:28:45.606"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.606" endtime="20241124 14:28:45.607"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.605" endtime="20241124 14:28:45.607"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.608" endtime="20241124 14:28:45.611"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.612" endtime="20241124 14:28:45.612"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.607" endtime="20241124 14:28:45.612"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.605" endtime="20241124 14:28:45.612"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.604" endtime="20241124 14:28:45.612"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.603" endtime="20241124 14:28:45.613"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.599" endtime="20241124 14:28:45.613"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.598" endtime="20241124 14:28:45.613"/>
</if>
<status status="PASS" starttime="20241124 14:28:45.546" endtime="20241124 14:28:45.613"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.614" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:28:45.614" endtime="20241124 14:28:45.615"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.615" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:45.615" endtime="20241124 14:28:45.615"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.616" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.616" endtime="20241124 14:28:45.616"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.617" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:45.616" endtime="20241124 14:28:45.617"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.617" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.617" endtime="20241124 14:28:45.617"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.618" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:45.618" endtime="20241124 14:28:45.618"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.619" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:28:45.618" endtime="20241124 14:28:45.619"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:45.619" endtime="20241124 14:28:45.620"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:45.623" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:28:45.622" endtime="20241124 14:28:45.623"/>
</kw>
<msg timestamp="20241124 14:28:45.624" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.622" endtime="20241124 14:28:45.624"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.624" endtime="20241124 14:28:45.624"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.625" endtime="20241124 14:28:45.625"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.625" endtime="20241124 14:28:45.625"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.625" endtime="20241124 14:28:45.625"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.625" endtime="20241124 14:28:45.626"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.625" endtime="20241124 14:28:45.626"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.624" endtime="20241124 14:28:45.626"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.624" endtime="20241124 14:28:45.626"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:45.626" endtime="20241124 14:28:45.626"/>
</return>
<msg timestamp="20241124 14:28:45.626" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.621" endtime="20241124 14:28:45.626"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:45.630" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:28:45.629" endtime="20241124 14:28:45.630"/>
</kw>
<msg timestamp="20241124 14:28:45.630" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.629" endtime="20241124 14:28:45.630"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.631" endtime="20241124 14:28:45.631"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.631" endtime="20241124 14:28:45.631"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.631" endtime="20241124 14:28:45.631"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.631" endtime="20241124 14:28:45.631"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.631" endtime="20241124 14:28:45.631"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.631" endtime="20241124 14:28:45.631"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.630" endtime="20241124 14:28:45.631"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.630" endtime="20241124 14:28:45.631"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:45.632" endtime="20241124 14:28:45.632"/>
</return>
<msg timestamp="20241124 14:28:45.632" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.628" endtime="20241124 14:28:45.632"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:45.632" endtime="20241124 14:28:45.632"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.632" endtime="20241124 14:28:45.632"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.632" endtime="20241124 14:28:45.632"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.633" endtime="20241124 14:28:45.633"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:45.633" endtime="20241124 14:28:45.633"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.633" endtime="20241124 14:28:45.633"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.633" endtime="20241124 14:28:45.633"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:45.633" endtime="20241124 14:28:45.633"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.633" endtime="20241124 14:28:45.633"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.633" endtime="20241124 14:28:45.634"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.633" endtime="20241124 14:28:45.634"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.633" endtime="20241124 14:28:45.634"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.634" endtime="20241124 14:28:45.634"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.634" endtime="20241124 14:28:45.634"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.634" endtime="20241124 14:28:45.634"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.634" endtime="20241124 14:28:45.635"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.635" endtime="20241124 14:28:45.635"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.634" endtime="20241124 14:28:45.635"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.634" endtime="20241124 14:28:45.635"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.634" endtime="20241124 14:28:45.635"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.634" endtime="20241124 14:28:45.635"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.632" endtime="20241124 14:28:45.635"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.632" endtime="20241124 14:28:45.635"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:45.636" endtime="20241124 14:28:45.636"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.635" endtime="20241124 14:28:45.636"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.635" endtime="20241124 14:28:45.636"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.636" endtime="20241124 14:28:45.636"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.636" endtime="20241124 14:28:45.636"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.636" endtime="20241124 14:28:45.636"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.636" endtime="20241124 14:28:45.636"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.637" endtime="20241124 14:28:45.637"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.637" endtime="20241124 14:28:45.637"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.637" endtime="20241124 14:28:45.637"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.637" endtime="20241124 14:28:45.637"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.637" endtime="20241124 14:28:45.637"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.637" endtime="20241124 14:28:45.637"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.637" endtime="20241124 14:28:45.637"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.636" endtime="20241124 14:28:45.637"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.636" endtime="20241124 14:28:45.638"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.635" endtime="20241124 14:28:45.638"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.635" endtime="20241124 14:28:45.638"/>
</if>
<status status="PASS" starttime="20241124 14:28:45.614" endtime="20241124 14:28:45.638"/>
</iter>
<status status="PASS" starttime="20241124 14:28:45.546" endtime="20241124 14:28:45.638"/>
</for>
<msg timestamp="20241124 14:28:45.638" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:28:45.544" endtime="20241124 14:28:45.638"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:45.638" endtime="20241124 14:28:45.639"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:45.640" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '295', 'status': 'COMPLETED', 'actionName': 'Click login button', 'actionType': 'CLICK', 'actionXpath': '//button[@type="submit" and text()="Login"]', 'inputValue': '',...</msg>
<status status="PASS" starttime="20241124 14:28:45.640" endtime="20241124 14:28:45.641"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:45.641" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "295", "status": "COMPLETED", "actionName": "Click login button", "actionType": "CLICK", "actionXpath": "//button[@type=\"submit\" and text()=\"Login\"]", "inputValue":...</msg>
<status status="PASS" starttime="20241124 14:28:45.641" endtime="20241124 14:28:45.641"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:45.670" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:45.670" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:45.641" endtime="20241124 14:28:45.670"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:45.671" endtime="20241124 14:28:45.682"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:45.682" endtime="20241124 14:28:45.683"/>
</return>
<status status="PASS" starttime="20241124 14:28:45.641" endtime="20241124 14:28:45.683"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.639" endtime="20241124 14:28:45.683"/>
</kw>
<status status="PASS" starttime="20241124 14:28:40.249" endtime="20241124 14:28:45.683"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.683" endtime="20241124 14:28:45.683"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:28:45.684" endtime="20241124 14:28:45.684"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.684" endtime="20241124 14:28:45.684"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.683" endtime="20241124 14:28:45.684"/>
</branch>
<status status="PASS" starttime="20241124 14:28:40.249" endtime="20241124 14:28:45.684"/>
</try>
<status status="PASS" starttime="20241124 14:28:40.249" endtime="20241124 14:28:45.684"/>
</iter>
<status status="PASS" starttime="20241124 14:28:30.848" endtime="20241124 14:28:45.684"/>
</for>
<status status="PASS" starttime="20241124 14:28:30.848" endtime="20241124 14:28:45.684"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.848" endtime="20241124 14:28:45.684"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:45.686" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '77', 'status': 'COMPLETED', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241124 14:28:45.685" endtime="20241124 14:28:45.686"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:45.687" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "77", "status": "COMPLETED", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241124 14:28:45.686" endtime="20241124 14:28:45.687"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:45.722" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:45.722" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:45.687" endtime="20241124 14:28:45.722"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:45.722" endtime="20241124 14:28:45.723"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:45.723" endtime="20241124 14:28:45.723"/>
</return>
<status status="PASS" starttime="20241124 14:28:45.686" endtime="20241124 14:28:45.723"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.684" endtime="20241124 14:28:45.724"/>
</kw>
<status status="PASS" starttime="20241124 14:28:30.832" endtime="20241124 14:28:45.724"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.724" endtime="20241124 14:28:45.724"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:28:45.724" endtime="20241124 14:28:45.724"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.725" endtime="20241124 14:28:45.725"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.724" endtime="20241124 14:28:45.726"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.832" endtime="20241124 14:28:45.726"/>
</try>
<status status="PASS" starttime="20241124 14:28:30.832" endtime="20241124 14:28:45.726"/>
</iter>
<iter>
<var name="${testCaseFlowSequence}">{'id': '47', 'testCaseId': '27', 'flowId': '15', 'order': 1, 'createdAt': '2024-11-21T17:34:46.435Z', 'updatedAt': '2024-11-24T06:57:13.421Z', 'flow': {'id': '15', 'name': 'Navigate to profile', 'proj...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.729" level="INFO">${flow} = {'id': '15', 'name': 'Navigate to profile', 'projectId': '4', 'createdAt': '2024-11-21T17:34:26.845Z', 'updatedAt': '2024-11-24T06:43:12.878Z', 'flowActionSequences': [{'id': '45', 'actionId': '32', '...</msg>
<status status="PASS" starttime="20241124 14:28:45.728" endtime="20241124 14:28:45.730"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:45.730" endtime="20241124 14:28:45.731"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:45.735" endtime="20241124 14:28:45.735"/>
</kw>
<msg timestamp="20241124 14:28:45.735" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.734" endtime="20241124 14:28:45.735"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.736" level="INFO">${values} = [{'id': '45', 'actionId': '32', 'flowId': '15', 'order': 0, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.562Z', 'action': {'id': '32', 'name': 'Click Profile image icon',...</msg>
<status status="PASS" starttime="20241124 14:28:45.736" endtime="20241124 14:28:45.736"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.738" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.737" endtime="20241124 14:28:45.738"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.737" endtime="20241124 14:28:45.738"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.738" endtime="20241124 14:28:45.738"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.738" endtime="20241124 14:28:45.738"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.737" endtime="20241124 14:28:45.738"/>
</if>
<status status="PASS" starttime="20241124 14:28:45.735" endtime="20241124 14:28:45.738"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.735" endtime="20241124 14:28:45.738"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:45.738" endtime="20241124 14:28:45.739"/>
</return>
<msg timestamp="20241124 14:28:45.739" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.734" endtime="20241124 14:28:45.739"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '45', 'actionId': '32', 'flowId': '15', 'order': 0, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.562Z', 'action': {'id': '32', 'name': 'Click Profile image icon', ...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.740" level="INFO">${action} = {'id': '32', 'name': 'Click Profile image icon', 'type': 'CLICK', 'xpath': 'id=headerProfileImage', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T17:30:46.836Z', 'updatedAt': '2024-11-21...</msg>
<status status="PASS" starttime="20241124 14:28:45.740" endtime="20241124 14:28:45.740"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:45.740" endtime="20241124 14:28:45.741"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:28:45.741" level="INFO">${input} = {'id': '29', 'actionId': '32', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-21T17:30:47.048Z', 'updatedAt': '2024-11-21T17:30:47.048Z'}</msg>
<status status="PASS" starttime="20241124 14:28:45.741" endtime="20241124 14:28:45.741"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.742" endtime="20241124 14:28:45.742"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.742" endtime="20241124 14:28:45.742"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.741" endtime="20241124 14:28:45.742"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.741" endtime="20241124 14:28:45.742"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.744" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:28:45.743" endtime="20241124 14:28:45.744"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.745"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.745"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.745"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.745"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:45.761" level="INFO">Waited for Element with selector id=headerProfileImage at state attached</msg>
<status status="PASS" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.761"/>
</kw>
<msg timestamp="20241124 14:28:45.762" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.762"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:45.762" endtime="20241124 14:28:45.762"/>
</return>
<status status="PASS" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.762"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.763" endtime="20241124 14:28:45.763"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.763" endtime="20241124 14:28:45.763"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.762" endtime="20241124 14:28:45.763"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.763"/>
</try>
<msg timestamp="20241124 14:28:45.764" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.764"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:45.764" endtime="20241124 14:28:45.764"/>
</return>
<status status="PASS" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.764"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:45.764" endtime="20241124 14:28:45.764"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.764" endtime="20241124 14:28:45.764"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.764"/>
</try>
<msg timestamp="20241124 14:28:45.765" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.765"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.767" endtime="20241124 14:28:45.767"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.767" endtime="20241124 14:28:45.767"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.767" endtime="20241124 14:28:45.767"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.766" endtime="20241124 14:28:45.767"/>
</if>
<status status="PASS" starttime="20241124 14:28:45.766" endtime="20241124 14:28:45.767"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.768"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:45.780" level="INFO">Waited for Element with selector id=headerProfileImage at state visible</msg>
<status status="PASS" starttime="20241124 14:28:45.772" endtime="20241124 14:28:45.780"/>
</kw>
<msg timestamp="20241124 14:28:45.780" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.772" endtime="20241124 14:28:45.780"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:45.780" endtime="20241124 14:28:45.781"/>
</return>
<status status="PASS" starttime="20241124 14:28:45.771" endtime="20241124 14:28:45.781"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.781" endtime="20241124 14:28:45.781"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.781" endtime="20241124 14:28:45.781"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.781" endtime="20241124 14:28:45.781"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.771" endtime="20241124 14:28:45.782"/>
</try>
<msg timestamp="20241124 14:28:45.782" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.771" endtime="20241124 14:28:45.782"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:45.782" endtime="20241124 14:28:45.782"/>
</return>
<msg timestamp="20241124 14:28:45.782" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.770" endtime="20241124 14:28:45.782"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.784" endtime="20241124 14:28:45.785"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.785" endtime="20241124 14:28:45.785"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.784" endtime="20241124 14:28:45.785"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.784" endtime="20241124 14:28:45.785"/>
</if>
<status status="PASS" starttime="20241124 14:28:45.783" endtime="20241124 14:28:45.785"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.769" endtime="20241124 14:28:45.785"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:45.802" level="INFO">Waited for Element with selector id=headerProfileImage at state enabled</msg>
<status status="PASS" starttime="20241124 14:28:45.790" endtime="20241124 14:28:45.802"/>
</kw>
<msg timestamp="20241124 14:28:45.803" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.789" endtime="20241124 14:28:45.803"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:45.803" endtime="20241124 14:28:45.803"/>
</return>
<status status="PASS" starttime="20241124 14:28:45.789" endtime="20241124 14:28:45.803"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.803" endtime="20241124 14:28:45.803"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.803" endtime="20241124 14:28:45.804"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.803" endtime="20241124 14:28:45.804"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.789" endtime="20241124 14:28:45.804"/>
</try>
<msg timestamp="20241124 14:28:45.804" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.789" endtime="20241124 14:28:45.804"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:45.804" endtime="20241124 14:28:45.804"/>
</return>
<msg timestamp="20241124 14:28:45.804" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.787" endtime="20241124 14:28:45.804"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.807" endtime="20241124 14:28:45.807"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.807" endtime="20241124 14:28:45.807"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.807" endtime="20241124 14:28:45.807"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.806" endtime="20241124 14:28:45.807"/>
</if>
<status status="PASS" starttime="20241124 14:28:45.805" endtime="20241124 14:28:45.807"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.787" endtime="20241124 14:28:45.807"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.808"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:45.809" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.809"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.809"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.809"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.809"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.809"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.809"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.839"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.839"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.839" endtime="20241124 14:28:45.839"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.840" endtime="20241124 14:28:45.840"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.839" endtime="20241124 14:28:45.840"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.840"/>
</try>
<status status="PASS" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.840"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.840"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.840"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.840" endtime="20241124 14:28:45.841"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.840" endtime="20241124 14:28:45.841"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.809" endtime="20241124 14:28:45.841"/>
</try>
<status status="PASS" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.841"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.745" endtime="20241124 14:28:45.841"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.843" endtime="20241124 14:28:45.843"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.845" endtime="20241124 14:28:45.845"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.841" endtime="20241124 14:28:45.846"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.847" endtime="20241124 14:28:45.847"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.846" endtime="20241124 14:28:45.847"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.851" endtime="20241124 14:28:45.851"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.847" endtime="20241124 14:28:45.851"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.854" endtime="20241124 14:28:45.854"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.852" endtime="20241124 14:28:45.854"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.855" endtime="20241124 14:28:45.855"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.854" endtime="20241124 14:28:45.856"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.857" endtime="20241124 14:28:45.858"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.858" endtime="20241124 14:28:45.858"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.858" endtime="20241124 14:28:45.858"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.859" endtime="20241124 14:28:45.859"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.859" endtime="20241124 14:28:45.859"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.858" endtime="20241124 14:28:45.859"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.856" endtime="20241124 14:28:45.859"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:45.864" endtime="20241124 14:28:45.864"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.867" endtime="20241124 14:28:45.867"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.859" endtime="20241124 14:28:45.867"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.868" endtime="20241124 14:28:45.868"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.869" endtime="20241124 14:28:45.869"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.869" endtime="20241124 14:28:45.869"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.869" endtime="20241124 14:28:45.869"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.869" endtime="20241124 14:28:45.869"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.868" endtime="20241124 14:28:45.869"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.867" endtime="20241124 14:28:45.869"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:45.874" endtime="20241124 14:28:45.875"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.879" endtime="20241124 14:28:45.879"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.869" endtime="20241124 14:28:45.879"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.881" endtime="20241124 14:28:45.882"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.882" endtime="20241124 14:28:45.882"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.882" endtime="20241124 14:28:45.882"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.883" endtime="20241124 14:28:45.883"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.883" endtime="20241124 14:28:45.883"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.882" endtime="20241124 14:28:45.883"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.880" endtime="20241124 14:28:45.883"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.887" endtime="20241124 14:28:45.887"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.883" endtime="20241124 14:28:45.887"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:28:45.896" endtime="20241124 14:28:45.896"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.896" endtime="20241124 14:28:45.896"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.887" endtime="20241124 14:28:45.896"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.744" endtime="20241124 14:28:45.896"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:45.896" endtime="20241124 14:28:45.897"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:28:45.897" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:28:45.897" endtime="20241124 14:28:45.897"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:28:45.898" endtime="20241124 14:28:45.898"/>
</return>
<msg timestamp="20241124 14:28:45.898" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:28:45.743" endtime="20241124 14:28:45.898"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.900" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:45</msg>
<status status="PASS" starttime="20241124 14:28:45.899" endtime="20241124 14:28:45.900"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.901" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:28:45.900" endtime="20241124 14:28:45.901"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.901" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:28:45.901" endtime="20241124 14:28:45.901"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.902" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.901" endtime="20241124 14:28:45.902"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.902" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:45.902" endtime="20241124 14:28:45.902"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.902" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.902" endtime="20241124 14:28:45.902"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.903" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:28:45.903" endtime="20241124 14:28:45.903"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.904" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:28:45.903" endtime="20241124 14:28:45.904"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:45.904" endtime="20241124 14:28:45.904"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:45.907" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:28:45.906" endtime="20241124 14:28:45.907"/>
</kw>
<msg timestamp="20241124 14:28:45.907" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.906" endtime="20241124 14:28:45.907"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.907" endtime="20241124 14:28:45.908"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.908" endtime="20241124 14:28:45.908"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.908" endtime="20241124 14:28:45.908"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.908" endtime="20241124 14:28:45.908"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.908" endtime="20241124 14:28:45.909"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.908" endtime="20241124 14:28:45.909"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.907" endtime="20241124 14:28:45.910"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.907" endtime="20241124 14:28:45.910"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:45.910" endtime="20241124 14:28:45.910"/>
</return>
<msg timestamp="20241124 14:28:45.910" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.905" endtime="20241124 14:28:45.911"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:45.914" endtime="20241124 14:28:45.914"/>
</kw>
<msg timestamp="20241124 14:28:45.914" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.914" endtime="20241124 14:28:45.914"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.915" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:28:45.915" endtime="20241124 14:28:45.915"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.916" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.916" endtime="20241124 14:28:45.916"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.915" endtime="20241124 14:28:45.916"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.916" endtime="20241124 14:28:45.916"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.916" endtime="20241124 14:28:45.916"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.915" endtime="20241124 14:28:45.916"/>
</if>
<status status="PASS" starttime="20241124 14:28:45.915" endtime="20241124 14:28:45.917"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.914" endtime="20241124 14:28:45.917"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:45.917" endtime="20241124 14:28:45.917"/>
</return>
<msg timestamp="20241124 14:28:45.917" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.913" endtime="20241124 14:28:45.917"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:45.918" endtime="20241124 14:28:45.918"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.918" endtime="20241124 14:28:45.918"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.917" endtime="20241124 14:28:45.918"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.918" endtime="20241124 14:28:45.918"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:45.918" endtime="20241124 14:28:45.918"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.918" endtime="20241124 14:28:45.919"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.919" endtime="20241124 14:28:45.919"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:45.919" endtime="20241124 14:28:45.919"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.919" endtime="20241124 14:28:45.919"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.918" endtime="20241124 14:28:45.919"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.918" endtime="20241124 14:28:45.919"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.918" endtime="20241124 14:28:45.919"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.920" endtime="20241124 14:28:45.920"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.920" endtime="20241124 14:28:45.920"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.920" endtime="20241124 14:28:45.920"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.920" endtime="20241124 14:28:45.920"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.921" endtime="20241124 14:28:45.921"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.920" endtime="20241124 14:28:45.921"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.920" endtime="20241124 14:28:45.921"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.920" endtime="20241124 14:28:45.921"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.919" endtime="20241124 14:28:45.921"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.917" endtime="20241124 14:28:45.921"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.917" endtime="20241124 14:28:45.921"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:45.922" endtime="20241124 14:28:45.922"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.921" endtime="20241124 14:28:45.922"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.921" endtime="20241124 14:28:45.922"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.922" endtime="20241124 14:28:45.922"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.922" endtime="20241124 14:28:45.922"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.922" endtime="20241124 14:28:45.922"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.923" endtime="20241124 14:28:45.923"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.923" endtime="20241124 14:28:45.923"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.923" endtime="20241124 14:28:45.923"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.923" endtime="20241124 14:28:45.923"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.924" endtime="20241124 14:28:45.924"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.924" endtime="20241124 14:28:45.924"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.923" endtime="20241124 14:28:45.924"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.923" endtime="20241124 14:28:45.924"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.922" endtime="20241124 14:28:45.924"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.922" endtime="20241124 14:28:45.924"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.921" endtime="20241124 14:28:45.924"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.921" endtime="20241124 14:28:45.924"/>
</if>
<status status="PASS" starttime="20241124 14:28:45.900" endtime="20241124 14:28:45.924"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.925" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:28:45.925" endtime="20241124 14:28:45.925"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.926" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:45.926" endtime="20241124 14:28:45.926"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.927" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.927" endtime="20241124 14:28:45.927"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.928" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:45.927" endtime="20241124 14:28:45.928"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.928" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:28:45.928" endtime="20241124 14:28:45.928"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.929" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:45.929" endtime="20241124 14:28:45.929"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:45.929" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:28:45.929" endtime="20241124 14:28:45.929"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:45.930" endtime="20241124 14:28:45.930"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:45.933" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:28:45.932" endtime="20241124 14:28:45.933"/>
</kw>
<msg timestamp="20241124 14:28:45.933" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.932" endtime="20241124 14:28:45.933"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.933" endtime="20241124 14:28:45.934"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.934" endtime="20241124 14:28:45.934"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.934" endtime="20241124 14:28:45.934"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.934" endtime="20241124 14:28:45.934"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.934" endtime="20241124 14:28:45.934"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.934" endtime="20241124 14:28:45.934"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.933" endtime="20241124 14:28:45.935"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.933" endtime="20241124 14:28:45.935"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:45.935" endtime="20241124 14:28:45.935"/>
</return>
<msg timestamp="20241124 14:28:45.935" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.931" endtime="20241124 14:28:45.935"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:45.938" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:28:45.937" endtime="20241124 14:28:45.938"/>
</kw>
<msg timestamp="20241124 14:28:45.938" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.937" endtime="20241124 14:28:45.938"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.939" endtime="20241124 14:28:45.939"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.939" endtime="20241124 14:28:45.939"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.939" endtime="20241124 14:28:45.939"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.939" endtime="20241124 14:28:45.940"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.939" endtime="20241124 14:28:45.940"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.939" endtime="20241124 14:28:45.940"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.938" endtime="20241124 14:28:45.940"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.938" endtime="20241124 14:28:45.940"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:45.940" endtime="20241124 14:28:45.940"/>
</return>
<msg timestamp="20241124 14:28:45.940" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:45.936" endtime="20241124 14:28:45.940"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:45.941" endtime="20241124 14:28:45.941"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.941" endtime="20241124 14:28:45.942"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.941" endtime="20241124 14:28:45.942"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.943" endtime="20241124 14:28:45.943"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:45.943" endtime="20241124 14:28:45.943"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.942" endtime="20241124 14:28:45.943"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.943" endtime="20241124 14:28:45.943"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:45.944" endtime="20241124 14:28:45.944"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.943" endtime="20241124 14:28:45.944"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.942" endtime="20241124 14:28:45.944"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.942" endtime="20241124 14:28:45.944"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.942" endtime="20241124 14:28:45.944"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.944" endtime="20241124 14:28:45.945"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.945" endtime="20241124 14:28:45.945"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.944" endtime="20241124 14:28:45.945"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.945" endtime="20241124 14:28:45.945"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.945" endtime="20241124 14:28:45.945"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.945" endtime="20241124 14:28:45.945"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.944" endtime="20241124 14:28:45.945"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.944" endtime="20241124 14:28:45.945"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.944" endtime="20241124 14:28:45.946"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.941" endtime="20241124 14:28:45.946"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.940" endtime="20241124 14:28:45.946"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:45.946" endtime="20241124 14:28:45.946"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.946" endtime="20241124 14:28:45.946"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.946" endtime="20241124 14:28:45.947"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.947" endtime="20241124 14:28:45.947"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.947" endtime="20241124 14:28:45.947"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.947" endtime="20241124 14:28:45.947"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.947" endtime="20241124 14:28:45.948"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.948" endtime="20241124 14:28:45.948"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.948" endtime="20241124 14:28:45.948"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.948" endtime="20241124 14:28:45.948"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.948" endtime="20241124 14:28:45.948"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:45.949" endtime="20241124 14:28:45.949"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:45.948" endtime="20241124 14:28:45.949"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.948" endtime="20241124 14:28:45.949"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.947" endtime="20241124 14:28:45.949"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:45.947" endtime="20241124 14:28:45.949"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:45.946" endtime="20241124 14:28:45.949"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.946" endtime="20241124 14:28:45.949"/>
</if>
<status status="PASS" starttime="20241124 14:28:45.924" endtime="20241124 14:28:45.949"/>
</iter>
<status status="PASS" starttime="20241124 14:28:45.900" endtime="20241124 14:28:45.949"/>
</for>
<msg timestamp="20241124 14:28:45.949" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:28:45.898" endtime="20241124 14:28:45.949"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:45.950" endtime="20241124 14:28:45.951"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:45.953" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '288', 'status': 'COMPLETED', 'actionName': 'Click Profile image icon', 'actionType': 'CLICK', 'actionXpath': 'id=headerProfileImage', 'inputValue': '', 'errorMessage':...</msg>
<status status="PASS" starttime="20241124 14:28:45.952" endtime="20241124 14:28:45.953"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:45.954" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "288", "status": "COMPLETED", "actionName": "Click Profile image icon", "actionType": "CLICK", "actionXpath": "id=headerProfileImage", "inputValue": "", "errorMessage":...</msg>
<status status="PASS" starttime="20241124 14:28:45.954" endtime="20241124 14:28:45.954"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:45.993" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:45.994" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:45.954" endtime="20241124 14:28:45.994"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:45.994" endtime="20241124 14:28:45.995"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:45.995" endtime="20241124 14:28:45.996"/>
</return>
<status status="PASS" starttime="20241124 14:28:45.953" endtime="20241124 14:28:45.996"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.951" endtime="20241124 14:28:45.996"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.740" endtime="20241124 14:28:45.996"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.997" endtime="20241124 14:28:45.997"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:28:45.997" endtime="20241124 14:28:45.997"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:45.998" endtime="20241124 14:28:45.998"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:45.997" endtime="20241124 14:28:45.998"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.739" endtime="20241124 14:28:45.998"/>
</try>
<status status="PASS" starttime="20241124 14:28:45.739" endtime="20241124 14:28:45.998"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '46', 'actionId': '33', 'flowId': '15', 'order': 1, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.564Z', 'action': {'id': '33', 'name': 'Click Profile Dropdown acti...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.000" level="INFO">${action} = {'id': '33', 'name': 'Click Profile Dropdown action', 'type': 'CLICK', 'xpath': '//p[text()="Profile"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T17:32:01.896Z', 'updatedAt': '2024-...</msg>
<status status="PASS" starttime="20241124 14:28:45.999" endtime="20241124 14:28:46.000"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:46.000" endtime="20241124 14:28:46.001"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:28:46.002" level="INFO">${input} = {'id': '30', 'actionId': '33', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-21T17:32:02.118Z', 'updatedAt': '2024-11-21T17:32:02.118Z'}</msg>
<status status="PASS" starttime="20241124 14:28:46.001" endtime="20241124 14:28:46.002"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.002" endtime="20241124 14:28:46.002"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.003" endtime="20241124 14:28:46.003"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.002" endtime="20241124 14:28:46.003"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.002" endtime="20241124 14:28:46.003"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.004" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:28:46.004" endtime="20241124 14:28:46.004"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:46.005" endtime="20241124 14:28:46.005"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.004" endtime="20241124 14:28:46.005"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:46.005" endtime="20241124 14:28:46.005"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.005" endtime="20241124 14:28:46.005"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:46.021" level="INFO">Waited for Element with selector //p[text()="Profile"] at state attached</msg>
<status status="PASS" starttime="20241124 14:28:46.016" endtime="20241124 14:28:46.021"/>
</kw>
<msg timestamp="20241124 14:28:46.022" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.015" endtime="20241124 14:28:46.022"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:46.022" endtime="20241124 14:28:46.022"/>
</return>
<status status="PASS" starttime="20241124 14:28:46.015" endtime="20241124 14:28:46.022"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.022" endtime="20241124 14:28:46.022"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.022" endtime="20241124 14:28:46.023"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.022" endtime="20241124 14:28:46.023"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.015" endtime="20241124 14:28:46.023"/>
</try>
<msg timestamp="20241124 14:28:46.023" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.014" endtime="20241124 14:28:46.023"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:46.023" endtime="20241124 14:28:46.023"/>
</return>
<status status="PASS" starttime="20241124 14:28:46.013" endtime="20241124 14:28:46.023"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:46.023" endtime="20241124 14:28:46.023"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.023" endtime="20241124 14:28:46.024"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.013" endtime="20241124 14:28:46.024"/>
</try>
<msg timestamp="20241124 14:28:46.024" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.013" endtime="20241124 14:28:46.024"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.027" endtime="20241124 14:28:46.027"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.027" endtime="20241124 14:28:46.027"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.027" endtime="20241124 14:28:46.027"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.026" endtime="20241124 14:28:46.027"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.025" endtime="20241124 14:28:46.028"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.012" endtime="20241124 14:28:46.028"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:46.038" level="INFO">Waited for Element with selector //p[text()="Profile"] at state visible</msg>
<status status="PASS" starttime="20241124 14:28:46.033" endtime="20241124 14:28:46.038"/>
</kw>
<msg timestamp="20241124 14:28:46.039" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.032" endtime="20241124 14:28:46.039"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:46.039" endtime="20241124 14:28:46.039"/>
</return>
<status status="PASS" starttime="20241124 14:28:46.032" endtime="20241124 14:28:46.039"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.039" endtime="20241124 14:28:46.039"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.039" endtime="20241124 14:28:46.040"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.039" endtime="20241124 14:28:46.040"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.032" endtime="20241124 14:28:46.040"/>
</try>
<msg timestamp="20241124 14:28:46.040" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.032" endtime="20241124 14:28:46.040"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:46.040" endtime="20241124 14:28:46.040"/>
</return>
<msg timestamp="20241124 14:28:46.040" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.030" endtime="20241124 14:28:46.040"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.043" endtime="20241124 14:28:46.043"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.043" endtime="20241124 14:28:46.043"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.043" endtime="20241124 14:28:46.043"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.042" endtime="20241124 14:28:46.043"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.042" endtime="20241124 14:28:46.043"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.030" endtime="20241124 14:28:46.044"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:46.062" level="INFO">Waited for Element with selector //p[text()="Profile"] at state enabled</msg>
<status status="PASS" starttime="20241124 14:28:46.048" endtime="20241124 14:28:46.062"/>
</kw>
<msg timestamp="20241124 14:28:46.062" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.048" endtime="20241124 14:28:46.062"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:46.062" endtime="20241124 14:28:46.063"/>
</return>
<status status="PASS" starttime="20241124 14:28:46.048" endtime="20241124 14:28:46.063"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.063" endtime="20241124 14:28:46.063"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.063" endtime="20241124 14:28:46.063"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.063" endtime="20241124 14:28:46.063"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.048" endtime="20241124 14:28:46.064"/>
</try>
<msg timestamp="20241124 14:28:46.064" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.047" endtime="20241124 14:28:46.064"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:46.064" endtime="20241124 14:28:46.064"/>
</return>
<msg timestamp="20241124 14:28:46.064" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.046" endtime="20241124 14:28:46.064"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.067" endtime="20241124 14:28:46.067"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.067" endtime="20241124 14:28:46.067"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.067" endtime="20241124 14:28:46.067"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.066" endtime="20241124 14:28:46.067"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.065" endtime="20241124 14:28:46.067"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.046" endtime="20241124 14:28:46.068"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.010" endtime="20241124 14:28:46.068"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:46.068" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:28:46.068" endtime="20241124 14:28:46.068"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.070" endtime="20241124 14:28:46.070"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.070" endtime="20241124 14:28:46.070"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:46.070" endtime="20241124 14:28:46.071"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.070" endtime="20241124 14:28:46.071"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.069" endtime="20241124 14:28:46.071"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241124 14:28:46.071" endtime="20241124 14:28:46.199"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.071" endtime="20241124 14:28:46.199"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.200" endtime="20241124 14:28:46.200"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.200" endtime="20241124 14:28:46.200"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.200" endtime="20241124 14:28:46.200"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.071" endtime="20241124 14:28:46.200"/>
</try>
<status status="PASS" starttime="20241124 14:28:46.069" endtime="20241124 14:28:46.201"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.069" endtime="20241124 14:28:46.201"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.068" endtime="20241124 14:28:46.201"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.201" endtime="20241124 14:28:46.201"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.201" endtime="20241124 14:28:46.201"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.068" endtime="20241124 14:28:46.201"/>
</try>
<status status="PASS" starttime="20241124 14:28:46.008" endtime="20241124 14:28:46.202"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.006" endtime="20241124 14:28:46.202"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.206" endtime="20241124 14:28:46.206"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.210" endtime="20241124 14:28:46.210"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.202" endtime="20241124 14:28:46.210"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.212" endtime="20241124 14:28:46.212"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.210" endtime="20241124 14:28:46.212"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.216" endtime="20241124 14:28:46.216"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.212" endtime="20241124 14:28:46.216"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.218" endtime="20241124 14:28:46.218"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.216" endtime="20241124 14:28:46.219"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.221" endtime="20241124 14:28:46.222"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.219" endtime="20241124 14:28:46.222"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.224" endtime="20241124 14:28:46.224"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.225" endtime="20241124 14:28:46.226"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.225" endtime="20241124 14:28:46.226"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.227" endtime="20241124 14:28:46.227"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.226" endtime="20241124 14:28:46.227"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.224" endtime="20241124 14:28:46.227"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.222" endtime="20241124 14:28:46.228"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:46.240" endtime="20241124 14:28:46.240"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.250" endtime="20241124 14:28:46.250"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.228" endtime="20241124 14:28:46.250"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.253" endtime="20241124 14:28:46.253"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.254" endtime="20241124 14:28:46.254"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.253" endtime="20241124 14:28:46.254"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.255" endtime="20241124 14:28:46.255"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.254" endtime="20241124 14:28:46.255"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.253" endtime="20241124 14:28:46.255"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.251" endtime="20241124 14:28:46.255"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:46.270" endtime="20241124 14:28:46.270"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.278" endtime="20241124 14:28:46.279"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.256" endtime="20241124 14:28:46.279"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.282" endtime="20241124 14:28:46.283"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.283" endtime="20241124 14:28:46.284"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.283" endtime="20241124 14:28:46.284"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.284" endtime="20241124 14:28:46.284"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.284" endtime="20241124 14:28:46.284"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.283" endtime="20241124 14:28:46.284"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.279" endtime="20241124 14:28:46.284"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.287" endtime="20241124 14:28:46.288"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.284" endtime="20241124 14:28:46.288"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:28:46.303" endtime="20241124 14:28:46.303"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.303" endtime="20241124 14:28:46.304"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.288" endtime="20241124 14:28:46.304"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.004" endtime="20241124 14:28:46.304"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:46.304" endtime="20241124 14:28:46.305"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:28:46.305" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:28:46.305" endtime="20241124 14:28:46.305"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:28:46.306" endtime="20241124 14:28:46.306"/>
</return>
<msg timestamp="20241124 14:28:46.306" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:28:46.003" endtime="20241124 14:28:46.306"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.309" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:46</msg>
<status status="PASS" starttime="20241124 14:28:46.308" endtime="20241124 14:28:46.310"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.315" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:28:46.314" endtime="20241124 14:28:46.315"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.316" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:28:46.315" endtime="20241124 14:28:46.316"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.317" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.316" endtime="20241124 14:28:46.317"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.319" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:46.317" endtime="20241124 14:28:46.319"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.320" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.320" endtime="20241124 14:28:46.320"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.322" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:28:46.321" endtime="20241124 14:28:46.322"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.323" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:28:46.322" endtime="20241124 14:28:46.323"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:46.323" endtime="20241124 14:28:46.323"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:46.334" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:28:46.330" endtime="20241124 14:28:46.334"/>
</kw>
<msg timestamp="20241124 14:28:46.334" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.330" endtime="20241124 14:28:46.335"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.336" endtime="20241124 14:28:46.336"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.338" endtime="20241124 14:28:46.339"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.337" endtime="20241124 14:28:46.339"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.340" endtime="20241124 14:28:46.340"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.340" endtime="20241124 14:28:46.340"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.337" endtime="20241124 14:28:46.341"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.336" endtime="20241124 14:28:46.341"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.335" endtime="20241124 14:28:46.341"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:46.341" endtime="20241124 14:28:46.341"/>
</return>
<msg timestamp="20241124 14:28:46.341" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.328" endtime="20241124 14:28:46.341"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:46.350" endtime="20241124 14:28:46.350"/>
</kw>
<msg timestamp="20241124 14:28:46.351" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.348" endtime="20241124 14:28:46.351"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.353" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:28:46.352" endtime="20241124 14:28:46.353"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.357" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.355" endtime="20241124 14:28:46.357"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.354" endtime="20241124 14:28:46.357"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.359" endtime="20241124 14:28:46.360"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.357" endtime="20241124 14:28:46.360"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.353" endtime="20241124 14:28:46.360"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.351" endtime="20241124 14:28:46.360"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.351" endtime="20241124 14:28:46.360"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:46.361" endtime="20241124 14:28:46.362"/>
</return>
<msg timestamp="20241124 14:28:46.363" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.347" endtime="20241124 14:28:46.363"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:46.366" endtime="20241124 14:28:46.366"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.366" endtime="20241124 14:28:46.366"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.365" endtime="20241124 14:28:46.366"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.368" endtime="20241124 14:28:46.368"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:46.368" endtime="20241124 14:28:46.368"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.367" endtime="20241124 14:28:46.368"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.369" endtime="20241124 14:28:46.369"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:46.369" endtime="20241124 14:28:46.369"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.369" endtime="20241124 14:28:46.370"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.367" endtime="20241124 14:28:46.370"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.367" endtime="20241124 14:28:46.370"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.367" endtime="20241124 14:28:46.371"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.373" endtime="20241124 14:28:46.373"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.373" endtime="20241124 14:28:46.374"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.373" endtime="20241124 14:28:46.374"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.375" endtime="20241124 14:28:46.375"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.376" endtime="20241124 14:28:46.376"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.374" endtime="20241124 14:28:46.376"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.373" endtime="20241124 14:28:46.376"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.373" endtime="20241124 14:28:46.377"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.371" endtime="20241124 14:28:46.377"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.365" endtime="20241124 14:28:46.377"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.364" endtime="20241124 14:28:46.378"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:46.381" endtime="20241124 14:28:46.381"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.381" endtime="20241124 14:28:46.381"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.381" endtime="20241124 14:28:46.382"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.382" endtime="20241124 14:28:46.383"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.382" endtime="20241124 14:28:46.383"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.382" endtime="20241124 14:28:46.383"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.384" endtime="20241124 14:28:46.384"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.385" endtime="20241124 14:28:46.385"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.385" endtime="20241124 14:28:46.385"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.384" endtime="20241124 14:28:46.386"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.386" endtime="20241124 14:28:46.386"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.386" endtime="20241124 14:28:46.387"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.386" endtime="20241124 14:28:46.387"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.384" endtime="20241124 14:28:46.387"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.383" endtime="20241124 14:28:46.387"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.383" endtime="20241124 14:28:46.387"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.380" endtime="20241124 14:28:46.387"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.378" endtime="20241124 14:28:46.387"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.313" endtime="20241124 14:28:46.388"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.390" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:28:46.389" endtime="20241124 14:28:46.390"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.392" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:46.391" endtime="20241124 14:28:46.392"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.392" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.392" endtime="20241124 14:28:46.392"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.393" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:46.393" endtime="20241124 14:28:46.393"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.394" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.393" endtime="20241124 14:28:46.394"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.396" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:46.395" endtime="20241124 14:28:46.396"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.396" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:28:46.396" endtime="20241124 14:28:46.396"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:46.397" endtime="20241124 14:28:46.397"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:46.401" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:28:46.400" endtime="20241124 14:28:46.401"/>
</kw>
<msg timestamp="20241124 14:28:46.401" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.400" endtime="20241124 14:28:46.401"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.403" endtime="20241124 14:28:46.403"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.405" endtime="20241124 14:28:46.406"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.405" endtime="20241124 14:28:46.406"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.407" endtime="20241124 14:28:46.408"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.407" endtime="20241124 14:28:46.408"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.404" endtime="20241124 14:28:46.408"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.402" endtime="20241124 14:28:46.409"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.402" endtime="20241124 14:28:46.409"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:46.409" endtime="20241124 14:28:46.410"/>
</return>
<msg timestamp="20241124 14:28:46.413" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.399" endtime="20241124 14:28:46.413"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:46.421" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:28:46.419" endtime="20241124 14:28:46.422"/>
</kw>
<msg timestamp="20241124 14:28:46.422" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.418" endtime="20241124 14:28:46.422"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.424" endtime="20241124 14:28:46.425"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.426" endtime="20241124 14:28:46.426"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.425" endtime="20241124 14:28:46.427"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.428" endtime="20241124 14:28:46.428"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.428" endtime="20241124 14:28:46.429"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.425" endtime="20241124 14:28:46.429"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.423" endtime="20241124 14:28:46.429"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.423" endtime="20241124 14:28:46.429"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:46.429" endtime="20241124 14:28:46.430"/>
</return>
<msg timestamp="20241124 14:28:46.430" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.417" endtime="20241124 14:28:46.431"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:46.432" endtime="20241124 14:28:46.432"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.432" endtime="20241124 14:28:46.433"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.432" endtime="20241124 14:28:46.433"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.434" endtime="20241124 14:28:46.434"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:46.435" endtime="20241124 14:28:46.435"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.434" endtime="20241124 14:28:46.435"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.436" endtime="20241124 14:28:46.436"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:46.436" endtime="20241124 14:28:46.436"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.435" endtime="20241124 14:28:46.436"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.433" endtime="20241124 14:28:46.437"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.433" endtime="20241124 14:28:46.437"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.433" endtime="20241124 14:28:46.437"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.438" endtime="20241124 14:28:46.438"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.439" endtime="20241124 14:28:46.439"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.438" endtime="20241124 14:28:46.439"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.439" endtime="20241124 14:28:46.440"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.440" endtime="20241124 14:28:46.440"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.439" endtime="20241124 14:28:46.440"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.438" endtime="20241124 14:28:46.440"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.437" endtime="20241124 14:28:46.441"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.437" endtime="20241124 14:28:46.443"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.432" endtime="20241124 14:28:46.443"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.431" endtime="20241124 14:28:46.443"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:46.445" endtime="20241124 14:28:46.445"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.445" endtime="20241124 14:28:46.446"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.445" endtime="20241124 14:28:46.446"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.447" endtime="20241124 14:28:46.447"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.446" endtime="20241124 14:28:46.447"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.446" endtime="20241124 14:28:46.447"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.448" endtime="20241124 14:28:46.448"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.449" endtime="20241124 14:28:46.449"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.449" endtime="20241124 14:28:46.450"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.449" endtime="20241124 14:28:46.450"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.450" endtime="20241124 14:28:46.451"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.451" endtime="20241124 14:28:46.451"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.450" endtime="20241124 14:28:46.451"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.449" endtime="20241124 14:28:46.451"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.448" endtime="20241124 14:28:46.452"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.448" endtime="20241124 14:28:46.452"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.445" endtime="20241124 14:28:46.452"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.444" endtime="20241124 14:28:46.452"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.389" endtime="20241124 14:28:46.452"/>
</iter>
<status status="PASS" starttime="20241124 14:28:46.312" endtime="20241124 14:28:46.453"/>
</for>
<msg timestamp="20241124 14:28:46.456" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:28:46.306" endtime="20241124 14:28:46.456"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:46.456" endtime="20241124 14:28:46.457"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:46.465" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '289', 'status': 'COMPLETED', 'actionName': 'Click Profile Dropdown action', 'actionType': 'CLICK', 'actionXpath': '//p[text()="Profile"]', 'inputValue': '', 'errorMess...</msg>
<status status="PASS" starttime="20241124 14:28:46.462" endtime="20241124 14:28:46.465"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:46.467" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "289", "status": "COMPLETED", "actionName": "Click Profile Dropdown action", "actionType": "CLICK", "actionXpath": "//p[text()=\"Profile\"]", "inputValue": "", "errorMe...</msg>
<status status="PASS" starttime="20241124 14:28:46.467" endtime="20241124 14:28:46.468"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:46.493" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:46.493" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:46.468" endtime="20241124 14:28:46.493"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:46.494" endtime="20241124 14:28:46.497"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:46.498" endtime="20241124 14:28:46.498"/>
</return>
<status status="PASS" starttime="20241124 14:28:46.466" endtime="20241124 14:28:46.499"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.458" endtime="20241124 14:28:46.500"/>
</kw>
<status status="PASS" starttime="20241124 14:28:45.999" endtime="20241124 14:28:46.500"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.501" endtime="20241124 14:28:46.501"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:28:46.501" endtime="20241124 14:28:46.502"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.502" endtime="20241124 14:28:46.503"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.500" endtime="20241124 14:28:46.503"/>
</branch>
<status status="PASS" starttime="20241124 14:28:45.999" endtime="20241124 14:28:46.503"/>
</try>
<status status="PASS" starttime="20241124 14:28:45.999" endtime="20241124 14:28:46.504"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '47', 'actionId': '34', 'flowId': '15', 'order': 2, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.566Z', 'action': {'id': '34', 'name': 'Is Name heading visible', '...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.513" level="INFO">${action} = {'id': '34', 'name': 'Is Name heading visible', 'type': 'IS_ELEMENT_VISIBLE', 'xpath': '//h4[text()="bharani deepan"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T17:33:53.346Z', 'upd...</msg>
<status status="PASS" starttime="20241124 14:28:46.512" endtime="20241124 14:28:46.514"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:46.514" endtime="20241124 14:28:46.525"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:28:46.530" level="INFO">${input} = {'id': '31', 'actionId': '34', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-21T17:33:53.666Z', 'updatedAt': '2024-11-21T17:33:53.666Z'}</msg>
<status status="PASS" starttime="20241124 14:28:46.527" endtime="20241124 14:28:46.531"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.533" endtime="20241124 14:28:46.534"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.536" endtime="20241124 14:28:46.536"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.533" endtime="20241124 14:28:46.537"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.531" endtime="20241124 14:28:46.537"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.544" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:28:46.540" endtime="20241124 14:28:46.544"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:46.547" endtime="20241124 14:28:46.547"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.546" endtime="20241124 14:28:46.547"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:46.550" endtime="20241124 14:28:46.551"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.549" endtime="20241124 14:28:46.551"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.565" endtime="20241124 14:28:46.565"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.555" endtime="20241124 14:28:46.566"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.573" endtime="20241124 14:28:46.574"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.587" endtime="20241124 14:28:46.587"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.566" endtime="20241124 14:28:46.587"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.599" endtime="20241124 14:28:46.599"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.588" endtime="20241124 14:28:46.599"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.610" endtime="20241124 14:28:46.610"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.600" endtime="20241124 14:28:46.610"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.616" endtime="20241124 14:28:46.616"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.611" endtime="20241124 14:28:46.617"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.620" endtime="20241124 14:28:46.620"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.617" endtime="20241124 14:28:46.621"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.630" endtime="20241124 14:28:46.631"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.632" endtime="20241124 14:28:46.632"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.631" endtime="20241124 14:28:46.632"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.634" endtime="20241124 14:28:46.635"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.633" endtime="20241124 14:28:46.635"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.631" endtime="20241124 14:28:46.635"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.624" endtime="20241124 14:28:46.635"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:46.678" endtime="20241124 14:28:46.678"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.689" endtime="20241124 14:28:46.695"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.636" endtime="20241124 14:28:46.695"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.700" endtime="20241124 14:28:46.702"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.703" endtime="20241124 14:28:46.704"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.703" endtime="20241124 14:28:46.704"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.705" endtime="20241124 14:28:46.705"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.704" endtime="20241124 14:28:46.705"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.703" endtime="20241124 14:28:46.706"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.696" endtime="20241124 14:28:46.706"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:46.728" endtime="20241124 14:28:46.728"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.737" endtime="20241124 14:28:46.738"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.711" endtime="20241124 14:28:46.738"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:46.762" level="INFO">Waited for Element with selector //h4[text()="bharani deepan"] at state attached</msg>
<status status="PASS" starttime="20241124 14:28:46.749" endtime="20241124 14:28:46.762"/>
</kw>
<msg timestamp="20241124 14:28:46.763" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.748" endtime="20241124 14:28:46.763"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:46.763" endtime="20241124 14:28:46.764"/>
</return>
<status status="PASS" starttime="20241124 14:28:46.748" endtime="20241124 14:28:46.764"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.765" endtime="20241124 14:28:46.765"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.766" endtime="20241124 14:28:46.766"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.764" endtime="20241124 14:28:46.766"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.748" endtime="20241124 14:28:46.767"/>
</try>
<msg timestamp="20241124 14:28:46.767" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.747" endtime="20241124 14:28:46.768"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:46.768" endtime="20241124 14:28:46.768"/>
</return>
<status status="PASS" starttime="20241124 14:28:46.745" endtime="20241124 14:28:46.768"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:46.769" endtime="20241124 14:28:46.769"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.769" endtime="20241124 14:28:46.770"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.744" endtime="20241124 14:28:46.770"/>
</try>
<msg timestamp="20241124 14:28:46.771" level="INFO">${value} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.742" endtime="20241124 14:28:46.771"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.774" level="INFO">${value} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:46.773" endtime="20241124 14:28:46.774"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.772" endtime="20241124 14:28:46.775"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.776" endtime="20241124 14:28:46.776"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.775" endtime="20241124 14:28:46.776"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.771" endtime="20241124 14:28:46.776"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.739" endtime="20241124 14:28:46.777"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.785" endtime="20241124 14:28:46.785"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.777" endtime="20241124 14:28:46.786"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:28:46.799" endtime="20241124 14:28:46.799"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.800" endtime="20241124 14:28:46.800"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.786" endtime="20241124 14:28:46.800"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.545" endtime="20241124 14:28:46.801"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:46.801" endtime="20241124 14:28:46.802"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:28:46.804" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:28:46.803" endtime="20241124 14:28:46.805"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:28:46.805" endtime="20241124 14:28:46.805"/>
</return>
<msg timestamp="20241124 14:28:46.806" level="INFO">${value} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:46.538" endtime="20241124 14:28:46.806"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.810" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:28:46.809" endtime="20241124 14:28:46.810"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.813" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:28:46.812" endtime="20241124 14:28:46.813"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.814" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:28:46.814" endtime="20241124 14:28:46.815"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.816" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.815" endtime="20241124 14:28:46.816"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.818" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:46.817" endtime="20241124 14:28:46.818"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.819" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.818" endtime="20241124 14:28:46.819"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.821" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:28:46.820" endtime="20241124 14:28:46.821"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.823" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:28:46.822" endtime="20241124 14:28:46.823"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:46.823" endtime="20241124 14:28:46.825"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:46.836" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:28:46.834" endtime="20241124 14:28:46.836"/>
</kw>
<msg timestamp="20241124 14:28:46.837" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.833" endtime="20241124 14:28:46.837"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.838" endtime="20241124 14:28:46.838"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.839" endtime="20241124 14:28:46.840"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.839" endtime="20241124 14:28:46.841"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.842" endtime="20241124 14:28:46.844"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.841" endtime="20241124 14:28:46.845"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.839" endtime="20241124 14:28:46.845"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.838" endtime="20241124 14:28:46.846"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.837" endtime="20241124 14:28:46.846"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:46.847" endtime="20241124 14:28:46.847"/>
</return>
<msg timestamp="20241124 14:28:46.848" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.831" endtime="20241124 14:28:46.848"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:46.852" endtime="20241124 14:28:46.852"/>
</kw>
<msg timestamp="20241124 14:28:46.852" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.851" endtime="20241124 14:28:46.852"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.854" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:28:46.853" endtime="20241124 14:28:46.854"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.855" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.855" endtime="20241124 14:28:46.855"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.854" endtime="20241124 14:28:46.855"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.856" endtime="20241124 14:28:46.856"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.855" endtime="20241124 14:28:46.856"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.854" endtime="20241124 14:28:46.856"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.853" endtime="20241124 14:28:46.856"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.853" endtime="20241124 14:28:46.856"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:46.856" endtime="20241124 14:28:46.857"/>
</return>
<msg timestamp="20241124 14:28:46.857" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.850" endtime="20241124 14:28:46.858"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:46.860" endtime="20241124 14:28:46.861"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.859" endtime="20241124 14:28:46.861"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.859" endtime="20241124 14:28:46.861"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.862" endtime="20241124 14:28:46.862"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:46.862" endtime="20241124 14:28:46.862"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.862" endtime="20241124 14:28:46.862"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.863" endtime="20241124 14:28:46.863"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:46.863" endtime="20241124 14:28:46.863"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.863" endtime="20241124 14:28:46.863"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.862" endtime="20241124 14:28:46.863"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.861" endtime="20241124 14:28:46.864"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.861" endtime="20241124 14:28:46.864"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.864" endtime="20241124 14:28:46.865"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.865" endtime="20241124 14:28:46.865"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.864" endtime="20241124 14:28:46.865"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.865" endtime="20241124 14:28:46.865"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.866" endtime="20241124 14:28:46.866"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.865" endtime="20241124 14:28:46.866"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.864" endtime="20241124 14:28:46.866"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.864" endtime="20241124 14:28:46.866"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.864" endtime="20241124 14:28:46.866"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.859" endtime="20241124 14:28:46.866"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.858" endtime="20241124 14:28:46.866"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:46.867" endtime="20241124 14:28:46.867"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.867" endtime="20241124 14:28:46.868"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.867" endtime="20241124 14:28:46.868"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.868" endtime="20241124 14:28:46.868"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.868" endtime="20241124 14:28:46.868"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.868" endtime="20241124 14:28:46.869"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.869" endtime="20241124 14:28:46.869"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.870" endtime="20241124 14:28:46.870"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.870" endtime="20241124 14:28:46.870"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.869" endtime="20241124 14:28:46.870"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.871" endtime="20241124 14:28:46.871"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.871" endtime="20241124 14:28:46.871"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.870" endtime="20241124 14:28:46.871"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.869" endtime="20241124 14:28:46.871"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.869" endtime="20241124 14:28:46.871"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.869" endtime="20241124 14:28:46.872"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.867" endtime="20241124 14:28:46.872"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.866" endtime="20241124 14:28:46.872"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.812" endtime="20241124 14:28:46.872"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.873" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:28:46.873" endtime="20241124 14:28:46.873"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.876" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:46.875" endtime="20241124 14:28:46.876"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.878" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.877" endtime="20241124 14:28:46.878"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.879" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:46.879" endtime="20241124 14:28:46.879"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.880" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.879" endtime="20241124 14:28:46.880"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.881" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:46.881" endtime="20241124 14:28:46.881"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.882" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:28:46.882" endtime="20241124 14:28:46.882"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:46.882" endtime="20241124 14:28:46.883"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:46.886" endtime="20241124 14:28:46.887"/>
</kw>
<msg timestamp="20241124 14:28:46.887" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.886" endtime="20241124 14:28:46.887"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.889" level="INFO">${values} = TRUE</msg>
<status status="PASS" starttime="20241124 14:28:46.888" endtime="20241124 14:28:46.889"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.890" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.889" endtime="20241124 14:28:46.890"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.889" endtime="20241124 14:28:46.890"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.890" endtime="20241124 14:28:46.891"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.890" endtime="20241124 14:28:46.891"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.889" endtime="20241124 14:28:46.891"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.888" endtime="20241124 14:28:46.892"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.887" endtime="20241124 14:28:46.892"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:46.892" endtime="20241124 14:28:46.892"/>
</return>
<msg timestamp="20241124 14:28:46.893" level="INFO">${is_source_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:46.885" endtime="20241124 14:28:46.893"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:28:46.898" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:28:46.897" endtime="20241124 14:28:46.898"/>
</kw>
<msg timestamp="20241124 14:28:46.898" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.896" endtime="20241124 14:28:46.898"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.899" endtime="20241124 14:28:46.899"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.900" endtime="20241124 14:28:46.900"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.900" endtime="20241124 14:28:46.900"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.900" endtime="20241124 14:28:46.901"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.900" endtime="20241124 14:28:46.901"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.900" endtime="20241124 14:28:46.901"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.899" endtime="20241124 14:28:46.901"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.899" endtime="20241124 14:28:46.901"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:46.901" endtime="20241124 14:28:46.901"/>
</return>
<msg timestamp="20241124 14:28:46.902" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:28:46.896" endtime="20241124 14:28:46.902"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:46.903" endtime="20241124 14:28:46.903"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.903" endtime="20241124 14:28:46.903"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.903" endtime="20241124 14:28:46.903"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20241124 14:28:46.904" endtime="20241124 14:28:46.905"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="PASS" starttime="20241124 14:28:46.905" endtime="20241124 14:28:46.906"/>
</return>
<status status="PASS" starttime="20241124 14:28:46.904" endtime="20241124 14:28:46.906"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.906" endtime="20241124 14:28:46.906"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:46.906" endtime="20241124 14:28:46.907"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.906" endtime="20241124 14:28:46.907"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.904" endtime="20241124 14:28:46.907"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.904" endtime="20241124 14:28:46.907"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.904" endtime="20241124 14:28:46.907"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.910" endtime="20241124 14:28:46.910"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.911" endtime="20241124 14:28:46.911"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.909" endtime="20241124 14:28:46.911"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.911" endtime="20241124 14:28:46.911"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.912" endtime="20241124 14:28:46.912"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.911" endtime="20241124 14:28:46.912"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.907" endtime="20241124 14:28:46.912"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.907" endtime="20241124 14:28:46.912"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.907" endtime="20241124 14:28:46.912"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.903" endtime="20241124 14:28:46.912"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.902" endtime="20241124 14:28:46.912"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:46.913" endtime="20241124 14:28:46.913"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.913" endtime="20241124 14:28:46.913"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.913" endtime="20241124 14:28:46.913"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.914" endtime="20241124 14:28:46.914"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.913" endtime="20241124 14:28:46.914"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.913" endtime="20241124 14:28:46.914"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.915" endtime="20241124 14:28:46.915"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.915" endtime="20241124 14:28:46.915"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.916" endtime="20241124 14:28:46.916"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.915" endtime="20241124 14:28:46.916"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.916" endtime="20241124 14:28:46.916"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:46.916" endtime="20241124 14:28:46.916"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:46.916" endtime="20241124 14:28:46.917"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.915" endtime="20241124 14:28:46.917"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.914" endtime="20241124 14:28:46.917"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.914" endtime="20241124 14:28:46.917"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:46.913" endtime="20241124 14:28:46.917"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:46.912" endtime="20241124 14:28:46.917"/>
</if>
<status status="PASS" starttime="20241124 14:28:46.873" endtime="20241124 14:28:46.917"/>
</iter>
<status status="PASS" starttime="20241124 14:28:46.811" endtime="20241124 14:28:46.917"/>
</for>
<msg timestamp="20241124 14:28:46.918" level="INFO">${assertion_message} = Assertion passed: TRUE == TRUE</msg>
<status status="PASS" starttime="20241124 14:28:46.806" endtime="20241124 14:28:46.918"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:46.918" endtime="20241124 14:28:46.919"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:46.925" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '290', 'status': 'COMPLETED', 'actionName': 'Is Name heading visible', 'actionType': 'IS_ELEMENT_VISIBLE', 'actionXpath': '//h4[text()="bharani deepan"]', 'inputValue':...</msg>
<status status="PASS" starttime="20241124 14:28:46.922" endtime="20241124 14:28:46.925"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:46.928" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "290", "status": "COMPLETED", "actionName": "Is Name heading visible", "actionType": "IS_ELEMENT_VISIBLE", "actionXpath": "//h4[text()=\"bharani deepan\"]", "inputValue...</msg>
<status status="PASS" starttime="20241124 14:28:46.927" endtime="20241124 14:28:46.928"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:46.933" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:46.933" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:46.928" endtime="20241124 14:28:46.933"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:46.933" endtime="20241124 14:28:46.934"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:46.935" endtime="20241124 14:28:46.935"/>
</return>
<status status="PASS" starttime="20241124 14:28:46.926" endtime="20241124 14:28:46.936"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.919" endtime="20241124 14:28:46.936"/>
</kw>
<status status="PASS" starttime="20241124 14:28:46.511" endtime="20241124 14:28:46.936"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.937" endtime="20241124 14:28:46.938"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:28:46.938" endtime="20241124 14:28:46.939"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.940" endtime="20241124 14:28:46.940"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.937" endtime="20241124 14:28:46.940"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.507" endtime="20241124 14:28:46.941"/>
</try>
<status status="PASS" starttime="20241124 14:28:46.506" endtime="20241124 14:28:46.941"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '52', 'actionId': '35', 'flowId': '15', 'order': 3, 'createdAt': '2024-11-24T06:43:12.545Z', 'updatedAt': '2024-11-24T06:43:12.545Z', 'action': {'id': '35', 'name': 'Get email id', 'type': 'GET...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.944" level="INFO">${action} = {'id': '35', 'name': 'Get email id', 'type': 'GET_TEXT', 'xpath': '//p[text()="EMAIL"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-23T19:18:23.510Z', 'updatedAt': '2024-11-24T08:38:42.2...</msg>
<status status="PASS" starttime="20241124 14:28:46.943" endtime="20241124 14:28:46.944"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:46.944" endtime="20241124 14:28:46.945"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:28:46.947" level="INFO">${input} = {'id': '32', 'actionId': '35', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-23T19:18:23.679Z', 'updatedAt': '2024-11-23T19:18:23.679Z'}</msg>
<status status="PASS" starttime="20241124 14:28:46.945" endtime="20241124 14:28:46.947"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.949" endtime="20241124 14:28:46.949"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:46.949" endtime="20241124 14:28:46.950"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:46.948" endtime="20241124 14:28:46.950"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.948" endtime="20241124 14:28:46.950"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:46.953" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:28:46.952" endtime="20241124 14:28:46.954"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:47.004" endtime="20241124 14:28:47.004"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.003" endtime="20241124 14:28:47.004"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:47.005" endtime="20241124 14:28:47.006"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.005" endtime="20241124 14:28:47.006"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.014" endtime="20241124 14:28:47.015"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.006" endtime="20241124 14:28:47.015"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.022" endtime="20241124 14:28:47.022"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.044" endtime="20241124 14:28:47.044"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.016" endtime="20241124 14:28:47.045"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.063" endtime="20241124 14:28:47.063"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.045" endtime="20241124 14:28:47.063"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.069" endtime="20241124 14:28:47.070"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.064" endtime="20241124 14:28:47.070"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.076" endtime="20241124 14:28:47.076"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.070" endtime="20241124 14:28:47.077"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.080" endtime="20241124 14:28:47.080"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.077" endtime="20241124 14:28:47.080"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.083" endtime="20241124 14:28:47.083"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.084" endtime="20241124 14:28:47.084"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.084" endtime="20241124 14:28:47.085"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.085" endtime="20241124 14:28:47.085"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.085" endtime="20241124 14:28:47.085"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:47.084" endtime="20241124 14:28:47.085"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:47.081" endtime="20241124 14:28:47.086"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:47.100" endtime="20241124 14:28:47.100"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.108" endtime="20241124 14:28:47.109"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.086" endtime="20241124 14:28:47.109"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.112" endtime="20241124 14:28:47.112"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.113" endtime="20241124 14:28:47.113"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.112" endtime="20241124 14:28:47.113"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.113" endtime="20241124 14:28:47.113"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.113" endtime="20241124 14:28:47.114"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:47.112" endtime="20241124 14:28:47.114"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:47.109" endtime="20241124 14:28:47.114"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:47.126" endtime="20241124 14:28:47.126"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.133" endtime="20241124 14:28:47.133"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.114" endtime="20241124 14:28:47.133"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.137" endtime="20241124 14:28:47.137"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.138" endtime="20241124 14:28:47.138"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.137" endtime="20241124 14:28:47.138"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.139" endtime="20241124 14:28:47.139"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.138" endtime="20241124 14:28:47.139"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:47.137" endtime="20241124 14:28:47.139"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:47.134" endtime="20241124 14:28:47.139"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:28:47.172" level="INFO">Waited for Element with selector //p[text()="EMAIL"] at state attached</msg>
<status status="PASS" starttime="20241124 14:28:47.162" endtime="20241124 14:28:47.172"/>
</kw>
<msg timestamp="20241124 14:28:47.173" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:47.161" endtime="20241124 14:28:47.173"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:47.173" endtime="20241124 14:28:47.174"/>
</return>
<status status="PASS" starttime="20241124 14:28:47.160" endtime="20241124 14:28:47.174"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.175" endtime="20241124 14:28:47.175"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.176" endtime="20241124 14:28:47.177"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.174" endtime="20241124 14:28:47.177"/>
</branch>
<status status="PASS" starttime="20241124 14:28:47.160" endtime="20241124 14:28:47.177"/>
</try>
<msg timestamp="20241124 14:28:47.178" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:28:47.158" endtime="20241124 14:28:47.178"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:28:47.178" endtime="20241124 14:28:47.178"/>
</return>
<status status="PASS" starttime="20241124 14:28:47.155" endtime="20241124 14:28:47.178"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:28:47.179" endtime="20241124 14:28:47.179"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:47.179" endtime="20241124 14:28:47.179"/>
</branch>
<status status="PASS" starttime="20241124 14:28:47.154" endtime="20241124 14:28:47.179"/>
</try>
<msg timestamp="20241124 14:28:47.180" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:28:47.153" endtime="20241124 14:28:47.180"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.185" endtime="20241124 14:28:47.185"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.186" endtime="20241124 14:28:47.186"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.185" endtime="20241124 14:28:47.186"/>
</branch>
<status status="PASS" starttime="20241124 14:28:47.184" endtime="20241124 14:28:47.186"/>
</if>
<status status="PASS" starttime="20241124 14:28:47.182" endtime="20241124 14:28:47.187"/>
</kw>
<status status="PASS" starttime="20241124 14:28:47.152" endtime="20241124 14:28:47.187"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:28:47.219" level="INFO">Property: 'EMAIL'</msg>
<msg timestamp="20241124 14:28:47.220" level="INFO">${property} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:28:47.188" endtime="20241124 14:28:47.220"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:28:47.220" endtime="20241124 14:28:47.220"/>
</return>
<status status="PASS" starttime="20241124 14:28:47.187" endtime="20241124 14:28:47.221"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.222" endtime="20241124 14:28:47.222"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.223" endtime="20241124 14:28:47.223"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.221" endtime="20241124 14:28:47.223"/>
</branch>
<status status="PASS" starttime="20241124 14:28:47.187" endtime="20241124 14:28:47.223"/>
</try>
<msg timestamp="20241124 14:28:47.225" level="INFO">${value} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:28:47.145" endtime="20241124 14:28:47.225"/>
</kw>
<status status="PASS" starttime="20241124 14:28:47.139" endtime="20241124 14:28:47.225"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:28:47.249" endtime="20241124 14:28:47.249"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.250" endtime="20241124 14:28:47.250"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.226" endtime="20241124 14:28:47.251"/>
</branch>
<status status="PASS" starttime="20241124 14:28:46.955" endtime="20241124 14:28:47.251"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:47.252" endtime="20241124 14:28:47.253"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:28:47.255" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:28:47.254" endtime="20241124 14:28:47.255"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:28:47.256" endtime="20241124 14:28:47.256"/>
</return>
<msg timestamp="20241124 14:28:47.258" level="INFO">${value} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:28:46.950" endtime="20241124 14:28:47.258"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:47.262" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:28:47.262" endtime="20241124 14:28:47.263"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:47.266" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:28:47.265" endtime="20241124 14:28:47.266"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:47.270" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:28:47.268" endtime="20241124 14:28:47.270"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:47.272" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:28:47.271" endtime="20241124 14:28:47.272"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:47.274" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:28:47.273" endtime="20241124 14:28:47.274"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:47.276" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:28:47.275" endtime="20241124 14:28:47.277"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:47.279" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:28:47.277" endtime="20241124 14:28:47.279"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:47.281" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:28:47.280" endtime="20241124 14:28:47.281"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:47.281" endtime="20241124 14:28:47.283"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:47.289" endtime="20241124 14:28:47.289"/>
</kw>
<msg timestamp="20241124 14:28:47.289" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:47.288" endtime="20241124 14:28:47.290"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:47.292" level="INFO">${values} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:28:47.291" endtime="20241124 14:28:47.292"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:47.295" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:47.295" endtime="20241124 14:28:47.295"/>
</kw>
<status status="PASS" starttime="20241124 14:28:47.293" endtime="20241124 14:28:47.295"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.296" endtime="20241124 14:28:47.296"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.295" endtime="20241124 14:28:47.296"/>
</branch>
<status status="PASS" starttime="20241124 14:28:47.292" endtime="20241124 14:28:47.296"/>
</if>
<status status="PASS" starttime="20241124 14:28:47.290" endtime="20241124 14:28:47.297"/>
</branch>
<status status="PASS" starttime="20241124 14:28:47.290" endtime="20241124 14:28:47.297"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:47.297" endtime="20241124 14:28:47.298"/>
</return>
<msg timestamp="20241124 14:28:47.298" level="INFO">${is_source_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:47.287" endtime="20241124 14:28:47.298"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:47.303" endtime="20241124 14:28:47.304"/>
</kw>
<msg timestamp="20241124 14:28:47.304" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:47.302" endtime="20241124 14:28:47.304"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:47.306" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:28:47.305" endtime="20241124 14:28:47.306"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:47.309" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:47.308" endtime="20241124 14:28:47.309"/>
</kw>
<status status="PASS" starttime="20241124 14:28:47.307" endtime="20241124 14:28:47.309"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.311" endtime="20241124 14:28:47.311"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.310" endtime="20241124 14:28:47.312"/>
</branch>
<status status="PASS" starttime="20241124 14:28:47.306" endtime="20241124 14:28:47.312"/>
</if>
<status status="PASS" starttime="20241124 14:28:47.305" endtime="20241124 14:28:47.312"/>
</branch>
<status status="PASS" starttime="20241124 14:28:47.304" endtime="20241124 14:28:47.313"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:47.313" endtime="20241124 14:28:47.313"/>
</return>
<msg timestamp="20241124 14:28:47.314" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:47.301" endtime="20241124 14:28:47.315"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:47.317" endtime="20241124 14:28:47.318"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:47.317" endtime="20241124 14:28:47.319"/>
</branch>
<status status="PASS" starttime="20241124 14:28:47.316" endtime="20241124 14:28:47.319"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.321" endtime="20241124 14:28:47.322"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:47.322" endtime="20241124 14:28:47.322"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:47.321" endtime="20241124 14:28:47.323"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.324" endtime="20241124 14:28:47.324"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:28:47.324" endtime="20241124 14:28:47.324"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:47.323" endtime="20241124 14:28:47.324"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:47.320" endtime="20241124 14:28:47.325"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:47.320" endtime="20241124 14:28:47.325"/>
</branch>
<status status="PASS" starttime="20241124 14:28:47.319" endtime="20241124 14:28:47.325"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<msg timestamp="20241124 14:28:47.329" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:28:47.326" endtime="20241124 14:28:47.330"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:47.331" endtime="20241124 14:28:47.332"/>
</return>
<status status="FAIL" starttime="20241124 14:28:47.326" endtime="20241124 14:28:47.332"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.333" endtime="20241124 14:28:47.333"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:28:47.333" endtime="20241124 14:28:47.333"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:47.332" endtime="20241124 14:28:47.333"/>
</branch>
<status status="FAIL" starttime="20241124 14:28:47.326" endtime="20241124 14:28:47.334"/>
</if>
<status status="FAIL" starttime="20241124 14:28:47.325" endtime="20241124 14:28:47.335"/>
</branch>
<status status="FAIL" starttime="20241124 14:28:47.325" endtime="20241124 14:28:47.336"/>
</if>
<status status="FAIL" starttime="20241124 14:28:47.316" endtime="20241124 14:28:47.337"/>
</branch>
<status status="FAIL" starttime="20241124 14:28:47.315" endtime="20241124 14:28:47.337"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:28:47.338" endtime="20241124 14:28:47.339"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:47.338" endtime="20241124 14:28:47.339"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:47.338" endtime="20241124 14:28:47.339"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.340" endtime="20241124 14:28:47.341"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.339" endtime="20241124 14:28:47.341"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:47.339" endtime="20241124 14:28:47.342"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.343" endtime="20241124 14:28:47.343"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.344" endtime="20241124 14:28:47.345"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:47.345" endtime="20241124 14:28:47.346"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:47.344" endtime="20241124 14:28:47.346"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.346" endtime="20241124 14:28:47.347"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:28:47.347" endtime="20241124 14:28:47.347"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:47.346" endtime="20241124 14:28:47.347"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:47.343" endtime="20241124 14:28:47.348"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:47.342" endtime="20241124 14:28:47.348"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:47.342" endtime="20241124 14:28:47.348"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:47.338" endtime="20241124 14:28:47.348"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:47.338" endtime="20241124 14:28:47.348"/>
</if>
<status status="FAIL" starttime="20241124 14:28:47.264" endtime="20241124 14:28:47.348"/>
</iter>
<status status="FAIL" starttime="20241124 14:28:47.263" endtime="20241124 14:28:47.349"/>
</for>
<status status="FAIL" starttime="20241124 14:28:47.259" endtime="20241124 14:28:47.351"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.352" endtime="20241124 14:28:47.352"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<status status="NOT RUN" starttime="20241124 14:28:47.353" endtime="20241124 14:28:47.353"/>
</kw>
<status status="FAIL" starttime="20241124 14:28:46.942" endtime="20241124 14:28:47.353"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:47.354" endtime="20241124 14:28:47.355"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:47.360" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '291', 'status': 'FAILED', 'actionName': 'Get email id', 'actionType': 'GET_TEXT', 'actionXpath': '//p[text()="EMAIL"]', 'inputValue': '', 'errorMessage': 'Email mismat...</msg>
<status status="PASS" starttime="20241124 14:28:47.358" endtime="20241124 14:28:47.361"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:47.363" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "291", "status": "FAILED", "actionName": "Get email id", "actionType": "GET_TEXT", "actionXpath": "//p[text()=\"EMAIL\"]", "inputValue": "", "errorMessage": "Email mism...</msg>
<status status="PASS" starttime="20241124 14:28:47.362" endtime="20241124 14:28:47.363"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:47.405" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:47.405" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:47.364" endtime="20241124 14:28:47.405"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:47.406" endtime="20241124 14:28:47.408"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:47.408" endtime="20241124 14:28:47.409"/>
</return>
<status status="PASS" starttime="20241124 14:28:47.361" endtime="20241124 14:28:47.410"/>
</kw>
<status status="PASS" starttime="20241124 14:28:47.355" endtime="20241124 14:28:47.411"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Error occurred:${exception}===&gt;</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:47.413" endtime="20241124 14:28:47.414"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>${exception}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20241124 14:28:47.416" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:28:47.415" endtime="20241124 14:28:47.417"/>
</kw>
<status status="FAIL" starttime="20241124 14:28:47.412" endtime="20241124 14:28:47.419"/>
</kw>
<status status="FAIL" starttime="20241124 14:28:47.353" endtime="20241124 14:28:47.419"/>
</branch>
<status status="FAIL" starttime="20241124 14:28:46.942" endtime="20241124 14:28:47.419"/>
</try>
<status status="FAIL" starttime="20241124 14:28:46.941" endtime="20241124 14:28:47.420"/>
</iter>
<status status="FAIL" starttime="20241124 14:28:45.739" endtime="20241124 14:28:47.421"/>
</for>
<status status="FAIL" starttime="20241124 14:28:45.739" endtime="20241124 14:28:47.421"/>
</branch>
<status status="FAIL" starttime="20241124 14:28:45.739" endtime="20241124 14:28:47.422"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<status status="NOT RUN" starttime="20241124 14:28:47.422" endtime="20241124 14:28:47.423"/>
</kw>
<status status="FAIL" starttime="20241124 14:28:45.727" endtime="20241124 14:28:47.423"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:47.424" endtime="20241124 14:28:47.425"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:47.430" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '78', 'status': 'FAILED', 'errorMessage': 'Email mismatch: EMAIL != bharani@ideas2it.com'}</msg>
<status status="PASS" starttime="20241124 14:28:47.428" endtime="20241124 14:28:47.430"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:47.434" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "78", "status": "FAILED", "errorMessage": "Email mismatch: EMAIL != bharani@ideas2it.com"}</msg>
<status status="PASS" starttime="20241124 14:28:47.432" endtime="20241124 14:28:47.434"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:47.446" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:47.446" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:47.435" endtime="20241124 14:28:47.446"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:47.447" endtime="20241124 14:28:47.448"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:47.448" endtime="20241124 14:28:47.448"/>
</return>
<status status="PASS" starttime="20241124 14:28:47.431" endtime="20241124 14:28:47.449"/>
</kw>
<status status="PASS" starttime="20241124 14:28:47.426" endtime="20241124 14:28:47.449"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Error occurred:${exception}===&gt;</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:47.451" endtime="20241124 14:28:47.453"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>${exception}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20241124 14:28:47.455" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:28:47.453" endtime="20241124 14:28:47.455"/>
</kw>
<status status="FAIL" starttime="20241124 14:28:47.450" endtime="20241124 14:28:47.459"/>
</kw>
<status status="FAIL" starttime="20241124 14:28:47.423" endtime="20241124 14:28:47.460"/>
</branch>
<status status="FAIL" starttime="20241124 14:28:45.727" endtime="20241124 14:28:47.461"/>
</try>
<status status="FAIL" starttime="20241124 14:28:45.726" endtime="20241124 14:28:47.462"/>
</iter>
<status status="FAIL" starttime="20241124 14:28:30.832" endtime="20241124 14:28:47.462"/>
</for>
<status status="FAIL" starttime="20241124 14:28:30.831" endtime="20241124 14:28:47.463"/>
</branch>
<status status="FAIL" starttime="20241124 14:28:30.831" endtime="20241124 14:28:47.463"/>
</if>
<kw name="send-test-case-run-message">
<arg>${testCaseRun}[id]</arg>
<arg>PASS</arg>
<status status="NOT RUN" starttime="20241124 14:28:47.464" endtime="20241124 14:28:47.464"/>
</kw>
<status status="FAIL" starttime="20241124 14:28:30.812" endtime="20241124 14:28:47.465"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:47.465" endtime="20241124 14:28:47.466"/>
</kw>
<kw name="send-test-case-run-message">
<arg>${testCaseRun}[id]</arg>
<arg>FAIL</arg>
<arg>errorMessage=${error_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseRunId=${testCaseRunId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:47.471" level="INFO">${response_message} = {'testCaseRunId': '39', 'status': 'FAIL', 'errorMessage': 'Email mismatch: EMAIL != bharani@ideas2it.com'}</msg>
<status status="PASS" starttime="20241124 14:28:47.469" endtime="20241124 14:28:47.471"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:47.475" level="INFO">${json_response} = {"testCaseRunId": "39", "status": "FAIL", "errorMessage": "Email mismatch: EMAIL != bharani@ideas2it.com"}</msg>
<status status="PASS" starttime="20241124 14:28:47.473" endtime="20241124 14:28:47.475"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:47.483" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:47.484" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:47.476" endtime="20241124 14:28:47.484"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:47.484" endtime="20241124 14:28:47.486"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:47.486" endtime="20241124 14:28:47.486"/>
</return>
<status status="PASS" starttime="20241124 14:28:47.472" endtime="20241124 14:28:47.487"/>
</kw>
<status status="PASS" starttime="20241124 14:28:47.467" endtime="20241124 14:28:47.488"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Error occurred:${exception}===&gt;</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:47.490" endtime="20241124 14:28:47.493"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>${exception}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20241124 14:28:47.496" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:28:47.494" endtime="20241124 14:28:47.496"/>
</kw>
<status status="FAIL" starttime="20241124 14:28:47.488" endtime="20241124 14:28:47.498"/>
</kw>
<status status="FAIL" starttime="20241124 14:28:47.465" endtime="20241124 14:28:47.498"/>
</branch>
<status status="FAIL" starttime="20241124 14:28:30.812" endtime="20241124 14:28:47.499"/>
</try>
<status status="FAIL" starttime="20241124 14:28:30.785" endtime="20241124 14:28:47.499"/>
</branch>
<branch type="ELSE">
<kw name="Log To Console" library="BuiltIn">
<arg>Command type not developed</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:47.500" endtime="20241124 14:28:47.500"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:47.500" endtime="20241124 14:28:47.500"/>
</branch>
<status status="FAIL" starttime="20241124 14:28:30.784" endtime="20241124 14:28:47.501"/>
</if>
<status status="FAIL" starttime="20241124 14:28:30.762" endtime="20241124 14:28:47.502"/>
</kw>
<status status="FAIL" starttime="20241124 14:28:30.762" endtime="20241124 14:28:47.503"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:47.503" endtime="20241124 14:28:47.504"/>
</kw>
<status status="PASS" starttime="20241124 14:28:47.503" endtime="20241124 14:28:47.504"/>
</branch>
<status status="PASS" starttime="20241124 14:28:30.762" endtime="20241124 14:28:47.505"/>
</try>
<kw name="close-browser" library="COMP_BrowserContext">
<try>
<branch type="TRY">
<kw name="Close Browser" library="RPA.Browser.Playwright">
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Closes the current browser.</doc>
<msg timestamp="20241124 14:28:48.181" level="INFO">Closed browser</msg>
<status status="PASS" starttime="20241124 14:28:47.508" endtime="20241124 14:28:48.181"/>
</kw>
<status status="PASS" starttime="20241124 14:28:47.506" endtime="20241124 14:28:48.182"/>
</branch>
<branch type="EXCEPT" variable="${err}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while closing browser: ${err}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:48.182" endtime="20241124 14:28:48.183"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:48.182" endtime="20241124 14:28:48.183"/>
</branch>
<status status="PASS" starttime="20241124 14:28:47.506" endtime="20241124 14:28:48.183"/>
</try>
<status status="PASS" starttime="20241124 14:28:47.505" endtime="20241124 14:28:48.183"/>
</kw>
<status status="PASS" starttime="20241124 14:27:06.564" endtime="20241124 14:28:48.184"/>
</iter>
<iter>
<kw name="launch-browser" library="COMP_BrowserContext">
<kw name="New Browser" library="RPA.Browser.Playwright">
<arg>chromium</arg>
<arg>headless=False</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new playwright Browser with specified options.</doc>
<msg timestamp="20241124 14:28:48.186" level="INFO">{"browser": "chromium", "headless": false, "devtools": false, "handleSIGHUP": true, "handleSIGINT": true, "handleSIGTERM": true, "slowMo": 0.0, "timeout": 30000.0, "deprecated_pos_args": [], "tracesDir": "C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\c4ec4d93-e27e-4263-9536-5c2d1f38cb80"}</msg>
<msg timestamp="20241124 14:28:48.989" level="INFO">Successfully created browser with options: {"browser":"chromium","headless":false,"devtools":false,"handleSIGHUP":true,"handleSIGINT":true,"handleSIGTERM":true,"slowMo":0,"timeout":30000,"deprecated_pos_args":[],"tracesDir":"C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\c4ec4d93-e27e-4263-9536-5c2d1f38cb80"}</msg>
<status status="PASS" starttime="20241124 14:28:48.185" endtime="20241124 14:28:48.989"/>
</kw>
<kw name="New Context" library="RPA.Browser.Playwright">
<arg>viewport={'width': 1280, 'height': 720}</arg>
<arg>acceptDownloads=True</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new BrowserContext with specified options.</doc>
<msg timestamp="20241124 14:28:48.991" level="INFO">{
  "acceptDownloads": true,
  "bypassCSP": false,
  "forcedColors": "none",
  "hideRfBrowser": false,
  "ignoreHTTPSErrors": false,
  "javaScriptEnabled": true,
  "offline": false,
  "reducedMotion": "no-preference",
  "viewport": {
    "width": 1280,
    "height": 720
  },
  "deprecated_pos_args": []
}</msg>
<msg timestamp="20241124 14:28:49.019" level="INFO">Successfully created context. </msg>
<msg timestamp="20241124 14:28:49.019" level="INFO">{'acceptDownloads': True, 'bypassCSP': False, 'forcedColors': 'none', 'hideRfBrowser': False, 'ignoreHTTPSErrors': False, 'javaScriptEnabled': True, 'offline': False, 'reducedMotion': 'no-preference', 'viewport': {'width': 1280, 'height': 720}, 'deprecated_pos_args': []}</msg>
<status status="PASS" starttime="20241124 14:28:48.990" endtime="20241124 14:28:49.019"/>
</kw>
<kw name="Set Browser Timeout" library="RPA.Browser.Playwright">
<arg>${browser_timeout}</arg>
<tag>Config</tag>
<tag>Setter</tag>
<doc>Sets the timeout used by most input and getter keywords.</doc>
<status status="PASS" starttime="20241124 14:28:49.020" endtime="20241124 14:28:49.021"/>
</kw>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>https://www.google.com/</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241124 14:28:53.506" level="INFO">Successfully initialized new page object and opened url: https://www.google.com/</msg>
<msg timestamp="20241124 14:28:53.506" level="INFO">${page_id} = {'page_id': 'page=2f7053e6-3027-4ef2-a30e-789501bf77c3', 'video_path': ''}</msg>
<status status="PASS" starttime="20241124 14:28:49.022" endtime="20241124 14:28:53.506"/>
</kw>
<status status="PASS" starttime="20241124 14:28:48.184" endtime="20241124 14:28:53.506"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Polling message===&gt;</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:53.507" endtime="20241124 14:28:53.507"/>
</kw>
<kw name="Get A Command" library="CommandConsumer">
<var>${json}</var>
<arg>${5}</arg>
<msg timestamp="20241124 14:28:53.528" level="INFO">${json} = {'type': 'START_RUN', 'payload': {'testCaseRun': {'id': '40', 'testCaseId': '27', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-24T08:58:44.786Z', 'createdAt': '2024-11-24T08:58:44.786Z', 'errorMe...</msg>
<status status="PASS" starttime="20241124 14:28:53.508" endtime="20241124 14:28:53.528"/>
</kw>
<if>
<branch type="IF" condition="'${json}[type]' == 'KILL'">
<break>
<status status="NOT RUN" starttime="20241124 14:28:53.529" endtime="20241124 14:28:53.529"/>
</break>
<status status="NOT RUN" starttime="20241124 14:28:53.529" endtime="20241124 14:28:53.529"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.528" endtime="20241124 14:28:53.529"/>
</if>
<try>
<branch type="TRY">
<kw name="execute-test-case">
<arg>${json}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Data=&gt; ${input}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:53.530" endtime="20241124 14:28:53.539"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_type_exists}</var>
<arg>${input}</arg>
<arg>type</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:53.543" endtime="20241124 14:28:53.544"/>
</kw>
<msg timestamp="20241124 14:28:53.544" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.543" endtime="20241124 14:28:53.544"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.545" level="INFO">${values} = START_RUN</msg>
<status status="PASS" starttime="20241124 14:28:53.545" endtime="20241124 14:28:53.545"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.546" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.546" endtime="20241124 14:28:53.546"/>
</kw>
<status status="PASS" starttime="20241124 14:28:53.545" endtime="20241124 14:28:53.546"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:53.546" endtime="20241124 14:28:53.546"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:53.546" endtime="20241124 14:28:53.547"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.545" endtime="20241124 14:28:53.547"/>
</if>
<status status="PASS" starttime="20241124 14:28:53.544" endtime="20241124 14:28:53.547"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.544" endtime="20241124 14:28:53.547"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:53.547" endtime="20241124 14:28:53.547"/>
</return>
<msg timestamp="20241124 14:28:53.547" level="INFO">${is_type_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.542" endtime="20241124 14:28:53.547"/>
</kw>
<if>
<branch type="IF" condition="$is_type_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Type not exists in the input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:53.548" endtime="20241124 14:28:53.548"/>
</kw>
<return>
<status status="NOT RUN" starttime="20241124 14:28:53.548" endtime="20241124 14:28:53.548"/>
</return>
<status status="NOT RUN" starttime="20241124 14:28:53.548" endtime="20241124 14:28:53.548"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.547" endtime="20241124 14:28:53.548"/>
</if>
<if>
<branch type="IF" condition="'${input}[type]' == '${COMMAND_TYPE_START_RUN}'">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCase</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:53.554" endtime="20241124 14:28:53.554"/>
</kw>
<msg timestamp="20241124 14:28:53.554" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.553" endtime="20241124 14:28:53.554"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.555" level="INFO">${values} = {'id': '27', 'name': 'Login positive', 'projectId': '4', 'createdAt': '2024-11-21T16:43:35.118Z', 'updatedAt': '2024-11-24T06:57:13.357Z', 'testCaseFlowSequences': [{'id': '46', 'testCaseId': '27', 'f...</msg>
<status status="PASS" starttime="20241124 14:28:53.555" endtime="20241124 14:28:53.555"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.556" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.556" endtime="20241124 14:28:53.556"/>
</kw>
<status status="PASS" starttime="20241124 14:28:53.556" endtime="20241124 14:28:53.557"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:53.557" endtime="20241124 14:28:53.557"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:53.557" endtime="20241124 14:28:53.557"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.556" endtime="20241124 14:28:53.557"/>
</if>
<status status="PASS" starttime="20241124 14:28:53.554" endtime="20241124 14:28:53.558"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.554" endtime="20241124 14:28:53.558"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:53.558" endtime="20241124 14:28:53.558"/>
</return>
<msg timestamp="20241124 14:28:53.558" level="INFO">${is_test_case_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.552" endtime="20241124 14:28:53.558"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_run_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCaseRun</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:53.562" endtime="20241124 14:28:53.562"/>
</kw>
<msg timestamp="20241124 14:28:53.562" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.561" endtime="20241124 14:28:53.562"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.563" level="INFO">${values} = {'id': '40', 'testCaseId': '27', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-24T08:58:44.786Z', 'createdAt': '2024-11-24T08:58:44.786Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241124 14:28:53.563" endtime="20241124 14:28:53.563"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.564" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.564" endtime="20241124 14:28:53.564"/>
</kw>
<status status="PASS" starttime="20241124 14:28:53.564" endtime="20241124 14:28:53.564"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:53.565" endtime="20241124 14:28:53.565"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:53.565" endtime="20241124 14:28:53.565"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.563" endtime="20241124 14:28:53.565"/>
</if>
<status status="PASS" starttime="20241124 14:28:53.563" endtime="20241124 14:28:53.565"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.562" endtime="20241124 14:28:53.565"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:53.565" endtime="20241124 14:28:53.566"/>
</return>
<msg timestamp="20241124 14:28:53.566" level="INFO">${is_test_case_run_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.561" endtime="20241124 14:28:53.566"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_exists == $False or $is_test_case_run_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Testcase or TestCaseRun data not available in input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:53.567" endtime="20241124 14:28:53.567"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:53.566" endtime="20241124 14:28:53.567"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.566" endtime="20241124 14:28:53.567"/>
</if>
<kw name="Set Variable" library="BuiltIn">
<var>${testCase}</var>
<arg>${input}[payload][testCase]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.568" level="INFO">${testCase} = {'id': '27', 'name': 'Login positive', 'projectId': '4', 'createdAt': '2024-11-21T16:43:35.118Z', 'updatedAt': '2024-11-24T06:57:13.357Z', 'testCaseFlowSequences': [{'id': '46', 'testCaseId': '27', 'f...</msg>
<status status="PASS" starttime="20241124 14:28:53.567" endtime="20241124 14:28:53.568"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${testCaseRun}</var>
<arg>${input}[payload][testCaseRun]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.569" level="INFO">${testCaseRun} = {'id': '40', 'testCaseId': '27', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-24T08:58:44.786Z', 'createdAt': '2024-11-24T08:58:44.786Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241124 14:28:53.568" endtime="20241124 14:28:53.569"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${assertions}</var>
<arg>${testCase}[assertions]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.570" level="INFO">${assertions} = [{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cus...</msg>
<status status="PASS" starttime="20241124 14:28:53.569" endtime="20241124 14:28:53.570"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Name: ${testCase}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:53.570" endtime="20241124 14:28:53.571"/>
</kw>
<try>
<branch type="TRY">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_flow_sequences_exists}</var>
<arg>${testCase}</arg>
<arg>testCaseFlowSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:53.575" endtime="20241124 14:28:53.575"/>
</kw>
<msg timestamp="20241124 14:28:53.575" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.574" endtime="20241124 14:28:53.575"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.576" level="INFO">${values} = [{'id': '46', 'testCaseId': '27', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:35.233Z', 'updatedAt': '2024-11-24T06:57:13.419Z', 'flow': {'id': '14', 'name': 'Login', 'projectId': '4', ...</msg>
<status status="PASS" starttime="20241124 14:28:53.576" endtime="20241124 14:28:53.576"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.577" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.577" endtime="20241124 14:28:53.577"/>
</kw>
<status status="PASS" starttime="20241124 14:28:53.577" endtime="20241124 14:28:53.577"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:53.578" endtime="20241124 14:28:53.578"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:53.577" endtime="20241124 14:28:53.578"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.576" endtime="20241124 14:28:53.578"/>
</if>
<status status="PASS" starttime="20241124 14:28:53.575" endtime="20241124 14:28:53.578"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.575" endtime="20241124 14:28:53.578"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:53.578" endtime="20241124 14:28:53.578"/>
</return>
<msg timestamp="20241124 14:28:53.579" level="INFO">${is_test_case_flow_sequences_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.574" endtime="20241124 14:28:53.579"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${test_case_run_response_message}</var>
<arg>testCaseRunId=${testCaseRun}[id]</arg>
<arg>status=STARTED</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:53.579" level="INFO">${test_case_run_response_message} = {'testCaseRunId': '40', 'status': 'STARTED'}</msg>
<status status="PASS" starttime="20241124 14:28:53.579" endtime="20241124 14:28:53.579"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${test_case_run_response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:28:53.581" level="INFO">${json_response} = {"testCaseRunId": "40", "status": "STARTED"}</msg>
<status status="PASS" starttime="20241124 14:28:53.580" endtime="20241124 14:28:53.581"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:28:53.588" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:28:53.588" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:28:53.581" endtime="20241124 14:28:53.588"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:53.589" endtime="20241124 14:28:53.589"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:28:53.590" endtime="20241124 14:28:53.590"/>
</return>
<status status="PASS" starttime="20241124 14:28:53.580" endtime="20241124 14:28:53.590"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_flow_sequences_exists">
<kw name="Create Dictionary" library="BuiltIn">
<var>${ACCUMULATION}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:28:53.591" level="INFO">${ACCUMULATION} = {}</msg>
<status status="PASS" starttime="20241124 14:28:53.591" endtime="20241124 14:28:53.591"/>
</kw>
<for flavor="IN">
<var>${testCaseFlowSequence}</var>
<value>@{testCase}[testCaseFlowSequences]</value>
<iter>
<var name="${testCaseFlowSequence}">{'id': '46', 'testCaseId': '27', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:35.233Z', 'updatedAt': '2024-11-24T06:57:13.419Z', 'flow': {'id': '14', 'name': 'Login', 'projectId': '4', '...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.593" level="INFO">${flow} = {'id': '14', 'name': 'Login', 'projectId': '4', 'createdAt': '2024-11-21T16:43:09.327Z', 'updatedAt': '2024-11-22T04:20:41.623Z', 'flowActionSequences': [{'id': '41', 'actionId': '28', 'flowId': '14',...</msg>
<status status="PASS" starttime="20241124 14:28:53.592" endtime="20241124 14:28:53.593"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:53.593" endtime="20241124 14:28:53.594"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:28:53.597" endtime="20241124 14:28:53.598"/>
</kw>
<msg timestamp="20241124 14:28:53.598" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.597" endtime="20241124 14:28:53.598"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.599" level="INFO">${values} = [{'id': '41', 'actionId': '28', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:09.645Z', 'updatedAt': '2024-11-22T04:20:41.468Z', 'action': {'id': '28', 'name': 'Launch browser', 'type': '...</msg>
<status status="PASS" starttime="20241124 14:28:53.599" endtime="20241124 14:28:53.599"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.600" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.600" endtime="20241124 14:28:53.601"/>
</kw>
<status status="PASS" starttime="20241124 14:28:53.599" endtime="20241124 14:28:53.601"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:53.602" endtime="20241124 14:28:53.602"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:53.601" endtime="20241124 14:28:53.602"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.599" endtime="20241124 14:28:53.602"/>
</if>
<status status="PASS" starttime="20241124 14:28:53.598" endtime="20241124 14:28:53.602"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.598" endtime="20241124 14:28:53.602"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:28:53.603" endtime="20241124 14:28:53.603"/>
</return>
<msg timestamp="20241124 14:28:53.603" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241124 14:28:53.596" endtime="20241124 14:28:53.603"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '41', 'actionId': '28', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:09.645Z', 'updatedAt': '2024-11-22T04:20:41.468Z', 'action': {'id': '28', 'name': 'Launch browser', 'type': 'L...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.605" level="INFO">${action} = {'id': '28', 'name': 'Launch browser', 'type': 'LAUNCH_BROWSER', 'xpath': '', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:38:00.836Z', 'updatedAt': '2024-11-21T16:38:00.836Z', 'inpu...</msg>
<status status="PASS" starttime="20241124 14:28:53.605" endtime="20241124 14:28:53.605"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:53.606" endtime="20241124 14:28:53.606"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:28:53.607" level="INFO">${input} = {'id': '25', 'actionId': '28', 'name': 'Login page', 'value': 'https://iassistant.ideas2it.com/login', 'waitAfterAction': '1', 'isDefault': True, 'createdAt': '2024-11-21T16:38:01.166Z', 'updatedAt': ...</msg>
<status status="PASS" starttime="20241124 14:28:53.607" endtime="20241124 14:28:53.608"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:28:53.608" endtime="20241124 14:28:53.609"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:53.609" endtime="20241124 14:28:53.609"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:53.608" endtime="20241124 14:28:53.609"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.608" endtime="20241124 14:28:53.609"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:28:53.610" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241124 14:28:53.610" endtime="20241124 14:28:53.610"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>${url}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241124 14:28:59.491" level="INFO">Successfully initialized new page object and opened url: https://iassistant.ideas2it.com/login</msg>
<msg timestamp="20241124 14:28:59.491" level="INFO">${page_id} = {'page_id': 'page=2ea6b0b0-716b-4253-8633-1036c530f5da', 'video_path': ''}</msg>
<status status="PASS" starttime="20241124 14:28:53.612" endtime="20241124 14:28:59.491"/>
</kw>
<kw name="Switch Page" library="RPA.Browser.Playwright">
<arg>${page_id}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Switches the active browser page to another open page by ``id`` or ``NEW``.</doc>
<msg timestamp="20241124 14:28:59.494" level="INFO">Switching to page {'page_id': 'page=2ea6b0b0-716b-4253-8633-1036c530f5da', 'video_path': ''},context CURRENT, browser CURRENT</msg>
<msg timestamp="20241124 14:28:59.557" level="INFO">[
  {
    "type": "chromium",
    "id": "browser=b5ce4678-a964-423c-9973-15e75129301a",
    "contexts": [
      {
        "type": "context",
        "id": "context=b1328a23-bfc4-49d4-a0b2-76bb8a797feb",
        "activePage": "page=2ea6b0b0-716b-4253-8633-1036c530f5da",
        "pages": [
          {
            "type": "page",
            "title": "Google",
            "url": "https://www.google.com/",
            "id": "page=2f7053e6-3027-4ef2-a30e-789501bf77c3",
            "timestamp": 1732438729.358
          },
          {
            "type": "page",
            "title": "iAssistant",
            "url": "https://iassistant.ideas2it.com/login",
            "id": "page=2ea6b0b0-716b-4253-8633-1036c530f5da",
            "timestamp": 1732438733.663
          }
        ]
      }
    ],
    "activeContext": "context=b1328a23-bfc4-49d4-a0b2-76bb8a797feb",
    "activeBrowser": true
  }
]</msg>
<msg timestamp="20241124 14:28:59.591" level="INFO">Successfully changed active page</msg>
<status status="PASS" starttime="20241124 14:28:59.492" endtime="20241124 14:28:59.591"/>
</kw>
<status status="PASS" starttime="20241124 14:28:53.611" endtime="20241124 14:28:59.592"/>
</kw>
<status status="PASS" starttime="20241124 14:28:53.611" endtime="20241124 14:28:59.592"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:28:59.593" endtime="20241124 14:28:59.594"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.593" endtime="20241124 14:28:59.594"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.603" endtime="20241124 14:28:59.603"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.594" endtime="20241124 14:28:59.603"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.610" endtime="20241124 14:28:59.611"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.618" endtime="20241124 14:28:59.618"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.603" endtime="20241124 14:28:59.619"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.622" endtime="20241124 14:28:59.623"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.619" endtime="20241124 14:28:59.623"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.635" endtime="20241124 14:28:59.635"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.623" endtime="20241124 14:28:59.635"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.641" endtime="20241124 14:28:59.641"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.636" endtime="20241124 14:28:59.641"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.643" endtime="20241124 14:28:59.644"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.642" endtime="20241124 14:28:59.644"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.647" endtime="20241124 14:28:59.648"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.649" endtime="20241124 14:28:59.649"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.648" endtime="20241124 14:28:59.649"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.650" endtime="20241124 14:28:59.650"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.650" endtime="20241124 14:28:59.651"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:59.648" endtime="20241124 14:28:59.651"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:59.644" endtime="20241124 14:28:59.651"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:59.668" endtime="20241124 14:28:59.669"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.678" endtime="20241124 14:28:59.678"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.651" endtime="20241124 14:28:59.680"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.685" endtime="20241124 14:28:59.686"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.688" endtime="20241124 14:28:59.689"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.687" endtime="20241124 14:28:59.689"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.690" endtime="20241124 14:28:59.690"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.689" endtime="20241124 14:28:59.690"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:59.686" endtime="20241124 14:28:59.691"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:59.681" endtime="20241124 14:28:59.691"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:28:59.713" endtime="20241124 14:28:59.714"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.723" endtime="20241124 14:28:59.723"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.691" endtime="20241124 14:28:59.723"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.727" endtime="20241124 14:28:59.727"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.728" endtime="20241124 14:28:59.728"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.727" endtime="20241124 14:28:59.728"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.729" endtime="20241124 14:28:59.730"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.729" endtime="20241124 14:28:59.731"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:28:59.727" endtime="20241124 14:28:59.731"/>
</if>
<status status="NOT RUN" starttime="20241124 14:28:59.723" endtime="20241124 14:28:59.731"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.738" endtime="20241124 14:28:59.738"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.732" endtime="20241124 14:28:59.738"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:28:59.755" endtime="20241124 14:28:59.756"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:28:59.756" endtime="20241124 14:28:59.757"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:28:59.738" endtime="20241124 14:28:59.757"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.610" endtime="20241124 14:28:59.757"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:28:59.758" endtime="20241124 14:28:59.759"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:00.762" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241124 14:28:59.760" endtime="20241124 14:29:00.762"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:00.763" endtime="20241124 14:29:00.763"/>
</return>
<msg timestamp="20241124 14:29:00.764" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241124 14:28:53.609" endtime="20241124 14:29:00.765"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.769" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:41</msg>
<status status="PASS" starttime="20241124 14:29:00.768" endtime="20241124 14:29:00.769"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.772" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:00.771" endtime="20241124 14:29:00.772"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.774" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:00.773" endtime="20241124 14:29:00.774"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.775" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:00.774" endtime="20241124 14:29:00.775"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.777" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:00.776" endtime="20241124 14:29:00.777"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.780" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:00.778" endtime="20241124 14:29:00.780"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.781" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:00.780" endtime="20241124 14:29:00.782"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.783" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:00.782" endtime="20241124 14:29:00.784"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:00.784" endtime="20241124 14:29:00.786"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:00.794" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:00.792" endtime="20241124 14:29:00.795"/>
</kw>
<msg timestamp="20241124 14:29:00.796" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:00.792" endtime="20241124 14:29:00.796"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.797" endtime="20241124 14:29:00.798"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.798" endtime="20241124 14:29:00.799"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.798" endtime="20241124 14:29:00.799"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.799" endtime="20241124 14:29:00.800"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.799" endtime="20241124 14:29:00.800"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.798" endtime="20241124 14:29:00.800"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.796" endtime="20241124 14:29:00.800"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.796" endtime="20241124 14:29:00.800"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:00.801" endtime="20241124 14:29:00.801"/>
</return>
<msg timestamp="20241124 14:29:00.801" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:00.790" endtime="20241124 14:29:00.801"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:00.808" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:46::flowActionSequenceId:42'.</msg>
<status status="FAIL" starttime="20241124 14:29:00.806" endtime="20241124 14:29:00.808"/>
</kw>
<msg timestamp="20241124 14:29:00.808" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:00.806" endtime="20241124 14:29:00.808"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.809" endtime="20241124 14:29:00.810"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.810" endtime="20241124 14:29:00.812"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.810" endtime="20241124 14:29:00.812"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.813" endtime="20241124 14:29:00.813"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.812" endtime="20241124 14:29:00.813"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.810" endtime="20241124 14:29:00.813"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.809" endtime="20241124 14:29:00.813"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.808" endtime="20241124 14:29:00.814"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:00.814" endtime="20241124 14:29:00.814"/>
</return>
<msg timestamp="20241124 14:29:00.815" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:00.804" endtime="20241124 14:29:00.815"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:00.816" endtime="20241124 14:29:00.816"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.816" endtime="20241124 14:29:00.816"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.816" endtime="20241124 14:29:00.817"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.818" endtime="20241124 14:29:00.818"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:00.818" endtime="20241124 14:29:00.818"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.817" endtime="20241124 14:29:00.818"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.819" endtime="20241124 14:29:00.819"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:00.820" endtime="20241124 14:29:00.820"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.819" endtime="20241124 14:29:00.820"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.817" endtime="20241124 14:29:00.820"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.817" endtime="20241124 14:29:00.820"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.817" endtime="20241124 14:29:00.820"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.821" endtime="20241124 14:29:00.822"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:00.822" endtime="20241124 14:29:00.822"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.821" endtime="20241124 14:29:00.822"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.822" endtime="20241124 14:29:00.823"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:00.823" endtime="20241124 14:29:00.823"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.822" endtime="20241124 14:29:00.823"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.821" endtime="20241124 14:29:00.823"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.821" endtime="20241124 14:29:00.823"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.821" endtime="20241124 14:29:00.823"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.816" endtime="20241124 14:29:00.824"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.815" endtime="20241124 14:29:00.824"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:00.825" endtime="20241124 14:29:00.825"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.825" endtime="20241124 14:29:00.825"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.825" endtime="20241124 14:29:00.825"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.826" endtime="20241124 14:29:00.826"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.825" endtime="20241124 14:29:00.826"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.825" endtime="20241124 14:29:00.826"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.827" endtime="20241124 14:29:00.827"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.828" endtime="20241124 14:29:00.828"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:00.828" endtime="20241124 14:29:00.828"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.827" endtime="20241124 14:29:00.828"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.829" endtime="20241124 14:29:00.829"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:00.829" endtime="20241124 14:29:00.829"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.828" endtime="20241124 14:29:00.829"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.827" endtime="20241124 14:29:00.829"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.826" endtime="20241124 14:29:00.829"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.826" endtime="20241124 14:29:00.829"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.824" endtime="20241124 14:29:00.830"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.824" endtime="20241124 14:29:00.830"/>
</if>
<status status="PASS" starttime="20241124 14:29:00.770" endtime="20241124 14:29:00.830"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.831" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:00.830" endtime="20241124 14:29:00.831"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.831" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:00.831" endtime="20241124 14:29:00.831"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.832" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:00.832" endtime="20241124 14:29:00.832"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.833" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:00.833" endtime="20241124 14:29:00.833"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.834" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:00.833" endtime="20241124 14:29:00.834"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.834" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:00.834" endtime="20241124 14:29:00.834"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.835" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:00.835" endtime="20241124 14:29:00.835"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:00.835" endtime="20241124 14:29:00.836"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:00.840" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:29:00.839" endtime="20241124 14:29:00.840"/>
</kw>
<msg timestamp="20241124 14:29:00.840" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:00.839" endtime="20241124 14:29:00.840"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.841" endtime="20241124 14:29:00.841"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.841" endtime="20241124 14:29:00.842"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.841" endtime="20241124 14:29:00.842"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.842" endtime="20241124 14:29:00.842"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.842" endtime="20241124 14:29:00.843"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.841" endtime="20241124 14:29:00.843"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.841" endtime="20241124 14:29:00.843"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.840" endtime="20241124 14:29:00.843"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:00.843" endtime="20241124 14:29:00.843"/>
</return>
<msg timestamp="20241124 14:29:00.844" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:00.838" endtime="20241124 14:29:00.844"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:00.849" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:00.848" endtime="20241124 14:29:00.849"/>
</kw>
<msg timestamp="20241124 14:29:00.850" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:00.848" endtime="20241124 14:29:00.850"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.850" endtime="20241124 14:29:00.850"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.851" endtime="20241124 14:29:00.851"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.851" endtime="20241124 14:29:00.851"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.852" endtime="20241124 14:29:00.852"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.852" endtime="20241124 14:29:00.852"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.851" endtime="20241124 14:29:00.852"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.850" endtime="20241124 14:29:00.852"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.850" endtime="20241124 14:29:00.852"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:00.852" endtime="20241124 14:29:00.852"/>
</return>
<msg timestamp="20241124 14:29:00.853" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:00.847" endtime="20241124 14:29:00.853"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:00.854" endtime="20241124 14:29:00.854"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.854" endtime="20241124 14:29:00.854"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.854" endtime="20241124 14:29:00.854"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.855" endtime="20241124 14:29:00.855"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:00.855" endtime="20241124 14:29:00.855"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.854" endtime="20241124 14:29:00.855"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.855" endtime="20241124 14:29:00.856"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:00.856" endtime="20241124 14:29:00.856"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.855" endtime="20241124 14:29:00.856"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.854" endtime="20241124 14:29:00.856"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.854" endtime="20241124 14:29:00.856"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.854" endtime="20241124 14:29:00.856"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.857" endtime="20241124 14:29:00.857"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:00.857" endtime="20241124 14:29:00.857"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.857" endtime="20241124 14:29:00.857"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.857" endtime="20241124 14:29:00.858"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:00.858" endtime="20241124 14:29:00.858"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.857" endtime="20241124 14:29:00.858"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.856" endtime="20241124 14:29:00.858"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.856" endtime="20241124 14:29:00.858"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.856" endtime="20241124 14:29:00.858"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.853" endtime="20241124 14:29:00.858"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.853" endtime="20241124 14:29:00.858"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:00.859" endtime="20241124 14:29:00.859"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.859" endtime="20241124 14:29:00.859"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.859" endtime="20241124 14:29:00.859"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.860" endtime="20241124 14:29:00.860"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.860" endtime="20241124 14:29:00.860"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.860" endtime="20241124 14:29:00.860"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.861" endtime="20241124 14:29:00.861"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.861" endtime="20241124 14:29:00.861"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:00.861" endtime="20241124 14:29:00.861"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.861" endtime="20241124 14:29:00.862"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.863" endtime="20241124 14:29:00.864"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:00.864" endtime="20241124 14:29:00.864"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.863" endtime="20241124 14:29:00.864"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.861" endtime="20241124 14:29:00.865"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.860" endtime="20241124 14:29:00.865"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:00.860" endtime="20241124 14:29:00.865"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:00.859" endtime="20241124 14:29:00.865"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.858" endtime="20241124 14:29:00.865"/>
</if>
<status status="PASS" starttime="20241124 14:29:00.830" endtime="20241124 14:29:00.865"/>
</iter>
<status status="PASS" starttime="20241124 14:29:00.769" endtime="20241124 14:29:00.865"/>
</for>
<msg timestamp="20241124 14:29:00.866" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:29:00.765" endtime="20241124 14:29:00.866"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:00.866" endtime="20241124 14:29:00.867"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:00.871" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '296', 'status': 'COMPLETED', 'actionName': 'Launch browser', 'actionType': 'LAUNCH_BROWSER', 'actionXpath': '', 'inputValue': 'https://iassistant.ideas2it.com/login', ...</msg>
<status status="PASS" starttime="20241124 14:29:00.869" endtime="20241124 14:29:00.871"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:00.873" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "296", "status": "COMPLETED", "actionName": "Launch browser", "actionType": "LAUNCH_BROWSER", "actionXpath": "", "inputValue": "https://iassistant.ideas2it.com/login", ...</msg>
<status status="PASS" starttime="20241124 14:29:00.872" endtime="20241124 14:29:00.873"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:00.893" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:00.893" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:00.873" endtime="20241124 14:29:00.894"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:00.894" endtime="20241124 14:29:00.895"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:00.896" endtime="20241124 14:29:00.896"/>
</return>
<status status="PASS" starttime="20241124 14:29:00.872" endtime="20241124 14:29:00.897"/>
</kw>
<status status="PASS" starttime="20241124 14:29:00.867" endtime="20241124 14:29:00.898"/>
</kw>
<status status="PASS" starttime="20241124 14:28:53.605" endtime="20241124 14:29:00.899"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.900" endtime="20241124 14:29:00.900"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:00.900" endtime="20241124 14:29:00.900"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.901" endtime="20241124 14:29:00.901"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.899" endtime="20241124 14:29:00.901"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.604" endtime="20241124 14:29:00.901"/>
</try>
<status status="PASS" starttime="20241124 14:28:53.604" endtime="20241124 14:29:00.902"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '43', 'actionId': '30', 'flowId': '14', 'order': 1, 'createdAt': '2024-11-21T16:43:09.646Z', 'updatedAt': '2024-11-22T04:20:41.490Z', 'action': {'id': '30', 'name': 'Set login password', 'type'...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.903" level="INFO">${action} = {'id': '30', 'name': 'Set login password', 'type': 'TYPE_TEXT', 'xpath': '//input[@id="password"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:39:54.768Z', 'updatedAt': '2024-11-21...</msg>
<status status="PASS" starttime="20241124 14:29:00.902" endtime="20241124 14:29:00.903"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:00.903" endtime="20241124 14:29:00.904"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:00.905" level="INFO">${input} = {'id': '27', 'actionId': '30', 'name': 'Bharani', 'value': 'vijaybharani', 'waitAfterAction': '1', 'isDefault': True, 'createdAt': '2024-11-21T16:39:55.091Z', 'updatedAt': '2024-11-21T17:23:21.466Z'}</msg>
<status status="PASS" starttime="20241124 14:29:00.904" endtime="20241124 14:29:00.905"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.905" endtime="20241124 14:29:00.905"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.906" endtime="20241124 14:29:00.906"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.905" endtime="20241124 14:29:00.906"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.905" endtime="20241124 14:29:00.906"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:00.907" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:29:00.907" endtime="20241124 14:29:00.907"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:00.908" endtime="20241124 14:29:00.908"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.908" endtime="20241124 14:29:00.908"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:00.909" endtime="20241124 14:29:00.909"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.908" endtime="20241124 14:29:00.909"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.913" endtime="20241124 14:29:00.913"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.909" endtime="20241124 14:29:00.913"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.917" endtime="20241124 14:29:00.918"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.921" endtime="20241124 14:29:00.921"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.914" endtime="20241124 14:29:00.921"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.922" endtime="20241124 14:29:00.923"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.921" endtime="20241124 14:29:00.923"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.927" endtime="20241124 14:29:00.927"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.923" endtime="20241124 14:29:00.928"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="password"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:00.968" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:00.939" endtime="20241124 14:29:00.969"/>
</kw>
<msg timestamp="20241124 14:29:00.969" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:00.939" endtime="20241124 14:29:00.969"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:00.969" endtime="20241124 14:29:00.969"/>
</return>
<status status="PASS" starttime="20241124 14:29:00.939" endtime="20241124 14:29:00.969"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.970" endtime="20241124 14:29:00.970"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.970" endtime="20241124 14:29:00.970"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.969" endtime="20241124 14:29:00.970"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.938" endtime="20241124 14:29:00.970"/>
</try>
<msg timestamp="20241124 14:29:00.971" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:00.938" endtime="20241124 14:29:00.971"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:00.971" endtime="20241124 14:29:00.971"/>
</return>
<status status="PASS" starttime="20241124 14:29:00.936" endtime="20241124 14:29:00.971"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:00.971" endtime="20241124 14:29:00.971"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.971" endtime="20241124 14:29:00.971"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.936" endtime="20241124 14:29:00.971"/>
</try>
<msg timestamp="20241124 14:29:00.972" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:00.936" endtime="20241124 14:29:00.972"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.975" endtime="20241124 14:29:00.975"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.975" endtime="20241124 14:29:00.975"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.974" endtime="20241124 14:29:00.975"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.974" endtime="20241124 14:29:00.975"/>
</if>
<status status="PASS" starttime="20241124 14:29:00.973" endtime="20241124 14:29:00.975"/>
</kw>
<status status="PASS" starttime="20241124 14:29:00.935" endtime="20241124 14:29:00.976"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:00.993" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:00.987" endtime="20241124 14:29:00.994"/>
</kw>
<msg timestamp="20241124 14:29:00.994" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:00.986" endtime="20241124 14:29:00.994"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:00.994" endtime="20241124 14:29:00.994"/>
</return>
<status status="PASS" starttime="20241124 14:29:00.986" endtime="20241124 14:29:00.994"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.995" endtime="20241124 14:29:00.995"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:00.996" endtime="20241124 14:29:00.996"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:00.995" endtime="20241124 14:29:00.996"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.986" endtime="20241124 14:29:00.996"/>
</try>
<msg timestamp="20241124 14:29:00.997" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:00.986" endtime="20241124 14:29:00.997"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:00.997" endtime="20241124 14:29:00.997"/>
</return>
<status status="PASS" starttime="20241124 14:29:00.984" endtime="20241124 14:29:00.997"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:00.997" endtime="20241124 14:29:00.998"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:00.997" endtime="20241124 14:29:00.998"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.984" endtime="20241124 14:29:00.998"/>
</try>
<msg timestamp="20241124 14:29:00.998" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:00.984" endtime="20241124 14:29:00.998"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.001" endtime="20241124 14:29:01.001"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.001" endtime="20241124 14:29:01.001"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.001" endtime="20241124 14:29:01.002"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.001" endtime="20241124 14:29:01.002"/>
</if>
<status status="PASS" starttime="20241124 14:29:00.999" endtime="20241124 14:29:01.002"/>
</kw>
<status status="PASS" starttime="20241124 14:29:00.983" endtime="20241124 14:29:01.002"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:01.024" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:29:01.024" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:01.003" endtime="20241124 14:29:01.024"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:01.024" endtime="20241124 14:29:01.025"/>
</return>
<status status="PASS" starttime="20241124 14:29:01.002" endtime="20241124 14:29:01.025"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.025" endtime="20241124 14:29:01.025"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.025" endtime="20241124 14:29:01.026"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.025" endtime="20241124 14:29:01.026"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.002" endtime="20241124 14:29:01.026"/>
</try>
<msg timestamp="20241124 14:29:01.026" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:00.981" endtime="20241124 14:29:01.026"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.030" endtime="20241124 14:29:01.030"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.030" endtime="20241124 14:29:01.030"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.029" endtime="20241124 14:29:01.030"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.029" endtime="20241124 14:29:01.030"/>
</if>
<status status="PASS" starttime="20241124 14:29:01.028" endtime="20241124 14:29:01.030"/>
</kw>
<status status="PASS" starttime="20241124 14:29:00.979" endtime="20241124 14:29:01.031"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.031" endtime="20241124 14:29:01.031"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.031" endtime="20241124 14:29:01.031"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.979" endtime="20241124 14:29:01.031"/>
</try>
<status status="PASS" starttime="20241124 14:29:00.978" endtime="20241124 14:29:01.031"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:01.043" level="INFO">Waited for Element with selector //input[@id="password"] at state visible</msg>
<status status="PASS" starttime="20241124 14:29:01.037" endtime="20241124 14:29:01.044"/>
</kw>
<msg timestamp="20241124 14:29:01.044" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.037" endtime="20241124 14:29:01.044"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.044" endtime="20241124 14:29:01.044"/>
</return>
<status status="PASS" starttime="20241124 14:29:01.036" endtime="20241124 14:29:01.044"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.045" endtime="20241124 14:29:01.045"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.045" endtime="20241124 14:29:01.045"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.044" endtime="20241124 14:29:01.045"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.036" endtime="20241124 14:29:01.046"/>
</try>
<msg timestamp="20241124 14:29:01.046" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.036" endtime="20241124 14:29:01.046"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.046" endtime="20241124 14:29:01.046"/>
</return>
<msg timestamp="20241124 14:29:01.047" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.034" endtime="20241124 14:29:01.047"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.050" endtime="20241124 14:29:01.050"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.050" endtime="20241124 14:29:01.050"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.049" endtime="20241124 14:29:01.050"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.049" endtime="20241124 14:29:01.050"/>
</if>
<status status="PASS" starttime="20241124 14:29:01.048" endtime="20241124 14:29:01.050"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.034" endtime="20241124 14:29:01.051"/>
</kw>
<status status="PASS" starttime="20241124 14:29:00.933" endtime="20241124 14:29:01.051"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:01.075" level="INFO">Waited for Element with selector //input[@id="password"] at state editable</msg>
<status status="PASS" starttime="20241124 14:29:01.057" endtime="20241124 14:29:01.075"/>
</kw>
<msg timestamp="20241124 14:29:01.076" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.056" endtime="20241124 14:29:01.076"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.076" endtime="20241124 14:29:01.076"/>
</return>
<status status="PASS" starttime="20241124 14:29:01.056" endtime="20241124 14:29:01.076"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.076" endtime="20241124 14:29:01.077"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.077" endtime="20241124 14:29:01.077"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.076" endtime="20241124 14:29:01.077"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.056" endtime="20241124 14:29:01.077"/>
</try>
<msg timestamp="20241124 14:29:01.077" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.055" endtime="20241124 14:29:01.077"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.077" endtime="20241124 14:29:01.078"/>
</return>
<msg timestamp="20241124 14:29:01.078" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.054" endtime="20241124 14:29:01.078"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.082" endtime="20241124 14:29:01.082"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.082" endtime="20241124 14:29:01.082"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.081" endtime="20241124 14:29:01.082"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.081" endtime="20241124 14:29:01.082"/>
</if>
<status status="PASS" starttime="20241124 14:29:01.080" endtime="20241124 14:29:01.083"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.053" endtime="20241124 14:29:01.083"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:01.083" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:29:01.083" endtime="20241124 14:29:01.083"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="password"]: string</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.086" endtime="20241124 14:29:01.086"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.088" endtime="20241124 14:29:01.088"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.085" endtime="20241124 14:29:01.088"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:01.089" endtime="20241124 14:29:01.089"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.088" endtime="20241124 14:29:01.089"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.085" endtime="20241124 14:29:01.089"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241124 14:29:01.090" level="INFO">Fills the text 'vijaybharani' in the given field.</msg>
<status status="PASS" starttime="20241124 14:29:01.090" endtime="20241124 14:29:01.119"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.089" endtime="20241124 14:29:01.119"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.120" endtime="20241124 14:29:01.120"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.120" endtime="20241124 14:29:01.120"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.119" endtime="20241124 14:29:01.120"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.089" endtime="20241124 14:29:01.121"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="password"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:01.139" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:01.132" endtime="20241124 14:29:01.139"/>
</kw>
<msg timestamp="20241124 14:29:01.140" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.132" endtime="20241124 14:29:01.140"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.140" endtime="20241124 14:29:01.140"/>
</return>
<status status="PASS" starttime="20241124 14:29:01.131" endtime="20241124 14:29:01.140"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.140" endtime="20241124 14:29:01.140"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.141" endtime="20241124 14:29:01.141"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.140" endtime="20241124 14:29:01.141"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.131" endtime="20241124 14:29:01.141"/>
</try>
<msg timestamp="20241124 14:29:01.141" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.130" endtime="20241124 14:29:01.141"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.141" endtime="20241124 14:29:01.141"/>
</return>
<status status="PASS" starttime="20241124 14:29:01.128" endtime="20241124 14:29:01.142"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:01.142" endtime="20241124 14:29:01.142"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:01.142" endtime="20241124 14:29:01.142"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.128" endtime="20241124 14:29:01.142"/>
</try>
<msg timestamp="20241124 14:29:01.142" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.127" endtime="20241124 14:29:01.142"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.145" endtime="20241124 14:29:01.145"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.146" endtime="20241124 14:29:01.146"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.145" endtime="20241124 14:29:01.146"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.145" endtime="20241124 14:29:01.146"/>
</if>
<status status="PASS" starttime="20241124 14:29:01.143" endtime="20241124 14:29:01.146"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.126" endtime="20241124 14:29:01.146"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:01.161" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:01.156" endtime="20241124 14:29:01.162"/>
</kw>
<msg timestamp="20241124 14:29:01.162" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.155" endtime="20241124 14:29:01.162"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.162" endtime="20241124 14:29:01.162"/>
</return>
<status status="PASS" starttime="20241124 14:29:01.155" endtime="20241124 14:29:01.162"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.162" endtime="20241124 14:29:01.163"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.163" endtime="20241124 14:29:01.163"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.162" endtime="20241124 14:29:01.163"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.155" endtime="20241124 14:29:01.163"/>
</try>
<msg timestamp="20241124 14:29:01.163" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.154" endtime="20241124 14:29:01.163"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.163" endtime="20241124 14:29:01.164"/>
</return>
<status status="PASS" starttime="20241124 14:29:01.153" endtime="20241124 14:29:01.164"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:01.164" endtime="20241124 14:29:01.164"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:01.164" endtime="20241124 14:29:01.164"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.153" endtime="20241124 14:29:01.164"/>
</try>
<msg timestamp="20241124 14:29:01.165" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.153" endtime="20241124 14:29:01.165"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.167" endtime="20241124 14:29:01.167"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.167" endtime="20241124 14:29:01.168"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.167" endtime="20241124 14:29:01.168"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.167" endtime="20241124 14:29:01.168"/>
</if>
<status status="PASS" starttime="20241124 14:29:01.166" endtime="20241124 14:29:01.168"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.152" endtime="20241124 14:29:01.168"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:01.180" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:29:01.180" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:01.168" endtime="20241124 14:29:01.180"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:01.180" endtime="20241124 14:29:01.180"/>
</return>
<status status="PASS" starttime="20241124 14:29:01.168" endtime="20241124 14:29:01.180"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.181" endtime="20241124 14:29:01.181"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.181" endtime="20241124 14:29:01.181"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.181" endtime="20241124 14:29:01.181"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.168" endtime="20241124 14:29:01.182"/>
</try>
<msg timestamp="20241124 14:29:01.182" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:01.150" endtime="20241124 14:29:01.182"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.185" endtime="20241124 14:29:01.185"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.185" endtime="20241124 14:29:01.185"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.184" endtime="20241124 14:29:01.185"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.184" endtime="20241124 14:29:01.185"/>
</if>
<status status="PASS" starttime="20241124 14:29:01.183" endtime="20241124 14:29:01.185"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.149" endtime="20241124 14:29:01.185"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.186" endtime="20241124 14:29:01.186"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.185" endtime="20241124 14:29:01.186"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.149" endtime="20241124 14:29:01.186"/>
</try>
<status status="PASS" starttime="20241124 14:29:01.148" endtime="20241124 14:29:01.186"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:01.198" level="INFO">Waited for Element with selector //input[@id="password"] at state visible</msg>
<status status="PASS" starttime="20241124 14:29:01.191" endtime="20241124 14:29:01.198"/>
</kw>
<msg timestamp="20241124 14:29:01.198" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.191" endtime="20241124 14:29:01.198"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.198" endtime="20241124 14:29:01.198"/>
</return>
<status status="PASS" starttime="20241124 14:29:01.190" endtime="20241124 14:29:01.199"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.199" endtime="20241124 14:29:01.199"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.199" endtime="20241124 14:29:01.199"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.199" endtime="20241124 14:29:01.199"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.190" endtime="20241124 14:29:01.200"/>
</try>
<msg timestamp="20241124 14:29:01.200" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.190" endtime="20241124 14:29:01.200"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.200" endtime="20241124 14:29:01.200"/>
</return>
<msg timestamp="20241124 14:29:01.200" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.189" endtime="20241124 14:29:01.200"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.203" endtime="20241124 14:29:01.203"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.203" endtime="20241124 14:29:01.203"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.203" endtime="20241124 14:29:01.203"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.203" endtime="20241124 14:29:01.203"/>
</if>
<status status="PASS" starttime="20241124 14:29:01.201" endtime="20241124 14:29:01.204"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.188" endtime="20241124 14:29:01.204"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.123" endtime="20241124 14:29:01.204"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:01.222" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:01.211" endtime="20241124 14:29:01.222"/>
</kw>
<msg timestamp="20241124 14:29:01.222" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.210" endtime="20241124 14:29:01.222"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.222" endtime="20241124 14:29:01.222"/>
</return>
<status status="PASS" starttime="20241124 14:29:01.210" endtime="20241124 14:29:01.223"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.223" endtime="20241124 14:29:01.223"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.223" endtime="20241124 14:29:01.223"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.223" endtime="20241124 14:29:01.223"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.210" endtime="20241124 14:29:01.223"/>
</try>
<msg timestamp="20241124 14:29:01.224" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.209" endtime="20241124 14:29:01.224"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.224" endtime="20241124 14:29:01.224"/>
</return>
<status status="PASS" starttime="20241124 14:29:01.208" endtime="20241124 14:29:01.224"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:01.224" endtime="20241124 14:29:01.224"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:01.224" endtime="20241124 14:29:01.224"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.208" endtime="20241124 14:29:01.224"/>
</try>
<msg timestamp="20241124 14:29:01.225" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.208" endtime="20241124 14:29:01.225"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.227" endtime="20241124 14:29:01.227"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.228" endtime="20241124 14:29:01.228"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.227" endtime="20241124 14:29:01.228"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.227" endtime="20241124 14:29:01.228"/>
</if>
<status status="PASS" starttime="20241124 14:29:01.226" endtime="20241124 14:29:01.229"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.207" endtime="20241124 14:29:01.229"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:01.240" level="INFO">Property: 'vijaybharani'</msg>
<msg timestamp="20241124 14:29:01.241" level="INFO">${property} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:29:01.230" endtime="20241124 14:29:01.241"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:01.241" endtime="20241124 14:29:01.241"/>
</return>
<status status="PASS" starttime="20241124 14:29:01.229" endtime="20241124 14:29:01.241"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.241" endtime="20241124 14:29:01.242"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.242" endtime="20241124 14:29:01.242"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.241" endtime="20241124 14:29:01.242"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.229" endtime="20241124 14:29:01.242"/>
</try>
<msg timestamp="20241124 14:29:01.242" level="INFO">${fieldTextValue} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:29:01.205" endtime="20241124 14:29:01.242"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241124 14:29:01.242" endtime="20241124 14:29:01.243"/>
</return>
<msg timestamp="20241124 14:29:01.243" level="INFO">${populated_value} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:29:01.122" endtime="20241124 14:29:01.243"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241124 14:29:01.252" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.246" endtime="20241124 14:29:01.252"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:01.252" endtime="20241124 14:29:01.252"/>
</return>
<msg timestamp="20241124 14:29:01.252" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241124 14:29:01.245" endtime="20241124 14:29:01.252"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.256" endtime="20241124 14:29:01.256"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.256" endtime="20241124 14:29:01.256"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.255" endtime="20241124 14:29:01.256"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.255" endtime="20241124 14:29:01.256"/>
</if>
<status status="PASS" starttime="20241124 14:29:01.254" endtime="20241124 14:29:01.256"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.121" endtime="20241124 14:29:01.256"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.084" endtime="20241124 14:29:01.257"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.084" endtime="20241124 14:29:01.257"/>
</kw>
<status status="PASS" starttime="20241124 14:29:01.084" endtime="20241124 14:29:01.257"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.257" endtime="20241124 14:29:01.257"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.257" endtime="20241124 14:29:01.257"/>
</branch>
<status status="PASS" starttime="20241124 14:29:01.084" endtime="20241124 14:29:01.257"/>
</try>
<status status="PASS" starttime="20241124 14:29:00.932" endtime="20241124 14:29:01.258"/>
</kw>
<status status="PASS" starttime="20241124 14:29:00.928" endtime="20241124 14:29:01.258"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.259" endtime="20241124 14:29:01.259"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.258" endtime="20241124 14:29:01.259"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.260" endtime="20241124 14:29:01.261"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.261" endtime="20241124 14:29:01.261"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.261" endtime="20241124 14:29:01.261"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.263" endtime="20241124 14:29:01.263"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.263" endtime="20241124 14:29:01.263"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:01.261" endtime="20241124 14:29:01.263"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:01.259" endtime="20241124 14:29:01.263"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:01.268" endtime="20241124 14:29:01.268"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.271" endtime="20241124 14:29:01.271"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.263" endtime="20241124 14:29:01.271"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.272" endtime="20241124 14:29:01.272"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.273" endtime="20241124 14:29:01.273"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.272" endtime="20241124 14:29:01.273"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.273" endtime="20241124 14:29:01.273"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.273" endtime="20241124 14:29:01.273"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:01.272" endtime="20241124 14:29:01.273"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:01.271" endtime="20241124 14:29:01.273"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:01.280" endtime="20241124 14:29:01.280"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.283" endtime="20241124 14:29:01.283"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.273" endtime="20241124 14:29:01.283"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.284" endtime="20241124 14:29:01.284"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.285" endtime="20241124 14:29:01.285"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.285" endtime="20241124 14:29:01.285"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.285" endtime="20241124 14:29:01.285"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.285" endtime="20241124 14:29:01.285"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:01.284" endtime="20241124 14:29:01.285"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:01.283" endtime="20241124 14:29:01.285"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.287" endtime="20241124 14:29:01.288"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.286" endtime="20241124 14:29:01.288"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:01.295" endtime="20241124 14:29:01.295"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:01.296" endtime="20241124 14:29:01.296"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:01.288" endtime="20241124 14:29:01.296"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.907" endtime="20241124 14:29:01.296"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:01.296" endtime="20241124 14:29:01.297"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:02.309" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241124 14:29:01.297" endtime="20241124 14:29:02.309"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:02.309" endtime="20241124 14:29:02.309"/>
</return>
<msg timestamp="20241124 14:29:02.310" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:29:00.906" endtime="20241124 14:29:02.310"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.311" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:43</msg>
<status status="PASS" starttime="20241124 14:29:02.311" endtime="20241124 14:29:02.311"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.312" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:02.312" endtime="20241124 14:29:02.312"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.313" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:02.312" endtime="20241124 14:29:02.313"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.313" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:02.313" endtime="20241124 14:29:02.313"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.314" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:02.313" endtime="20241124 14:29:02.314"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.314" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:02.314" endtime="20241124 14:29:02.314"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.315" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:02.314" endtime="20241124 14:29:02.315"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.315" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:02.315" endtime="20241124 14:29:02.315"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:02.315" endtime="20241124 14:29:02.316"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:02.319" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:02.318" endtime="20241124 14:29:02.319"/>
</kw>
<msg timestamp="20241124 14:29:02.319" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:02.318" endtime="20241124 14:29:02.319"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.319" endtime="20241124 14:29:02.319"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.320" endtime="20241124 14:29:02.320"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.320" endtime="20241124 14:29:02.320"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.320" endtime="20241124 14:29:02.320"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.320" endtime="20241124 14:29:02.320"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.320" endtime="20241124 14:29:02.320"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.319" endtime="20241124 14:29:02.321"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.319" endtime="20241124 14:29:02.321"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:02.321" endtime="20241124 14:29:02.321"/>
</return>
<msg timestamp="20241124 14:29:02.321" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:02.317" endtime="20241124 14:29:02.321"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:02.324" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:46::flowActionSequenceId:42'.</msg>
<status status="FAIL" starttime="20241124 14:29:02.323" endtime="20241124 14:29:02.324"/>
</kw>
<msg timestamp="20241124 14:29:02.324" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:02.323" endtime="20241124 14:29:02.324"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.325" endtime="20241124 14:29:02.325"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.325" endtime="20241124 14:29:02.325"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.325" endtime="20241124 14:29:02.325"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.326" endtime="20241124 14:29:02.326"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.325" endtime="20241124 14:29:02.326"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.325" endtime="20241124 14:29:02.326"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.325" endtime="20241124 14:29:02.326"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.324" endtime="20241124 14:29:02.326"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:02.326" endtime="20241124 14:29:02.327"/>
</return>
<msg timestamp="20241124 14:29:02.327" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:02.323" endtime="20241124 14:29:02.327"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:02.328" endtime="20241124 14:29:02.328"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.328" endtime="20241124 14:29:02.328"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.328" endtime="20241124 14:29:02.328"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.329" endtime="20241124 14:29:02.329"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:02.329" endtime="20241124 14:29:02.329"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.329" endtime="20241124 14:29:02.329"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.330" endtime="20241124 14:29:02.330"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:02.330" endtime="20241124 14:29:02.330"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.329" endtime="20241124 14:29:02.330"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.328" endtime="20241124 14:29:02.330"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.328" endtime="20241124 14:29:02.330"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.328" endtime="20241124 14:29:02.330"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.331" endtime="20241124 14:29:02.331"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:02.331" endtime="20241124 14:29:02.331"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.330" endtime="20241124 14:29:02.331"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.331" endtime="20241124 14:29:02.331"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:02.331" endtime="20241124 14:29:02.331"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.331" endtime="20241124 14:29:02.332"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.330" endtime="20241124 14:29:02.332"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.330" endtime="20241124 14:29:02.332"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.330" endtime="20241124 14:29:02.332"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.328" endtime="20241124 14:29:02.332"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.327" endtime="20241124 14:29:02.332"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:02.333" endtime="20241124 14:29:02.333"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.332" endtime="20241124 14:29:02.333"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.332" endtime="20241124 14:29:02.333"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.333" endtime="20241124 14:29:02.333"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.333" endtime="20241124 14:29:02.333"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.333" endtime="20241124 14:29:02.333"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.334" endtime="20241124 14:29:02.334"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.334" endtime="20241124 14:29:02.334"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:02.334" endtime="20241124 14:29:02.334"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.334" endtime="20241124 14:29:02.334"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.335" endtime="20241124 14:29:02.335"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:02.335" endtime="20241124 14:29:02.335"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.335" endtime="20241124 14:29:02.335"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.334" endtime="20241124 14:29:02.335"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.334" endtime="20241124 14:29:02.335"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.333" endtime="20241124 14:29:02.335"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.332" endtime="20241124 14:29:02.335"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.332" endtime="20241124 14:29:02.335"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.312" endtime="20241124 14:29:02.335"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.336" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:02.336" endtime="20241124 14:29:02.336"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.337" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:02.336" endtime="20241124 14:29:02.337"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.337" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:02.337" endtime="20241124 14:29:02.337"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.338" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:02.337" endtime="20241124 14:29:02.338"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.338" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.338" endtime="20241124 14:29:02.338"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.339" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:02.338" endtime="20241124 14:29:02.339"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.339" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:02.339" endtime="20241124 14:29:02.339"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:02.339" endtime="20241124 14:29:02.340"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:02.344" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:29:02.342" endtime="20241124 14:29:02.344"/>
</kw>
<msg timestamp="20241124 14:29:02.345" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:02.342" endtime="20241124 14:29:02.345"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.345" endtime="20241124 14:29:02.345"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.346" endtime="20241124 14:29:02.346"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.346" endtime="20241124 14:29:02.346"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.346" endtime="20241124 14:29:02.346"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.346" endtime="20241124 14:29:02.346"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.346" endtime="20241124 14:29:02.346"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.345" endtime="20241124 14:29:02.347"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.345" endtime="20241124 14:29:02.347"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:02.347" endtime="20241124 14:29:02.347"/>
</return>
<msg timestamp="20241124 14:29:02.347" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:02.341" endtime="20241124 14:29:02.347"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:02.350" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:02.350" endtime="20241124 14:29:02.350"/>
</kw>
<msg timestamp="20241124 14:29:02.350" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:02.349" endtime="20241124 14:29:02.351"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.351" endtime="20241124 14:29:02.351"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.352" endtime="20241124 14:29:02.352"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.351" endtime="20241124 14:29:02.352"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.352" endtime="20241124 14:29:02.352"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.352" endtime="20241124 14:29:02.352"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.351" endtime="20241124 14:29:02.352"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.351" endtime="20241124 14:29:02.352"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.351" endtime="20241124 14:29:02.353"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:02.353" endtime="20241124 14:29:02.353"/>
</return>
<msg timestamp="20241124 14:29:02.353" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:02.349" endtime="20241124 14:29:02.353"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:02.354" endtime="20241124 14:29:02.354"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.354" endtime="20241124 14:29:02.354"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.354" endtime="20241124 14:29:02.355"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.355" endtime="20241124 14:29:02.355"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:02.355" endtime="20241124 14:29:02.356"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.355" endtime="20241124 14:29:02.356"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.356" endtime="20241124 14:29:02.356"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:02.356" endtime="20241124 14:29:02.356"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.356" endtime="20241124 14:29:02.356"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.355" endtime="20241124 14:29:02.357"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.355" endtime="20241124 14:29:02.357"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.355" endtime="20241124 14:29:02.357"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.357" endtime="20241124 14:29:02.357"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:02.357" endtime="20241124 14:29:02.358"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.357" endtime="20241124 14:29:02.359"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.359" endtime="20241124 14:29:02.359"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:02.359" endtime="20241124 14:29:02.359"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.359" endtime="20241124 14:29:02.359"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.357" endtime="20241124 14:29:02.360"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.357" endtime="20241124 14:29:02.360"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.357" endtime="20241124 14:29:02.360"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.354" endtime="20241124 14:29:02.361"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.353" endtime="20241124 14:29:02.362"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:02.367" endtime="20241124 14:29:02.368"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.367" endtime="20241124 14:29:02.368"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.367" endtime="20241124 14:29:02.368"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.370" endtime="20241124 14:29:02.370"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.369" endtime="20241124 14:29:02.370"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.369" endtime="20241124 14:29:02.370"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.371" endtime="20241124 14:29:02.371"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.371" endtime="20241124 14:29:02.372"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:02.372" endtime="20241124 14:29:02.372"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.371" endtime="20241124 14:29:02.372"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.372" endtime="20241124 14:29:02.373"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:02.373" endtime="20241124 14:29:02.373"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.372" endtime="20241124 14:29:02.373"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.371" endtime="20241124 14:29:02.373"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.370" endtime="20241124 14:29:02.373"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.370" endtime="20241124 14:29:02.373"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.366" endtime="20241124 14:29:02.374"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.362" endtime="20241124 14:29:02.374"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.336" endtime="20241124 14:29:02.374"/>
</iter>
<status status="PASS" starttime="20241124 14:29:02.311" endtime="20241124 14:29:02.374"/>
</for>
<msg timestamp="20241124 14:29:02.375" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:29:02.310" endtime="20241124 14:29:02.375"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:02.375" endtime="20241124 14:29:02.381"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:02.382" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '297', 'status': 'COMPLETED', 'actionName': 'Set login password', 'actionType': 'TYPE_TEXT', 'actionXpath': '//input[@id="password"]', 'inputValue': 'vijaybharani', 'er...</msg>
<status status="PASS" starttime="20241124 14:29:02.382" endtime="20241124 14:29:02.382"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:02.401" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "297", "status": "COMPLETED", "actionName": "Set login password", "actionType": "TYPE_TEXT", "actionXpath": "//input[@id=\"password\"]", "inputValue": "vijaybharani", "...</msg>
<status status="PASS" starttime="20241124 14:29:02.399" endtime="20241124 14:29:02.401"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:02.425" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:02.426" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:02.402" endtime="20241124 14:29:02.426"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:02.427" endtime="20241124 14:29:02.427"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:02.427" endtime="20241124 14:29:02.427"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.382" endtime="20241124 14:29:02.427"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.381" endtime="20241124 14:29:02.427"/>
</kw>
<status status="PASS" starttime="20241124 14:29:00.902" endtime="20241124 14:29:02.427"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.427" endtime="20241124 14:29:02.427"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:02.427" endtime="20241124 14:29:02.427"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.427" endtime="20241124 14:29:02.427"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.427" endtime="20241124 14:29:02.427"/>
</branch>
<status status="PASS" starttime="20241124 14:29:00.902" endtime="20241124 14:29:02.427"/>
</try>
<status status="PASS" starttime="20241124 14:29:00.902" endtime="20241124 14:29:02.427"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '42', 'actionId': '29', 'flowId': '14', 'order': 2, 'createdAt': '2024-11-21T16:43:09.645Z', 'updatedAt': '2024-11-22T04:20:41.497Z', 'action': {'id': '29', 'name': 'Set login username', 'type'...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.427" level="INFO">${action} = {'id': '29', 'name': 'Set login username', 'type': 'TYPE_TEXT', 'xpath': 'id=username', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:39:14.809Z', 'updatedAt': '2024-11-23T17:11:28.46...</msg>
<status status="PASS" starttime="20241124 14:29:02.427" endtime="20241124 14:29:02.427"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:02.427" endtime="20241124 14:29:02.427"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:02.443" level="INFO">${input} = {'id': '26', 'actionId': '29', 'name': 'Bharani', 'value': 'bharani@ideas2it.com', 'waitAfterAction': '1', 'isDefault': True, 'createdAt': '2024-11-21T16:39:15.038Z', 'updatedAt': '2024-11-21T17:23:16...</msg>
<status status="PASS" starttime="20241124 14:29:02.427" endtime="20241124 14:29:02.444"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.444" endtime="20241124 14:29:02.444"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.444" endtime="20241124 14:29:02.444"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.444" endtime="20241124 14:29:02.444"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.444" endtime="20241124 14:29:02.444"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:02.444" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:02.444" endtime="20241124 14:29:02.444"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:02.444" endtime="20241124 14:29:02.444"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.444" endtime="20241124 14:29:02.444"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:02.444" endtime="20241124 14:29:02.444"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.444" endtime="20241124 14:29:02.444"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.444" endtime="20241124 14:29:02.444"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.444" endtime="20241124 14:29:02.444"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.460" endtime="20241124 14:29:02.460"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.460" endtime="20241124 14:29:02.460"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.444" endtime="20241124 14:29:02.460"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.460" endtime="20241124 14:29:02.460"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.460" endtime="20241124 14:29:02.460"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.477" endtime="20241124 14:29:02.477"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.477" endtime="20241124 14:29:02.477"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=username: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:02.510" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:29:02.493" endtime="20241124 14:29:02.510"/>
</kw>
<msg timestamp="20241124 14:29:02.510" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.493" endtime="20241124 14:29:02.510"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.510" endtime="20241124 14:29:02.510"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.493" endtime="20241124 14:29:02.510"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.510" endtime="20241124 14:29:02.510"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.510" endtime="20241124 14:29:02.510"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.510" endtime="20241124 14:29:02.510"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.493" endtime="20241124 14:29:02.510"/>
</try>
<msg timestamp="20241124 14:29:02.510" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.493" endtime="20241124 14:29:02.510"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.510" endtime="20241124 14:29:02.510"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.493" endtime="20241124 14:29:02.510"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:02.510" endtime="20241124 14:29:02.510"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.510" endtime="20241124 14:29:02.510"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.493" endtime="20241124 14:29:02.510"/>
</try>
<msg timestamp="20241124 14:29:02.510" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.493" endtime="20241124 14:29:02.510"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.527" endtime="20241124 14:29:02.527"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.527" endtime="20241124 14:29:02.527"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.527" endtime="20241124 14:29:02.527"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.527" endtime="20241124 14:29:02.527"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.527" endtime="20241124 14:29:02.527"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.493" endtime="20241124 14:29:02.527"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:02.560" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:29:02.544" endtime="20241124 14:29:02.560"/>
</kw>
<msg timestamp="20241124 14:29:02.560" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.544" endtime="20241124 14:29:02.560"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.560" endtime="20241124 14:29:02.560"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.544" endtime="20241124 14:29:02.560"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.560" endtime="20241124 14:29:02.560"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.560" endtime="20241124 14:29:02.560"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.560" endtime="20241124 14:29:02.560"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.544" endtime="20241124 14:29:02.560"/>
</try>
<msg timestamp="20241124 14:29:02.560" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.544" endtime="20241124 14:29:02.560"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.560" endtime="20241124 14:29:02.560"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.544" endtime="20241124 14:29:02.560"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:02.560" endtime="20241124 14:29:02.560"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.560" endtime="20241124 14:29:02.560"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.544" endtime="20241124 14:29:02.560"/>
</try>
<msg timestamp="20241124 14:29:02.576" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.544" endtime="20241124 14:29:02.576"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.577" endtime="20241124 14:29:02.577"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.577" endtime="20241124 14:29:02.577"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.577" endtime="20241124 14:29:02.577"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.577" endtime="20241124 14:29:02.577"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.577" endtime="20241124 14:29:02.577"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.544" endtime="20241124 14:29:02.577"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:02.594" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:29:02.594" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:02.577" endtime="20241124 14:29:02.594"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:02.610" endtime="20241124 14:29:02.611"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.577" endtime="20241124 14:29:02.611"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.611" endtime="20241124 14:29:02.611"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.611" endtime="20241124 14:29:02.611"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.611" endtime="20241124 14:29:02.611"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.577" endtime="20241124 14:29:02.611"/>
</try>
<msg timestamp="20241124 14:29:02.611" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:02.527" endtime="20241124 14:29:02.611"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.611" endtime="20241124 14:29:02.611"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.611" endtime="20241124 14:29:02.611"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.611" endtime="20241124 14:29:02.611"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.611" endtime="20241124 14:29:02.611"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.611" endtime="20241124 14:29:02.611"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.527" endtime="20241124 14:29:02.611"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.611" endtime="20241124 14:29:02.611"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.611" endtime="20241124 14:29:02.611"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.527" endtime="20241124 14:29:02.611"/>
</try>
<status status="PASS" starttime="20241124 14:29:02.527" endtime="20241124 14:29:02.611"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:02.643" level="INFO">Waited for Element with selector id=username at state visible</msg>
<status status="PASS" starttime="20241124 14:29:02.627" endtime="20241124 14:29:02.643"/>
</kw>
<msg timestamp="20241124 14:29:02.643" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.627" endtime="20241124 14:29:02.643"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.643" endtime="20241124 14:29:02.643"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.627" endtime="20241124 14:29:02.643"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.643" endtime="20241124 14:29:02.643"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.643" endtime="20241124 14:29:02.643"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.643" endtime="20241124 14:29:02.643"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.627" endtime="20241124 14:29:02.643"/>
</try>
<msg timestamp="20241124 14:29:02.643" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.627" endtime="20241124 14:29:02.643"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.643" endtime="20241124 14:29:02.643"/>
</return>
<msg timestamp="20241124 14:29:02.643" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.627" endtime="20241124 14:29:02.643"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.643" endtime="20241124 14:29:02.643"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.643" endtime="20241124 14:29:02.643"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.643" endtime="20241124 14:29:02.643"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.643" endtime="20241124 14:29:02.643"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.643" endtime="20241124 14:29:02.643"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.627" endtime="20241124 14:29:02.659"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.477" endtime="20241124 14:29:02.659"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:02.693" level="INFO">Waited for Element with selector id=username at state editable</msg>
<status status="PASS" starttime="20241124 14:29:02.660" endtime="20241124 14:29:02.693"/>
</kw>
<msg timestamp="20241124 14:29:02.693" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.660" endtime="20241124 14:29:02.693"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.693" endtime="20241124 14:29:02.693"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.660" endtime="20241124 14:29:02.693"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.693" endtime="20241124 14:29:02.693"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.693" endtime="20241124 14:29:02.693"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.693" endtime="20241124 14:29:02.693"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.660" endtime="20241124 14:29:02.693"/>
</try>
<msg timestamp="20241124 14:29:02.693" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.660" endtime="20241124 14:29:02.693"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.693" endtime="20241124 14:29:02.693"/>
</return>
<msg timestamp="20241124 14:29:02.693" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.660" endtime="20241124 14:29:02.693"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.709" endtime="20241124 14:29:02.709"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.710"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.693" endtime="20241124 14:29:02.710"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.693" endtime="20241124 14:29:02.710"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.693" endtime="20241124 14:29:02.710"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.660" endtime="20241124 14:29:02.710"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:02.710" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.710"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=username: string</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.710"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.710"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.710"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.710"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.710"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.710"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241124 14:29:02.726" level="INFO">Fills the text 'bharani@ideas2it.com' in the given field.</msg>
<status status="PASS" starttime="20241124 14:29:02.726" endtime="20241124 14:29:02.760"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.760"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.760" endtime="20241124 14:29:02.760"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.760" endtime="20241124 14:29:02.760"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.760" endtime="20241124 14:29:02.760"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.760"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=username: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:02.787" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:29:02.785" endtime="20241124 14:29:02.787"/>
</kw>
<msg timestamp="20241124 14:29:02.793" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.777" endtime="20241124 14:29:02.793"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.793" endtime="20241124 14:29:02.793"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.777" endtime="20241124 14:29:02.793"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.793" endtime="20241124 14:29:02.793"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.793" endtime="20241124 14:29:02.793"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.793" endtime="20241124 14:29:02.793"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.777" endtime="20241124 14:29:02.793"/>
</try>
<msg timestamp="20241124 14:29:02.793" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.777" endtime="20241124 14:29:02.793"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.793" endtime="20241124 14:29:02.793"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.777" endtime="20241124 14:29:02.793"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:02.793" endtime="20241124 14:29:02.793"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.793" endtime="20241124 14:29:02.793"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.777" endtime="20241124 14:29:02.793"/>
</try>
<msg timestamp="20241124 14:29:02.793" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.777" endtime="20241124 14:29:02.793"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.793" endtime="20241124 14:29:02.793"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.793" endtime="20241124 14:29:02.793"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.793" endtime="20241124 14:29:02.793"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.793" endtime="20241124 14:29:02.793"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.793" endtime="20241124 14:29:02.793"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.777" endtime="20241124 14:29:02.793"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:02.826" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.826"/>
</kw>
<msg timestamp="20241124 14:29:02.826" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.826"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.826"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.826"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.826"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.826"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.826"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.826"/>
</try>
<msg timestamp="20241124 14:29:02.826" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.826"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.826"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.826"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.826"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.826"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.826"/>
</try>
<msg timestamp="20241124 14:29:02.826" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.826"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.826"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.826"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.826"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.826"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.826"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.826"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:02.843" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:29:02.843" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.843"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:02.843" endtime="20241124 14:29:02.843"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.843"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.843" endtime="20241124 14:29:02.843"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.843" endtime="20241124 14:29:02.843"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.843" endtime="20241124 14:29:02.843"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.826" endtime="20241124 14:29:02.843"/>
</try>
<msg timestamp="20241124 14:29:02.843" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.843"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.853" endtime="20241124 14:29:02.853"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.853" endtime="20241124 14:29:02.853"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.853" endtime="20241124 14:29:02.853"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.853" endtime="20241124 14:29:02.853"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.853" endtime="20241124 14:29:02.853"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.853"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.853" endtime="20241124 14:29:02.853"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.853" endtime="20241124 14:29:02.853"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.853"/>
</try>
<status status="PASS" starttime="20241124 14:29:02.810" endtime="20241124 14:29:02.853"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:02.860" level="INFO">Waited for Element with selector id=username at state visible</msg>
<status status="PASS" starttime="20241124 14:29:02.860" endtime="20241124 14:29:02.875"/>
</kw>
<msg timestamp="20241124 14:29:02.875" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.860" endtime="20241124 14:29:02.875"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.876" endtime="20241124 14:29:02.876"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.860" endtime="20241124 14:29:02.876"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.876" endtime="20241124 14:29:02.876"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.876" endtime="20241124 14:29:02.876"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.876" endtime="20241124 14:29:02.876"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.860" endtime="20241124 14:29:02.876"/>
</try>
<msg timestamp="20241124 14:29:02.876" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.860" endtime="20241124 14:29:02.876"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.876" endtime="20241124 14:29:02.876"/>
</return>
<msg timestamp="20241124 14:29:02.876" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.860" endtime="20241124 14:29:02.876"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.876" endtime="20241124 14:29:02.876"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.876" endtime="20241124 14:29:02.876"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.876" endtime="20241124 14:29:02.876"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.876" endtime="20241124 14:29:02.876"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.876" endtime="20241124 14:29:02.876"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.860" endtime="20241124 14:29:02.876"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.760" endtime="20241124 14:29:02.876"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:02.909" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:29:02.893" endtime="20241124 14:29:02.909"/>
</kw>
<msg timestamp="20241124 14:29:02.910" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.893" endtime="20241124 14:29:02.910"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.910"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.893" endtime="20241124 14:29:02.910"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.910"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.910"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.910"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.893" endtime="20241124 14:29:02.910"/>
</try>
<msg timestamp="20241124 14:29:02.910" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.893" endtime="20241124 14:29:02.910"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.910"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.893" endtime="20241124 14:29:02.910"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.910"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.910"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.893" endtime="20241124 14:29:02.910"/>
</try>
<msg timestamp="20241124 14:29:02.910" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.893" endtime="20241124 14:29:02.910"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.910"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.910"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.910"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.910"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.910"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.893" endtime="20241124 14:29:02.910"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:02.926" level="INFO">Property: 'bharani@ideas2it.com'</msg>
<msg timestamp="20241124 14:29:02.926" level="INFO">${property} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.942"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:02.942" endtime="20241124 14:29:02.942"/>
</return>
<status status="PASS" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.942"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.943" endtime="20241124 14:29:02.943"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.943" endtime="20241124 14:29:02.943"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.942" endtime="20241124 14:29:02.943"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.910" endtime="20241124 14:29:02.943"/>
</try>
<msg timestamp="20241124 14:29:02.943" level="INFO">${fieldTextValue} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:02.876" endtime="20241124 14:29:02.943"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241124 14:29:02.943" endtime="20241124 14:29:02.943"/>
</return>
<msg timestamp="20241124 14:29:02.943" level="INFO">${populated_value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:02.760" endtime="20241124 14:29:02.943"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241124 14:29:02.943" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.943" endtime="20241124 14:29:02.943"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:02.943" endtime="20241124 14:29:02.943"/>
</return>
<msg timestamp="20241124 14:29:02.943" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241124 14:29:02.943" endtime="20241124 14:29:02.943"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</if>
<status status="PASS" starttime="20241124 14:29:02.943" endtime="20241124 14:29:02.960"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.760" endtime="20241124 14:29:02.960"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.960"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.960"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.960"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.710" endtime="20241124 14:29:02.960"/>
</try>
<status status="PASS" starttime="20241124 14:29:02.477" endtime="20241124 14:29:02.960"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.477" endtime="20241124 14:29:02.960"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.960"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:02.976" endtime="20241124 14:29:02.976"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.993" endtime="20241124 14:29:02.993"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.960" endtime="20241124 14:29:02.993"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.993" endtime="20241124 14:29:02.993"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.993" endtime="20241124 14:29:02.993"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.993" endtime="20241124 14:29:02.993"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:02.993" endtime="20241124 14:29:02.993"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.993" endtime="20241124 14:29:02.993"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:02.993" endtime="20241124 14:29:02.993"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:02.993" endtime="20241124 14:29:02.993"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:03.016" endtime="20241124 14:29:03.017"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:03.019" endtime="20241124 14:29:03.019"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:02.993" endtime="20241124 14:29:03.019"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:03.026" endtime="20241124 14:29:03.026"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:03.026" endtime="20241124 14:29:03.026"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:03.026" endtime="20241124 14:29:03.026"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:03.026" endtime="20241124 14:29:03.026"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:03.026" endtime="20241124 14:29:03.026"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:03.026" endtime="20241124 14:29:03.026"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:03.019" endtime="20241124 14:29:03.026"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:03.026" endtime="20241124 14:29:03.026"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:03.026" endtime="20241124 14:29:03.026"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:03.026" endtime="20241124 14:29:03.026"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:03.042" endtime="20241124 14:29:03.042"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:03.026" endtime="20241124 14:29:03.042"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.444" endtime="20241124 14:29:03.042"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:03.043" endtime="20241124 14:29:03.043"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:04.058" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241124 14:29:03.043" endtime="20241124 14:29:04.058"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:04.058" endtime="20241124 14:29:04.058"/>
</return>
<msg timestamp="20241124 14:29:04.059" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:02.444" endtime="20241124 14:29:04.059"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.059" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.059" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.059" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.059" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.059" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.059" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.059" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.059" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:04.059" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<msg timestamp="20241124 14:29:04.059" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.059"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.074" endtime="20241124 14:29:04.074"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.074"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.074"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.074"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.075"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</return>
<msg timestamp="20241124 14:29:04.075" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.075"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</kw>
<msg timestamp="20241124 14:29:04.075" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.075" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.075" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</kw>
<status status="PASS" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</if>
<status status="PASS" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</return>
<msg timestamp="20241124 14:29:04.075" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.075"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.091"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.091" endtime="20241124 14:29:04.091"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:04.091" endtime="20241124 14:29:04.092"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.091" endtime="20241124 14:29:04.092"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.092"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.092"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.092"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.092"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.075" endtime="20241124 14:29:04.092"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</if>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</if>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.092"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.092" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.092" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.092" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.092" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.092" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.092" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.092" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:04.092" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<msg timestamp="20241124 14:29:04.092" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</return>
<msg timestamp="20241124 14:29:04.092" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.092"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:04.109" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<msg timestamp="20241124 14:29:04.109" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:04.108" endtime="20241124 14:29:04.109"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</return>
<msg timestamp="20241124 14:29:04.109" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.109"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</if>
<status status="PASS" starttime="20241124 14:29:04.092" endtime="20241124 14:29:04.109"/>
</iter>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.109"/>
</for>
<msg timestamp="20241124 14:29:04.109" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:29:04.059" endtime="20241124 14:29:04.109"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:04.109" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '298', 'status': 'COMPLETED', 'actionName': 'Set login username', 'actionType': 'TYPE_TEXT', 'actionXpath': 'id=username', 'inputValue': 'bharani@ideas2it.com', 'errorM...</msg>
<status status="PASS" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.109"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:04.126" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "298", "status": "COMPLETED", "actionName": "Set login username", "actionType": "TYPE_TEXT", "actionXpath": "id=username", "inputValue": "bharani@ideas2it.com", "errorM...</msg>
<status status="PASS" starttime="20241124 14:29:04.124" endtime="20241124 14:29:04.126"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:04.126" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:04.126" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:04.126" endtime="20241124 14:29:04.126"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:04.126" endtime="20241124 14:29:04.126"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:04.126" endtime="20241124 14:29:04.126"/>
</return>
<status status="PASS" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.126"/>
</kw>
<status status="PASS" starttime="20241124 14:29:04.109" endtime="20241124 14:29:04.126"/>
</kw>
<status status="PASS" starttime="20241124 14:29:02.427" endtime="20241124 14:29:04.126"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.126" endtime="20241124 14:29:04.126"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:04.126" endtime="20241124 14:29:04.126"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.135" endtime="20241124 14:29:04.135"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.126" endtime="20241124 14:29:04.135"/>
</branch>
<status status="PASS" starttime="20241124 14:29:02.427" endtime="20241124 14:29:04.135"/>
</try>
<status status="PASS" starttime="20241124 14:29:02.427" endtime="20241124 14:29:04.135"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '44', 'actionId': '31', 'flowId': '14', 'order': 3, 'createdAt': '2024-11-21T16:43:09.646Z', 'updatedAt': '2024-11-22T04:20:41.481Z', 'action': {'id': '31', 'name': 'Click login button', 'type'...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.136" level="INFO">${action} = {'id': '31', 'name': 'Click login button', 'type': 'CLICK', 'xpath': '//button[@type="submit" and text()="Login"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:41:25.179Z', 'updated...</msg>
<status status="PASS" starttime="20241124 14:29:04.136" endtime="20241124 14:29:04.136"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:04.136" endtime="20241124 14:29:04.137"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:04.137" level="INFO">${input} = {'id': '28', 'actionId': '31', 'name': 'Input 01', 'value': '', 'waitAfterAction': '5', 'isDefault': True, 'createdAt': '2024-11-21T16:41:25.706Z', 'updatedAt': '2024-11-21T17:38:31.563Z'}</msg>
<status status="PASS" starttime="20241124 14:29:04.137" endtime="20241124 14:29:04.137"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.138" endtime="20241124 14:29:04.138"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.138" endtime="20241124 14:29:04.138"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.138" endtime="20241124 14:29:04.138"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.137" endtime="20241124 14:29:04.138"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:04.139" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:04.139" endtime="20241124 14:29:04.139"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:04.139" endtime="20241124 14:29:04.140"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.139" endtime="20241124 14:29:04.140"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:04.140" endtime="20241124 14:29:04.140"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.140" endtime="20241124 14:29:04.140"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:04.159" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:04.146" endtime="20241124 14:29:04.159"/>
</kw>
<msg timestamp="20241124 14:29:04.159" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.146" endtime="20241124 14:29:04.159"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.159"/>
</return>
<status status="PASS" starttime="20241124 14:29:04.146" endtime="20241124 14:29:04.159"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.159"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.159"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.159"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.146" endtime="20241124 14:29:04.159"/>
</try>
<msg timestamp="20241124 14:29:04.159" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.146" endtime="20241124 14:29:04.159"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.159"/>
</return>
<status status="PASS" starttime="20241124 14:29:04.146" endtime="20241124 14:29:04.159"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.159"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.159"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.146" endtime="20241124 14:29:04.159"/>
</try>
<msg timestamp="20241124 14:29:04.159" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.146" endtime="20241124 14:29:04.159"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.159"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.159"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.159"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.159"/>
</if>
<status status="PASS" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.159"/>
</kw>
<status status="PASS" starttime="20241124 14:29:04.146" endtime="20241124 14:29:04.159"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:04.175" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state visible</msg>
<status status="PASS" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.175"/>
</kw>
<msg timestamp="20241124 14:29:04.175" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.175"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.175"/>
</return>
<status status="PASS" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.175"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.175"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.175"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.175"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.175"/>
</try>
<msg timestamp="20241124 14:29:04.175" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.175"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.175"/>
</return>
<msg timestamp="20241124 14:29:04.175" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.175"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.175"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.175"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.175"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.175"/>
</if>
<status status="PASS" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.175"/>
</kw>
<status status="PASS" starttime="20241124 14:29:04.159" endtime="20241124 14:29:04.175"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:04.192" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state enabled</msg>
<status status="PASS" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.192"/>
</kw>
<msg timestamp="20241124 14:29:04.192" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.192"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.192"/>
</return>
<status status="PASS" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.192"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.192"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.192"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.192"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.192"/>
</try>
<msg timestamp="20241124 14:29:04.192" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.192"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.192"/>
</return>
<msg timestamp="20241124 14:29:04.192" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.192"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.192"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.192"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.192"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.192"/>
</if>
<status status="PASS" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.192"/>
</kw>
<status status="PASS" starttime="20241124 14:29:04.175" endtime="20241124 14:29:04.192"/>
</kw>
<status status="PASS" starttime="20241124 14:29:04.145" endtime="20241124 14:29:04.192"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:04.192" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.192"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.208" endtime="20241124 14:29:04.208"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.208" endtime="20241124 14:29:04.208"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:04.208" endtime="20241124 14:29:04.208"/>
</kw>
<status status="PASS" starttime="20241124 14:29:04.208" endtime="20241124 14:29:04.208"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.208" endtime="20241124 14:29:04.208"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241124 14:29:04.208" endtime="20241124 14:29:04.242"/>
</kw>
<status status="PASS" starttime="20241124 14:29:04.208" endtime="20241124 14:29:04.242"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.242" endtime="20241124 14:29:04.242"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.242" endtime="20241124 14:29:04.242"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.242" endtime="20241124 14:29:04.242"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.208" endtime="20241124 14:29:04.242"/>
</try>
<status status="PASS" starttime="20241124 14:29:04.207" endtime="20241124 14:29:04.242"/>
</kw>
<status status="PASS" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.242"/>
</kw>
<status status="PASS" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.242"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.242" endtime="20241124 14:29:04.242"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.242" endtime="20241124 14:29:04.242"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.192" endtime="20241124 14:29:04.242"/>
</try>
<status status="PASS" starttime="20241124 14:29:04.143" endtime="20241124 14:29:04.242"/>
</kw>
<status status="PASS" starttime="20241124 14:29:04.140" endtime="20241124 14:29:04.242"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.242" endtime="20241124 14:29:04.242"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.242" endtime="20241124 14:29:04.242"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.242" endtime="20241124 14:29:04.242"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.257" endtime="20241124 14:29:04.257"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.242" endtime="20241124 14:29:04.258"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.258"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:04.275" endtime="20241124 14:29:04.275"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.275" endtime="20241124 14:29:04.275"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.258" endtime="20241124 14:29:04.275"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.275" endtime="20241124 14:29:04.275"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.275" endtime="20241124 14:29:04.275"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.275" endtime="20241124 14:29:04.275"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.275" endtime="20241124 14:29:04.275"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.275" endtime="20241124 14:29:04.275"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.275" endtime="20241124 14:29:04.275"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.275" endtime="20241124 14:29:04.275"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:04.275" endtime="20241124 14:29:04.275"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.291" endtime="20241124 14:29:04.291"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.275" endtime="20241124 14:29:04.291"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.139" endtime="20241124 14:29:04.292"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:04.292" endtime="20241124 14:29:04.292"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:09.354" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20241124 14:29:04.292" endtime="20241124 14:29:09.354"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:09.354" endtime="20241124 14:29:09.354"/>
</return>
<msg timestamp="20241124 14:29:09.354" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:04.138" endtime="20241124 14:29:09.354"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.354" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:44</msg>
<status status="PASS" starttime="20241124 14:29:09.354" endtime="20241124 14:29:09.354"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.354" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:09.354" endtime="20241124 14:29:09.354"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.354" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:09.354" endtime="20241124 14:29:09.354"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.354" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:09.354" endtime="20241124 14:29:09.354"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.370" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:09.370" endtime="20241124 14:29:09.370"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.370" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:09.370" endtime="20241124 14:29:09.370"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.370" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:09.370" endtime="20241124 14:29:09.370"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.370" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:09.370" endtime="20241124 14:29:09.370"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:09.370" endtime="20241124 14:29:09.370"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:09.387" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:09.370" endtime="20241124 14:29:09.387"/>
</kw>
<msg timestamp="20241124 14:29:09.387" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:09.370" endtime="20241124 14:29:09.387"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.387" endtime="20241124 14:29:09.387"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.387" endtime="20241124 14:29:09.387"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.387" endtime="20241124 14:29:09.387"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.387" endtime="20241124 14:29:09.387"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.387" endtime="20241124 14:29:09.404"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.387" endtime="20241124 14:29:09.404"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.387" endtime="20241124 14:29:09.404"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.387" endtime="20241124 14:29:09.404"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.404"/>
</return>
<msg timestamp="20241124 14:29:09.404" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:09.370" endtime="20241124 14:29:09.404"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.404"/>
</kw>
<msg timestamp="20241124 14:29:09.404" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.404"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.404" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.404"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.404" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.404"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.404"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.404"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.404"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.404"/>
</if>
<status status="PASS" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.404"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.404"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.419"/>
</return>
<msg timestamp="20241124 14:29:09.421" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.404" endtime="20241124 14:29:09.421"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.421"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.436" endtime="20241124 14:29:09.437"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:09.437" endtime="20241124 14:29:09.438"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.438"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.438"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.438"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.438"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.438"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.421" endtime="20241124 14:29:09.438"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:09.440" endtime="20241124 14:29:09.440"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.439" endtime="20241124 14:29:09.440"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.439" endtime="20241124 14:29:09.440"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.441" endtime="20241124 14:29:09.441"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.440" endtime="20241124 14:29:09.441"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.440" endtime="20241124 14:29:09.441"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.442" endtime="20241124 14:29:09.442"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.442" endtime="20241124 14:29:09.442"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:09.443" endtime="20241124 14:29:09.443"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.442" endtime="20241124 14:29:09.443"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.443" endtime="20241124 14:29:09.443"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:09.444" endtime="20241124 14:29:09.444"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.443" endtime="20241124 14:29:09.444"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.442" endtime="20241124 14:29:09.444"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.441" endtime="20241124 14:29:09.444"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.441" endtime="20241124 14:29:09.444"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.439" endtime="20241124 14:29:09.444"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.439" endtime="20241124 14:29:09.445"/>
</if>
<status status="PASS" starttime="20241124 14:29:09.354" endtime="20241124 14:29:09.445"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.446" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:09.445" endtime="20241124 14:29:09.446"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.447" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:09.446" endtime="20241124 14:29:09.447"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.447" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:09.447" endtime="20241124 14:29:09.447"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.447" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:09.447" endtime="20241124 14:29:09.447"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.447" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.447" endtime="20241124 14:29:09.447"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.447" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:09.447" endtime="20241124 14:29:09.447"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.454" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:09.452" endtime="20241124 14:29:09.454"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:09.454" endtime="20241124 14:29:09.454"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:09.454" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:29:09.454" endtime="20241124 14:29:09.454"/>
</kw>
<msg timestamp="20241124 14:29:09.454" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:09.454" endtime="20241124 14:29:09.454"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.454" endtime="20241124 14:29:09.454"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.454" endtime="20241124 14:29:09.454"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.454" endtime="20241124 14:29:09.454"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.469" endtime="20241124 14:29:09.469"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.454" endtime="20241124 14:29:09.470"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.454" endtime="20241124 14:29:09.470"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.454" endtime="20241124 14:29:09.470"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.454" endtime="20241124 14:29:09.470"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:09.470" endtime="20241124 14:29:09.470"/>
</return>
<msg timestamp="20241124 14:29:09.470" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:09.454" endtime="20241124 14:29:09.470"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:09.470" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:09.470" endtime="20241124 14:29:09.470"/>
</kw>
<msg timestamp="20241124 14:29:09.470" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:09.470" endtime="20241124 14:29:09.470"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.470" endtime="20241124 14:29:09.470"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.470" endtime="20241124 14:29:09.486"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.470" endtime="20241124 14:29:09.486"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.470" endtime="20241124 14:29:09.487"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.470" endtime="20241124 14:29:09.487"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.470" endtime="20241124 14:29:09.487"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</return>
<msg timestamp="20241124 14:29:09.487" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:09.470" endtime="20241124 14:29:09.487"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.487"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.503"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.503"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.503"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.487" endtime="20241124 14:29:09.504"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</if>
<status status="PASS" starttime="20241124 14:29:09.445" endtime="20241124 14:29:09.504"/>
</iter>
<status status="PASS" starttime="20241124 14:29:09.354" endtime="20241124 14:29:09.504"/>
</for>
<msg timestamp="20241124 14:29:09.504" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:29:09.354" endtime="20241124 14:29:09.504"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.504"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:09.521" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '299', 'status': 'COMPLETED', 'actionName': 'Click login button', 'actionType': 'CLICK', 'actionXpath': '//button[@type="submit" and text()="Login"]', 'inputValue': '',...</msg>
<status status="PASS" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.521"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:09.521" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "299", "status": "COMPLETED", "actionName": "Click login button", "actionType": "CLICK", "actionXpath": "//button[@type=\"submit\" and text()=\"Login\"]", "inputValue":...</msg>
<status status="PASS" starttime="20241124 14:29:09.521" endtime="20241124 14:29:09.521"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:09.521" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:09.521" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:09.521" endtime="20241124 14:29:09.521"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:09.521" endtime="20241124 14:29:09.521"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:09.536" endtime="20241124 14:29:09.537"/>
</return>
<status status="PASS" starttime="20241124 14:29:09.521" endtime="20241124 14:29:09.537"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.504" endtime="20241124 14:29:09.537"/>
</kw>
<status status="PASS" starttime="20241124 14:29:04.135" endtime="20241124 14:29:09.537"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.537" endtime="20241124 14:29:09.537"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:09.537" endtime="20241124 14:29:09.537"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.537" endtime="20241124 14:29:09.537"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.537" endtime="20241124 14:29:09.537"/>
</branch>
<status status="PASS" starttime="20241124 14:29:04.135" endtime="20241124 14:29:09.537"/>
</try>
<status status="PASS" starttime="20241124 14:29:04.135" endtime="20241124 14:29:09.537"/>
</iter>
<status status="PASS" starttime="20241124 14:28:53.604" endtime="20241124 14:29:09.537"/>
</for>
<status status="PASS" starttime="20241124 14:28:53.604" endtime="20241124 14:29:09.537"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.604" endtime="20241124 14:29:09.537"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:09.537" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '79', 'status': 'COMPLETED', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241124 14:29:09.537" endtime="20241124 14:29:09.537"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:09.554" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "79", "status": "COMPLETED", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241124 14:29:09.554" endtime="20241124 14:29:09.554"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:09.554" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:09.554" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:09.554" endtime="20241124 14:29:09.554"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:09.554" endtime="20241124 14:29:09.570"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:09.570" endtime="20241124 14:29:09.570"/>
</return>
<status status="PASS" starttime="20241124 14:29:09.554" endtime="20241124 14:29:09.570"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.537" endtime="20241124 14:29:09.570"/>
</kw>
<status status="PASS" starttime="20241124 14:28:53.592" endtime="20241124 14:29:09.570"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.570" endtime="20241124 14:29:09.570"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:09.570" endtime="20241124 14:29:09.570"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.570" endtime="20241124 14:29:09.570"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.570" endtime="20241124 14:29:09.570"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.592" endtime="20241124 14:29:09.570"/>
</try>
<status status="PASS" starttime="20241124 14:28:53.592" endtime="20241124 14:29:09.570"/>
</iter>
<iter>
<var name="${testCaseFlowSequence}">{'id': '47', 'testCaseId': '27', 'flowId': '15', 'order': 1, 'createdAt': '2024-11-21T17:34:46.435Z', 'updatedAt': '2024-11-24T06:57:13.421Z', 'flow': {'id': '15', 'name': 'Navigate to profile', 'proj...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.570" level="INFO">${flow} = {'id': '15', 'name': 'Navigate to profile', 'projectId': '4', 'createdAt': '2024-11-21T17:34:26.845Z', 'updatedAt': '2024-11-24T06:43:12.878Z', 'flowActionSequences': [{'id': '45', 'actionId': '32', '...</msg>
<status status="PASS" starttime="20241124 14:29:09.570" endtime="20241124 14:29:09.570"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:09.570" endtime="20241124 14:29:09.587"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:09.587" endtime="20241124 14:29:09.587"/>
</kw>
<msg timestamp="20241124 14:29:09.587" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.587" endtime="20241124 14:29:09.587"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.587" level="INFO">${values} = [{'id': '45', 'actionId': '32', 'flowId': '15', 'order': 0, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.562Z', 'action': {'id': '32', 'name': 'Click Profile image icon',...</msg>
<status status="PASS" starttime="20241124 14:29:09.587" endtime="20241124 14:29:09.587"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.604" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.604" endtime="20241124 14:29:09.604"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.604" endtime="20241124 14:29:09.604"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.604" endtime="20241124 14:29:09.604"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.604" endtime="20241124 14:29:09.604"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.587" endtime="20241124 14:29:09.604"/>
</if>
<status status="PASS" starttime="20241124 14:29:09.587" endtime="20241124 14:29:09.604"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.587" endtime="20241124 14:29:09.604"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:09.604" endtime="20241124 14:29:09.604"/>
</return>
<msg timestamp="20241124 14:29:09.604" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.587" endtime="20241124 14:29:09.604"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '45', 'actionId': '32', 'flowId': '15', 'order': 0, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.562Z', 'action': {'id': '32', 'name': 'Click Profile image icon', ...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.620" level="INFO">${action} = {'id': '32', 'name': 'Click Profile image icon', 'type': 'CLICK', 'xpath': 'id=headerProfileImage', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T17:30:46.836Z', 'updatedAt': '2024-11-21...</msg>
<status status="PASS" starttime="20241124 14:29:09.620" endtime="20241124 14:29:09.620"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:09.620" endtime="20241124 14:29:09.620"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:09.620" level="INFO">${input} = {'id': '29', 'actionId': '32', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-21T17:30:47.048Z', 'updatedAt': '2024-11-21T17:30:47.048Z'}</msg>
<status status="PASS" starttime="20241124 14:29:09.620" endtime="20241124 14:29:09.620"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.620" endtime="20241124 14:29:09.620"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.620" endtime="20241124 14:29:09.620"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.620" endtime="20241124 14:29:09.620"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.620" endtime="20241124 14:29:09.620"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:09.640" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:09.638" endtime="20241124 14:29:09.640"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:09.642" endtime="20241124 14:29:09.643"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.641" endtime="20241124 14:29:09.643"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:09.644" endtime="20241124 14:29:09.644"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.644" endtime="20241124 14:29:09.645"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:09.693" level="INFO">Waited for Element with selector id=headerProfileImage at state attached</msg>
<status status="PASS" starttime="20241124 14:29:09.677" endtime="20241124 14:29:09.694"/>
</kw>
<msg timestamp="20241124 14:29:09.694" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.676" endtime="20241124 14:29:09.694"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:09.695" endtime="20241124 14:29:09.695"/>
</return>
<status status="PASS" starttime="20241124 14:29:09.676" endtime="20241124 14:29:09.695"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.696" endtime="20241124 14:29:09.696"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.697" endtime="20241124 14:29:09.697"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.696" endtime="20241124 14:29:09.698"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.675" endtime="20241124 14:29:09.698"/>
</try>
<msg timestamp="20241124 14:29:09.699" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.671" endtime="20241124 14:29:09.699"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:09.699" endtime="20241124 14:29:09.700"/>
</return>
<status status="PASS" starttime="20241124 14:29:09.661" endtime="20241124 14:29:09.700"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:09.700" endtime="20241124 14:29:09.701"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:09.700" endtime="20241124 14:29:09.701"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.661" endtime="20241124 14:29:09.701"/>
</try>
<msg timestamp="20241124 14:29:09.702" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.661" endtime="20241124 14:29:09.702"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.704" endtime="20241124 14:29:09.704"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.704" endtime="20241124 14:29:09.704"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.704" endtime="20241124 14:29:09.704"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.704" endtime="20241124 14:29:09.704"/>
</if>
<status status="PASS" starttime="20241124 14:29:09.704" endtime="20241124 14:29:09.704"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.661" endtime="20241124 14:29:09.704"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:09.737" level="INFO">Waited for Element with selector id=headerProfileImage at state visible</msg>
<status status="PASS" starttime="20241124 14:29:09.720" endtime="20241124 14:29:09.737"/>
</kw>
<msg timestamp="20241124 14:29:09.737" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.720" endtime="20241124 14:29:09.737"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:09.737" endtime="20241124 14:29:09.737"/>
</return>
<status status="PASS" starttime="20241124 14:29:09.720" endtime="20241124 14:29:09.737"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.737" endtime="20241124 14:29:09.737"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.737" endtime="20241124 14:29:09.737"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.737" endtime="20241124 14:29:09.737"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.704" endtime="20241124 14:29:09.737"/>
</try>
<msg timestamp="20241124 14:29:09.737" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.704" endtime="20241124 14:29:09.737"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:09.737" endtime="20241124 14:29:09.737"/>
</return>
<msg timestamp="20241124 14:29:09.737" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.704" endtime="20241124 14:29:09.737"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.737" endtime="20241124 14:29:09.737"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.737" endtime="20241124 14:29:09.752"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.737" endtime="20241124 14:29:09.752"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.737" endtime="20241124 14:29:09.752"/>
</if>
<status status="PASS" starttime="20241124 14:29:09.737" endtime="20241124 14:29:09.753"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.704" endtime="20241124 14:29:09.753"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:09.824" level="INFO">Waited for Element with selector id=headerProfileImage at state enabled</msg>
<status status="PASS" starttime="20241124 14:29:09.776" endtime="20241124 14:29:09.824"/>
</kw>
<msg timestamp="20241124 14:29:09.825" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.775" endtime="20241124 14:29:09.825"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:09.826" endtime="20241124 14:29:09.826"/>
</return>
<status status="PASS" starttime="20241124 14:29:09.774" endtime="20241124 14:29:09.827"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.827" endtime="20241124 14:29:09.827"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.827" endtime="20241124 14:29:09.827"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.827" endtime="20241124 14:29:09.827"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.774" endtime="20241124 14:29:09.827"/>
</try>
<msg timestamp="20241124 14:29:09.827" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.753" endtime="20241124 14:29:09.827"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:09.827" endtime="20241124 14:29:09.827"/>
</return>
<msg timestamp="20241124 14:29:09.827" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241124 14:29:09.753" endtime="20241124 14:29:09.827"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.843" endtime="20241124 14:29:09.843"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.844" endtime="20241124 14:29:09.844"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.842" endtime="20241124 14:29:09.844"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.842" endtime="20241124 14:29:09.845"/>
</if>
<status status="PASS" starttime="20241124 14:29:09.838" endtime="20241124 14:29:09.845"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.753" endtime="20241124 14:29:09.847"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.655" endtime="20241124 14:29:09.847"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:09.849" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:29:09.848" endtime="20241124 14:29:09.849"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.856" endtime="20241124 14:29:09.856"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.855" endtime="20241124 14:29:09.856"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:09.857" endtime="20241124 14:29:09.859"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.857" endtime="20241124 14:29:09.859"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.854" endtime="20241124 14:29:09.859"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241124 14:29:09.861" endtime="20241124 14:29:09.936"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.860" endtime="20241124 14:29:09.936"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.938" endtime="20241124 14:29:09.938"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.939" endtime="20241124 14:29:09.939"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.937" endtime="20241124 14:29:09.940"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.860" endtime="20241124 14:29:09.940"/>
</try>
<status status="PASS" starttime="20241124 14:29:09.849" endtime="20241124 14:29:09.941"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.849" endtime="20241124 14:29:09.941"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.849" endtime="20241124 14:29:09.941"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.943" endtime="20241124 14:29:09.943"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.942" endtime="20241124 14:29:09.943"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.849" endtime="20241124 14:29:09.944"/>
</try>
<status status="PASS" starttime="20241124 14:29:09.651" endtime="20241124 14:29:09.944"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.645" endtime="20241124 14:29:09.944"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.952" endtime="20241124 14:29:09.952"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.959" endtime="20241124 14:29:09.960"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.945" endtime="20241124 14:29:09.960"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.965" endtime="20241124 14:29:09.965"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.961" endtime="20241124 14:29:09.965"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.979" endtime="20241124 14:29:09.979"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.965" endtime="20241124 14:29:09.980"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.988" endtime="20241124 14:29:09.988"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.980" endtime="20241124 14:29:09.989"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.992" endtime="20241124 14:29:09.993"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.989" endtime="20241124 14:29:09.993"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.997" endtime="20241124 14:29:09.997"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.998" endtime="20241124 14:29:09.999"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.998" endtime="20241124 14:29:09.999"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:09.999" endtime="20241124 14:29:09.999"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:09.999" endtime="20241124 14:29:09.999"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:09.998" endtime="20241124 14:29:10.004"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:09.993" endtime="20241124 14:29:10.005"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:10.018" endtime="20241124 14:29:10.018"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.026" endtime="20241124 14:29:10.026"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.006" endtime="20241124 14:29:10.026"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.029" endtime="20241124 14:29:10.029"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.030" endtime="20241124 14:29:10.030"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.029" endtime="20241124 14:29:10.030"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.032" endtime="20241124 14:29:10.032"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.031" endtime="20241124 14:29:10.032"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.029" endtime="20241124 14:29:10.032"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.026" endtime="20241124 14:29:10.033"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:10.056" endtime="20241124 14:29:10.057"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.062" endtime="20241124 14:29:10.063"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.033" endtime="20241124 14:29:10.063"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.065" endtime="20241124 14:29:10.065"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.065" endtime="20241124 14:29:10.065"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.065" endtime="20241124 14:29:10.065"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.070" endtime="20241124 14:29:10.070"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.065" endtime="20241124 14:29:10.070"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.065" endtime="20241124 14:29:10.071"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.063" endtime="20241124 14:29:10.071"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.078" endtime="20241124 14:29:10.079"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.071" endtime="20241124 14:29:10.079"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:10.095" endtime="20241124 14:29:10.095"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.096" endtime="20241124 14:29:10.096"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.080" endtime="20241124 14:29:10.096"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.640" endtime="20241124 14:29:10.096"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:10.097" endtime="20241124 14:29:10.097"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:10.099" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:29:10.098" endtime="20241124 14:29:10.099"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:10.099" endtime="20241124 14:29:10.100"/>
</return>
<msg timestamp="20241124 14:29:10.101" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:09.620" endtime="20241124 14:29:10.101"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.103" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:45</msg>
<status status="PASS" starttime="20241124 14:29:10.103" endtime="20241124 14:29:10.103"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.103" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:10.103" endtime="20241124 14:29:10.103"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.103" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:10.103" endtime="20241124 14:29:10.103"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.103" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:10.103" endtime="20241124 14:29:10.103"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.103" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:10.103" endtime="20241124 14:29:10.103"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.103" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:10.103" endtime="20241124 14:29:10.103"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.103" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:10.103" endtime="20241124 14:29:10.118"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.123" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:10.122" endtime="20241124 14:29:10.123"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:10.124" endtime="20241124 14:29:10.125"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:10.137" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:10.132" endtime="20241124 14:29:10.137"/>
</kw>
<msg timestamp="20241124 14:29:10.138" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:10.132" endtime="20241124 14:29:10.138"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.141" endtime="20241124 14:29:10.142"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.146" endtime="20241124 14:29:10.147"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.145" endtime="20241124 14:29:10.147"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.148" endtime="20241124 14:29:10.149"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.148" endtime="20241124 14:29:10.151"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.144" endtime="20241124 14:29:10.151"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.140" endtime="20241124 14:29:10.152"/>
</branch>
<status status="PASS" starttime="20241124 14:29:10.138" endtime="20241124 14:29:10.154"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:10.157" endtime="20241124 14:29:10.158"/>
</return>
<msg timestamp="20241124 14:29:10.159" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:10.130" endtime="20241124 14:29:10.159"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:10.167" endtime="20241124 14:29:10.168"/>
</kw>
<msg timestamp="20241124 14:29:10.168" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:10.166" endtime="20241124 14:29:10.168"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.172" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:10.171" endtime="20241124 14:29:10.172"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.176" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:10.175" endtime="20241124 14:29:10.176"/>
</kw>
<status status="PASS" starttime="20241124 14:29:10.174" endtime="20241124 14:29:10.176"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.177" endtime="20241124 14:29:10.178"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.177" endtime="20241124 14:29:10.178"/>
</branch>
<status status="PASS" starttime="20241124 14:29:10.173" endtime="20241124 14:29:10.178"/>
</if>
<status status="PASS" starttime="20241124 14:29:10.170" endtime="20241124 14:29:10.178"/>
</branch>
<status status="PASS" starttime="20241124 14:29:10.170" endtime="20241124 14:29:10.179"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:10.179" endtime="20241124 14:29:10.179"/>
</return>
<msg timestamp="20241124 14:29:10.180" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:10.164" endtime="20241124 14:29:10.180"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:10.182" endtime="20241124 14:29:10.182"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.182" endtime="20241124 14:29:10.182"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.182" endtime="20241124 14:29:10.182"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.189" endtime="20241124 14:29:10.190"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:10.190" endtime="20241124 14:29:10.191"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.187" endtime="20241124 14:29:10.192"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.193" endtime="20241124 14:29:10.193"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:10.193" endtime="20241124 14:29:10.195"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.192" endtime="20241124 14:29:10.195"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.186" endtime="20241124 14:29:10.195"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.182" endtime="20241124 14:29:10.195"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.182" endtime="20241124 14:29:10.196"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.197" endtime="20241124 14:29:10.198"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:10.198" endtime="20241124 14:29:10.198"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.197" endtime="20241124 14:29:10.199"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.201" endtime="20241124 14:29:10.201"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:10.202" endtime="20241124 14:29:10.202"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.200" endtime="20241124 14:29:10.203"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.197" endtime="20241124 14:29:10.204"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.196" endtime="20241124 14:29:10.204"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.196" endtime="20241124 14:29:10.204"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.182" endtime="20241124 14:29:10.205"/>
</branch>
<status status="PASS" starttime="20241124 14:29:10.181" endtime="20241124 14:29:10.205"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:10.207" endtime="20241124 14:29:10.207"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.206" endtime="20241124 14:29:10.207"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.206" endtime="20241124 14:29:10.207"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.209" endtime="20241124 14:29:10.209"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.208" endtime="20241124 14:29:10.209"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.208" endtime="20241124 14:29:10.210"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.211" endtime="20241124 14:29:10.211"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.213" endtime="20241124 14:29:10.214"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:10.214" endtime="20241124 14:29:10.215"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.212" endtime="20241124 14:29:10.215"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.215" endtime="20241124 14:29:10.215"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:10.215" endtime="20241124 14:29:10.215"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.215" endtime="20241124 14:29:10.215"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.212" endtime="20241124 14:29:10.215"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.210" endtime="20241124 14:29:10.215"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.210" endtime="20241124 14:29:10.220"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.206" endtime="20241124 14:29:10.221"/>
</branch>
<status status="PASS" starttime="20241124 14:29:10.205" endtime="20241124 14:29:10.221"/>
</if>
<status status="PASS" starttime="20241124 14:29:10.103" endtime="20241124 14:29:10.221"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.224" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:10.223" endtime="20241124 14:29:10.224"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.226" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:10.224" endtime="20241124 14:29:10.226"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.228" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:10.227" endtime="20241124 14:29:10.228"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.231" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:10.229" endtime="20241124 14:29:10.231"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.232" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:10.232" endtime="20241124 14:29:10.232"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.232" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:10.232" endtime="20241124 14:29:10.238"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:10.240" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:10.239" endtime="20241124 14:29:10.240"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:10.241" endtime="20241124 14:29:10.242"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:10.259" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:29:10.257" endtime="20241124 14:29:10.259"/>
</kw>
<msg timestamp="20241124 14:29:10.260" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:10.256" endtime="20241124 14:29:10.260"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.261" endtime="20241124 14:29:10.262"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.263" endtime="20241124 14:29:10.263"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.262" endtime="20241124 14:29:10.263"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.264" endtime="20241124 14:29:10.264"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.264" endtime="20241124 14:29:10.265"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.262" endtime="20241124 14:29:10.265"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.261" endtime="20241124 14:29:10.266"/>
</branch>
<status status="PASS" starttime="20241124 14:29:10.260" endtime="20241124 14:29:10.266"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:10.267" endtime="20241124 14:29:10.267"/>
</return>
<msg timestamp="20241124 14:29:10.271" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:10.254" endtime="20241124 14:29:10.271"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:10.280" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:10.279" endtime="20241124 14:29:10.280"/>
</kw>
<msg timestamp="20241124 14:29:10.280" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:10.278" endtime="20241124 14:29:10.280"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.288" endtime="20241124 14:29:10.288"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.290" endtime="20241124 14:29:10.291"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.290" endtime="20241124 14:29:10.291"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.292" endtime="20241124 14:29:10.292"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.291" endtime="20241124 14:29:10.292"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.289" endtime="20241124 14:29:10.293"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.280" endtime="20241124 14:29:10.293"/>
</branch>
<status status="PASS" starttime="20241124 14:29:10.280" endtime="20241124 14:29:10.293"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:10.293" endtime="20241124 14:29:10.294"/>
</return>
<msg timestamp="20241124 14:29:10.295" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:10.276" endtime="20241124 14:29:10.295"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:10.297" endtime="20241124 14:29:10.297"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.297" endtime="20241124 14:29:10.298"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.296" endtime="20241124 14:29:10.299"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.303" endtime="20241124 14:29:10.304"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:10.304" endtime="20241124 14:29:10.305"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.299" endtime="20241124 14:29:10.305"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.306" endtime="20241124 14:29:10.306"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:10.306" endtime="20241124 14:29:10.307"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.305" endtime="20241124 14:29:10.307"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.299" endtime="20241124 14:29:10.308"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.299" endtime="20241124 14:29:10.309"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.299" endtime="20241124 14:29:10.309"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.312" endtime="20241124 14:29:10.313"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:10.313" endtime="20241124 14:29:10.313"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.311" endtime="20241124 14:29:10.313"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.315" endtime="20241124 14:29:10.315"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:10.315" endtime="20241124 14:29:10.315"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.315" endtime="20241124 14:29:10.315"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.311" endtime="20241124 14:29:10.315"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.310" endtime="20241124 14:29:10.315"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.310" endtime="20241124 14:29:10.315"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.296" endtime="20241124 14:29:10.315"/>
</branch>
<status status="PASS" starttime="20241124 14:29:10.295" endtime="20241124 14:29:10.315"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:10.321" endtime="20241124 14:29:10.321"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.321" endtime="20241124 14:29:10.321"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.320" endtime="20241124 14:29:10.322"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.323" endtime="20241124 14:29:10.323"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:10.322" endtime="20241124 14:29:10.324"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.322" endtime="20241124 14:29:10.324"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.325" endtime="20241124 14:29:10.325"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.326" endtime="20241124 14:29:10.327"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:10.327" endtime="20241124 14:29:10.327"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.326" endtime="20241124 14:29:10.328"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:10.328" endtime="20241124 14:29:10.329"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:10.329" endtime="20241124 14:29:10.329"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:10.328" endtime="20241124 14:29:10.330"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.326" endtime="20241124 14:29:10.330"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.324" endtime="20241124 14:29:10.330"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:10.324" endtime="20241124 14:29:10.330"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:10.315" endtime="20241124 14:29:10.331"/>
</branch>
<status status="PASS" starttime="20241124 14:29:10.315" endtime="20241124 14:29:10.331"/>
</if>
<status status="PASS" starttime="20241124 14:29:10.222" endtime="20241124 14:29:10.331"/>
</iter>
<status status="PASS" starttime="20241124 14:29:10.103" endtime="20241124 14:29:10.331"/>
</for>
<msg timestamp="20241124 14:29:10.332" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:29:10.101" endtime="20241124 14:29:10.332"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:10.333" endtime="20241124 14:29:10.344"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:10.357" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '300', 'status': 'COMPLETED', 'actionName': 'Click Profile image icon', 'actionType': 'CLICK', 'actionXpath': 'id=headerProfileImage', 'inputValue': '', 'errorMessage':...</msg>
<status status="PASS" starttime="20241124 14:29:10.348" endtime="20241124 14:29:10.357"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:10.361" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "300", "status": "COMPLETED", "actionName": "Click Profile image icon", "actionType": "CLICK", "actionXpath": "id=headerProfileImage", "inputValue": "", "errorMessage":...</msg>
<status status="PASS" starttime="20241124 14:29:10.359" endtime="20241124 14:29:10.361"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:11.402" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:11.417" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:10.361" endtime="20241124 14:29:11.417"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:11.418" endtime="20241124 14:29:11.428"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:11.428" endtime="20241124 14:29:11.434"/>
</return>
<status status="PASS" starttime="20241124 14:29:10.358" endtime="20241124 14:29:11.435"/>
</kw>
<status status="PASS" starttime="20241124 14:29:10.344" endtime="20241124 14:29:11.436"/>
</kw>
<status status="PASS" starttime="20241124 14:29:09.620" endtime="20241124 14:29:11.436"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.437" endtime="20241124 14:29:11.437"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:11.438" endtime="20241124 14:29:11.438"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.439" endtime="20241124 14:29:11.439"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:11.436" endtime="20241124 14:29:11.439"/>
</branch>
<status status="PASS" starttime="20241124 14:29:09.620" endtime="20241124 14:29:11.440"/>
</try>
<status status="PASS" starttime="20241124 14:29:09.620" endtime="20241124 14:29:11.440"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '46', 'actionId': '33', 'flowId': '15', 'order': 1, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.564Z', 'action': {'id': '33', 'name': 'Click Profile Dropdown acti...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:11.443" level="INFO">${action} = {'id': '33', 'name': 'Click Profile Dropdown action', 'type': 'CLICK', 'xpath': '//p[text()="Profile"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T17:32:01.896Z', 'updatedAt': '2024-...</msg>
<status status="PASS" starttime="20241124 14:29:11.442" endtime="20241124 14:29:11.443"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:11.444" endtime="20241124 14:29:11.445"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:11.446" level="INFO">${input} = {'id': '30', 'actionId': '33', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-21T17:32:02.118Z', 'updatedAt': '2024-11-21T17:32:02.118Z'}</msg>
<status status="PASS" starttime="20241124 14:29:11.445" endtime="20241124 14:29:11.446"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.448" endtime="20241124 14:29:11.448"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.449" endtime="20241124 14:29:11.449"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:11.447" endtime="20241124 14:29:11.449"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.447" endtime="20241124 14:29:11.450"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:11.452" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:11.451" endtime="20241124 14:29:11.452"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:11.454" endtime="20241124 14:29:11.454"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:11.453" endtime="20241124 14:29:11.455"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:11.456" endtime="20241124 14:29:11.456"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:11.455" endtime="20241124 14:29:11.456"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:11.526" level="INFO">Waited for Element with selector //p[text()="Profile"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:11.485" endtime="20241124 14:29:11.527"/>
</kw>
<msg timestamp="20241124 14:29:11.527" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:11.468" endtime="20241124 14:29:11.527"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:11.528" endtime="20241124 14:29:11.528"/>
</return>
<status status="PASS" starttime="20241124 14:29:11.468" endtime="20241124 14:29:11.528"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.529" endtime="20241124 14:29:11.529"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.530" endtime="20241124 14:29:11.530"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:11.528" endtime="20241124 14:29:11.530"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.468" endtime="20241124 14:29:11.530"/>
</try>
<msg timestamp="20241124 14:29:11.531" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:11.468" endtime="20241124 14:29:11.532"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:11.532" endtime="20241124 14:29:11.532"/>
</return>
<status status="PASS" starttime="20241124 14:29:11.468" endtime="20241124 14:29:11.532"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:11.533" endtime="20241124 14:29:11.533"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:11.533" endtime="20241124 14:29:11.533"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.468" endtime="20241124 14:29:11.534"/>
</try>
<msg timestamp="20241124 14:29:11.535" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:11.468" endtime="20241124 14:29:11.535"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.535" endtime="20241124 14:29:11.535"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.535" endtime="20241124 14:29:11.535"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:11.535" endtime="20241124 14:29:11.535"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.535" endtime="20241124 14:29:11.535"/>
</if>
<status status="PASS" starttime="20241124 14:29:11.535" endtime="20241124 14:29:11.535"/>
</kw>
<status status="PASS" starttime="20241124 14:29:11.468" endtime="20241124 14:29:11.535"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:11.568" level="INFO">Waited for Element with selector //p[text()="Profile"] at state visible</msg>
<status status="PASS" starttime="20241124 14:29:11.552" endtime="20241124 14:29:11.569"/>
</kw>
<msg timestamp="20241124 14:29:11.569" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:11.552" endtime="20241124 14:29:11.570"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:11.570" endtime="20241124 14:29:11.570"/>
</return>
<status status="PASS" starttime="20241124 14:29:11.552" endtime="20241124 14:29:11.570"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.571" endtime="20241124 14:29:11.572"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.572" endtime="20241124 14:29:11.573"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:11.571" endtime="20241124 14:29:11.573"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.552" endtime="20241124 14:29:11.573"/>
</try>
<msg timestamp="20241124 14:29:11.574" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:11.552" endtime="20241124 14:29:11.574"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:11.574" endtime="20241124 14:29:11.574"/>
</return>
<msg timestamp="20241124 14:29:11.575" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:11.551" endtime="20241124 14:29:11.575"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.582" endtime="20241124 14:29:11.582"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.583" endtime="20241124 14:29:11.584"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:11.582" endtime="20241124 14:29:11.584"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.581" endtime="20241124 14:29:11.584"/>
</if>
<status status="PASS" starttime="20241124 14:29:11.579" endtime="20241124 14:29:11.585"/>
</kw>
<status status="PASS" starttime="20241124 14:29:11.535" endtime="20241124 14:29:11.585"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:11.618" level="INFO">Waited for Element with selector //p[text()="Profile"] at state enabled</msg>
<status status="PASS" starttime="20241124 14:29:11.599" endtime="20241124 14:29:11.618"/>
</kw>
<msg timestamp="20241124 14:29:11.618" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:11.598" endtime="20241124 14:29:11.618"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:11.618" endtime="20241124 14:29:11.618"/>
</return>
<status status="PASS" starttime="20241124 14:29:11.597" endtime="20241124 14:29:11.618"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.618" endtime="20241124 14:29:11.618"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.618" endtime="20241124 14:29:11.618"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:11.618" endtime="20241124 14:29:11.618"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.597" endtime="20241124 14:29:11.618"/>
</try>
<msg timestamp="20241124 14:29:11.618" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:11.596" endtime="20241124 14:29:11.618"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:11.618" endtime="20241124 14:29:11.618"/>
</return>
<msg timestamp="20241124 14:29:11.618" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241124 14:29:11.592" endtime="20241124 14:29:11.618"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.638" endtime="20241124 14:29:11.638"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.638" endtime="20241124 14:29:11.639"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:11.637" endtime="20241124 14:29:11.639"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.637" endtime="20241124 14:29:11.639"/>
</if>
<status status="PASS" starttime="20241124 14:29:11.618" endtime="20241124 14:29:11.640"/>
</kw>
<status status="PASS" starttime="20241124 14:29:11.591" endtime="20241124 14:29:11.640"/>
</kw>
<status status="PASS" starttime="20241124 14:29:11.466" endtime="20241124 14:29:11.641"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:11.642" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:29:11.641" endtime="20241124 14:29:11.642"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241124 14:29:11.647" endtime="20241124 14:29:11.647"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:11.647" endtime="20241124 14:29:11.647"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:11.647" endtime="20241124 14:29:11.647"/>
</kw>
<status status="PASS" starttime="20241124 14:29:11.647" endtime="20241124 14:29:11.647"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.646" endtime="20241124 14:29:11.651"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241124 14:29:11.654" endtime="20241124 14:29:12.184"/>
</kw>
<status status="PASS" starttime="20241124 14:29:11.652" endtime="20241124 14:29:12.184"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.185" endtime="20241124 14:29:12.186"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.186" endtime="20241124 14:29:12.187"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.185" endtime="20241124 14:29:12.187"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.652" endtime="20241124 14:29:12.187"/>
</try>
<status status="PASS" starttime="20241124 14:29:11.645" endtime="20241124 14:29:12.188"/>
</kw>
<status status="PASS" starttime="20241124 14:29:11.643" endtime="20241124 14:29:12.188"/>
</kw>
<status status="PASS" starttime="20241124 14:29:11.643" endtime="20241124 14:29:12.188"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.189" endtime="20241124 14:29:12.190"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.189" endtime="20241124 14:29:12.190"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.643" endtime="20241124 14:29:12.190"/>
</try>
<status status="PASS" starttime="20241124 14:29:11.463" endtime="20241124 14:29:12.191"/>
</kw>
<status status="PASS" starttime="20241124 14:29:11.457" endtime="20241124 14:29:12.191"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.198" endtime="20241124 14:29:12.198"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.202" endtime="20241124 14:29:12.202"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.191" endtime="20241124 14:29:12.202"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.202" endtime="20241124 14:29:12.202"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.202" endtime="20241124 14:29:12.202"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.219" endtime="20241124 14:29:12.220"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.202" endtime="20241124 14:29:12.221"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.229" endtime="20241124 14:29:12.230"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.222" endtime="20241124 14:29:12.230"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.234" endtime="20241124 14:29:12.235"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.230" endtime="20241124 14:29:12.235"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.239" endtime="20241124 14:29:12.239"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.241" endtime="20241124 14:29:12.241"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.240" endtime="20241124 14:29:12.241"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.242" endtime="20241124 14:29:12.242"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.241" endtime="20241124 14:29:12.242"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.240" endtime="20241124 14:29:12.242"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.235" endtime="20241124 14:29:12.243"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:12.261" endtime="20241124 14:29:12.264"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.312" endtime="20241124 14:29:12.313"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.243" endtime="20241124 14:29:12.313"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.321" endtime="20241124 14:29:12.322"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.324" endtime="20241124 14:29:12.325"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.324" endtime="20241124 14:29:12.325"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.326" endtime="20241124 14:29:12.326"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.326" endtime="20241124 14:29:12.327"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.323" endtime="20241124 14:29:12.327"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.313" endtime="20241124 14:29:12.327"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:12.353" endtime="20241124 14:29:12.354"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.363" endtime="20241124 14:29:12.363"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.328" endtime="20241124 14:29:12.364"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.367" endtime="20241124 14:29:12.368"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.370" endtime="20241124 14:29:12.370"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.369" endtime="20241124 14:29:12.371"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.372" endtime="20241124 14:29:12.372"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.371" endtime="20241124 14:29:12.372"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.369" endtime="20241124 14:29:12.373"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.364" endtime="20241124 14:29:12.373"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.380" endtime="20241124 14:29:12.381"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.374" endtime="20241124 14:29:12.381"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:12.406" endtime="20241124 14:29:12.406"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.408" endtime="20241124 14:29:12.410"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.381" endtime="20241124 14:29:12.411"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.453" endtime="20241124 14:29:12.412"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:12.412" endtime="20241124 14:29:12.414"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:12.416" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:29:12.415" endtime="20241124 14:29:12.416"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:12.416" endtime="20241124 14:29:12.417"/>
</return>
<msg timestamp="20241124 14:29:12.419" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:11.450" endtime="20241124 14:29:12.419"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.425" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:46</msg>
<status status="PASS" starttime="20241124 14:29:12.422" endtime="20241124 14:29:12.425"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.428" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:12.427" endtime="20241124 14:29:12.428"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.430" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:12.429" endtime="20241124 14:29:12.430"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.432" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.430" endtime="20241124 14:29:12.432"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.434" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:12.432" endtime="20241124 14:29:12.434"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.436" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.435" endtime="20241124 14:29:12.437"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.438" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:12.437" endtime="20241124 14:29:12.439"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.440" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:12.439" endtime="20241124 14:29:12.440"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:12.441" endtime="20241124 14:29:12.442"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:12.449" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:12.448" endtime="20241124 14:29:12.450"/>
</kw>
<msg timestamp="20241124 14:29:12.451" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.447" endtime="20241124 14:29:12.451"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.453" endtime="20241124 14:29:12.453"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.455" endtime="20241124 14:29:12.456"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.455" endtime="20241124 14:29:12.456"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.457" endtime="20241124 14:29:12.457"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.456" endtime="20241124 14:29:12.458"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.454" endtime="20241124 14:29:12.458"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.452" endtime="20241124 14:29:12.458"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.452" endtime="20241124 14:29:12.459"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:12.459" endtime="20241124 14:29:12.459"/>
</return>
<msg timestamp="20241124 14:29:12.460" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.445" endtime="20241124 14:29:12.460"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:12.464" endtime="20241124 14:29:12.465"/>
</kw>
<msg timestamp="20241124 14:29:12.465" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.464" endtime="20241124 14:29:12.466"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.469" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:12.467" endtime="20241124 14:29:12.469"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.472" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.471" endtime="20241124 14:29:12.472"/>
</kw>
<status status="PASS" starttime="20241124 14:29:12.470" endtime="20241124 14:29:12.473"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.474" endtime="20241124 14:29:12.474"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.473" endtime="20241124 14:29:12.474"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.469" endtime="20241124 14:29:12.474"/>
</if>
<status status="PASS" starttime="20241124 14:29:12.466" endtime="20241124 14:29:12.475"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.466" endtime="20241124 14:29:12.475"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:12.475" endtime="20241124 14:29:12.476"/>
</return>
<msg timestamp="20241124 14:29:12.477" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.463" endtime="20241124 14:29:12.477"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:12.479" endtime="20241124 14:29:12.479"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.478" endtime="20241124 14:29:12.479"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.478" endtime="20241124 14:29:12.479"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.480" endtime="20241124 14:29:12.480"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:12.481" endtime="20241124 14:29:12.481"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.480" endtime="20241124 14:29:12.481"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.481" endtime="20241124 14:29:12.482"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:12.482" endtime="20241124 14:29:12.482"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.481" endtime="20241124 14:29:12.482"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.480" endtime="20241124 14:29:12.482"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.479" endtime="20241124 14:29:12.483"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.479" endtime="20241124 14:29:12.483"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.486" endtime="20241124 14:29:12.487"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:12.487" endtime="20241124 14:29:12.487"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.486" endtime="20241124 14:29:12.487"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.489" endtime="20241124 14:29:12.489"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:12.489" endtime="20241124 14:29:12.490"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.488" endtime="20241124 14:29:12.490"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.485" endtime="20241124 14:29:12.490"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.484" endtime="20241124 14:29:12.491"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.484" endtime="20241124 14:29:12.491"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.478" endtime="20241124 14:29:12.492"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.477" endtime="20241124 14:29:12.492"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:12.494" endtime="20241124 14:29:12.495"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.494" endtime="20241124 14:29:12.495"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.494" endtime="20241124 14:29:12.495"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.497" endtime="20241124 14:29:12.497"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.496" endtime="20241124 14:29:12.497"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.496" endtime="20241124 14:29:12.498"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.501" endtime="20241124 14:29:12.501"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.503" endtime="20241124 14:29:12.503"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:12.503" endtime="20241124 14:29:12.504"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.502" endtime="20241124 14:29:12.504"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.505" endtime="20241124 14:29:12.505"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:12.505" endtime="20241124 14:29:12.506"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.504" endtime="20241124 14:29:12.506"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.502" endtime="20241124 14:29:12.506"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.498" endtime="20241124 14:29:12.507"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.498" endtime="20241124 14:29:12.507"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.493" endtime="20241124 14:29:12.507"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.492" endtime="20241124 14:29:12.508"/>
</if>
<status status="PASS" starttime="20241124 14:29:12.426" endtime="20241124 14:29:12.508"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.510" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:12.509" endtime="20241124 14:29:12.511"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.513" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:12.511" endtime="20241124 14:29:12.513"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.515" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.514" endtime="20241124 14:29:12.515"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.518" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:12.516" endtime="20241124 14:29:12.519"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.523" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.520" endtime="20241124 14:29:12.523"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.526" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:12.525" endtime="20241124 14:29:12.526"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.529" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:12.528" endtime="20241124 14:29:12.529"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:12.530" endtime="20241124 14:29:12.532"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:12.544" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:29:12.544" endtime="20241124 14:29:12.544"/>
</kw>
<msg timestamp="20241124 14:29:12.544" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.544" endtime="20241124 14:29:12.544"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.544" endtime="20241124 14:29:12.544"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.544" endtime="20241124 14:29:12.553"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.544" endtime="20241124 14:29:12.553"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.555" endtime="20241124 14:29:12.556"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.554" endtime="20241124 14:29:12.556"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.544" endtime="20241124 14:29:12.556"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.544" endtime="20241124 14:29:12.556"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.544" endtime="20241124 14:29:12.557"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:12.557" endtime="20241124 14:29:12.557"/>
</return>
<msg timestamp="20241124 14:29:12.559" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.542" endtime="20241124 14:29:12.559"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:12.571" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:12.567" endtime="20241124 14:29:12.571"/>
</kw>
<msg timestamp="20241124 14:29:12.572" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.566" endtime="20241124 14:29:12.572"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.574" endtime="20241124 14:29:12.574"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.576" endtime="20241124 14:29:12.576"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.575" endtime="20241124 14:29:12.576"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.577" endtime="20241124 14:29:12.577"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.576" endtime="20241124 14:29:12.577"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.575" endtime="20241124 14:29:12.577"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.573" endtime="20241124 14:29:12.578"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.572" endtime="20241124 14:29:12.578"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:12.578" endtime="20241124 14:29:12.578"/>
</return>
<msg timestamp="20241124 14:29:12.579" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.564" endtime="20241124 14:29:12.579"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:12.580" endtime="20241124 14:29:12.580"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.580" endtime="20241124 14:29:12.581"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.580" endtime="20241124 14:29:12.581"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.582" endtime="20241124 14:29:12.582"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:12.582" endtime="20241124 14:29:12.582"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.581" endtime="20241124 14:29:12.583"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.583" endtime="20241124 14:29:12.583"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:12.584" endtime="20241124 14:29:12.584"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.583" endtime="20241124 14:29:12.584"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.581" endtime="20241124 14:29:12.585"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.581" endtime="20241124 14:29:12.585"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.581" endtime="20241124 14:29:12.585"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.586" endtime="20241124 14:29:12.586"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:12.587" endtime="20241124 14:29:12.587"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.586" endtime="20241124 14:29:12.587"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.587" endtime="20241124 14:29:12.587"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:12.587" endtime="20241124 14:29:12.587"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.587" endtime="20241124 14:29:12.587"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.586" endtime="20241124 14:29:12.587"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.585" endtime="20241124 14:29:12.587"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.585" endtime="20241124 14:29:12.588"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.580" endtime="20241124 14:29:12.588"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.579" endtime="20241124 14:29:12.588"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:12.590" endtime="20241124 14:29:12.590"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.590" endtime="20241124 14:29:12.591"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.589" endtime="20241124 14:29:12.591"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.592" endtime="20241124 14:29:12.593"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.592" endtime="20241124 14:29:12.593"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.591" endtime="20241124 14:29:12.593"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.594" endtime="20241124 14:29:12.595"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.596" endtime="20241124 14:29:12.596"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:12.597" endtime="20241124 14:29:12.597"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.595" endtime="20241124 14:29:12.597"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.598" endtime="20241124 14:29:12.599"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:12.599" endtime="20241124 14:29:12.599"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.598" endtime="20241124 14:29:12.601"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.595" endtime="20241124 14:29:12.601"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.594" endtime="20241124 14:29:12.601"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.594" endtime="20241124 14:29:12.601"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.589" endtime="20241124 14:29:12.601"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.588" endtime="20241124 14:29:12.601"/>
</if>
<status status="PASS" starttime="20241124 14:29:12.509" endtime="20241124 14:29:12.601"/>
</iter>
<status status="PASS" starttime="20241124 14:29:12.425" endtime="20241124 14:29:12.601"/>
</for>
<msg timestamp="20241124 14:29:12.601" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:29:12.420" endtime="20241124 14:29:12.601"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:12.601" endtime="20241124 14:29:12.601"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:12.618" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '301', 'status': 'COMPLETED', 'actionName': 'Click Profile Dropdown action', 'actionType': 'CLICK', 'actionXpath': '//p[text()="Profile"]', 'inputValue': '', 'errorMess...</msg>
<status status="PASS" starttime="20241124 14:29:12.618" endtime="20241124 14:29:12.618"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:12.618" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "301", "status": "COMPLETED", "actionName": "Click Profile Dropdown action", "actionType": "CLICK", "actionXpath": "//p[text()=\"Profile\"]", "inputValue": "", "errorMe...</msg>
<status status="PASS" starttime="20241124 14:29:12.618" endtime="20241124 14:29:12.618"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:12.653" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:12.653" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:12.618" endtime="20241124 14:29:12.653"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:12.654" endtime="20241124 14:29:12.656"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:12.656" endtime="20241124 14:29:12.657"/>
</return>
<status status="PASS" starttime="20241124 14:29:12.618" endtime="20241124 14:29:12.658"/>
</kw>
<status status="PASS" starttime="20241124 14:29:12.601" endtime="20241124 14:29:12.658"/>
</kw>
<status status="PASS" starttime="20241124 14:29:11.441" endtime="20241124 14:29:12.659"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.660" endtime="20241124 14:29:12.660"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:12.661" endtime="20241124 14:29:12.661"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.662" endtime="20241124 14:29:12.662"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.659" endtime="20241124 14:29:12.662"/>
</branch>
<status status="PASS" starttime="20241124 14:29:11.441" endtime="20241124 14:29:12.663"/>
</try>
<status status="PASS" starttime="20241124 14:29:11.440" endtime="20241124 14:29:12.663"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '47', 'actionId': '34', 'flowId': '15', 'order': 2, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.566Z', 'action': {'id': '34', 'name': 'Is Name heading visible', '...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.666" level="INFO">${action} = {'id': '34', 'name': 'Is Name heading visible', 'type': 'IS_ELEMENT_VISIBLE', 'xpath': '//h4[text()="bharani deepan"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T17:33:53.346Z', 'upd...</msg>
<status status="PASS" starttime="20241124 14:29:12.665" endtime="20241124 14:29:12.668"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:12.669" endtime="20241124 14:29:12.674"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:12.677" level="INFO">${input} = {'id': '31', 'actionId': '34', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-21T17:33:53.666Z', 'updatedAt': '2024-11-21T17:33:53.666Z'}</msg>
<status status="PASS" starttime="20241124 14:29:12.675" endtime="20241124 14:29:12.677"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.679" endtime="20241124 14:29:12.679"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.680" endtime="20241124 14:29:12.680"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.678" endtime="20241124 14:29:12.683"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.677" endtime="20241124 14:29:12.684"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.691" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:12.690" endtime="20241124 14:29:12.691"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:12.694" endtime="20241124 14:29:12.694"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.693" endtime="20241124 14:29:12.694"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:12.695" endtime="20241124 14:29:12.696"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.695" endtime="20241124 14:29:12.696"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.706" endtime="20241124 14:29:12.706"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.697" endtime="20241124 14:29:12.706"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.716" endtime="20241124 14:29:12.716"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.725" endtime="20241124 14:29:12.725"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.707" endtime="20241124 14:29:12.726"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.730" endtime="20241124 14:29:12.731"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.726" endtime="20241124 14:29:12.731"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.743" endtime="20241124 14:29:12.743"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.732" endtime="20241124 14:29:12.744"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.752" endtime="20241124 14:29:12.753"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.744" endtime="20241124 14:29:12.753"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.757" endtime="20241124 14:29:12.758"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.754" endtime="20241124 14:29:12.758"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.763" endtime="20241124 14:29:12.763"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.764" endtime="20241124 14:29:12.764"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.763" endtime="20241124 14:29:12.765"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.766" endtime="20241124 14:29:12.769"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.765" endtime="20241124 14:29:12.769"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.763" endtime="20241124 14:29:12.770"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.759" endtime="20241124 14:29:12.770"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:12.792" endtime="20241124 14:29:12.793"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.803" endtime="20241124 14:29:12.804"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.772" endtime="20241124 14:29:12.804"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.809" endtime="20241124 14:29:12.809"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.810" endtime="20241124 14:29:12.810"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.810" endtime="20241124 14:29:12.811"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.812" endtime="20241124 14:29:12.812"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.811" endtime="20241124 14:29:12.812"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.809" endtime="20241124 14:29:12.812"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.805" endtime="20241124 14:29:12.813"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:12.831" endtime="20241124 14:29:12.832"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.834" endtime="20241124 14:29:12.834"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.813" endtime="20241124 14:29:12.834"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:12.850" level="INFO">Waited for Element with selector //h4[text()="bharani deepan"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:12.834" endtime="20241124 14:29:12.850"/>
</kw>
<msg timestamp="20241124 14:29:12.850" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.834" endtime="20241124 14:29:12.850"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:12.850" endtime="20241124 14:29:12.850"/>
</return>
<status status="PASS" starttime="20241124 14:29:12.834" endtime="20241124 14:29:12.850"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.850" endtime="20241124 14:29:12.850"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.850" endtime="20241124 14:29:12.850"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.850" endtime="20241124 14:29:12.850"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.834" endtime="20241124 14:29:12.850"/>
</try>
<msg timestamp="20241124 14:29:12.866" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.834" endtime="20241124 14:29:12.866"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:12.866" endtime="20241124 14:29:12.867"/>
</return>
<status status="PASS" starttime="20241124 14:29:12.834" endtime="20241124 14:29:12.867"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:12.867" endtime="20241124 14:29:12.867"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.867" endtime="20241124 14:29:12.867"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.834" endtime="20241124 14:29:12.867"/>
</try>
<msg timestamp="20241124 14:29:12.867" level="INFO">${value} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.834" endtime="20241124 14:29:12.867"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.867" level="INFO">${value} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:12.867" endtime="20241124 14:29:12.867"/>
</kw>
<status status="PASS" starttime="20241124 14:29:12.867" endtime="20241124 14:29:12.867"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.867" endtime="20241124 14:29:12.867"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.867" endtime="20241124 14:29:12.867"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.867" endtime="20241124 14:29:12.867"/>
</if>
<status status="PASS" starttime="20241124 14:29:12.834" endtime="20241124 14:29:12.867"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.867" endtime="20241124 14:29:12.867"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.867" endtime="20241124 14:29:12.867"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:12.894" endtime="20241124 14:29:12.894"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.895" endtime="20241124 14:29:12.895"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.867" endtime="20241124 14:29:12.895"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.692" endtime="20241124 14:29:12.895"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:12.896" endtime="20241124 14:29:12.897"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:12.898" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:29:12.898" endtime="20241124 14:29:12.899"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:12.899" endtime="20241124 14:29:12.899"/>
</return>
<msg timestamp="20241124 14:29:12.900" level="INFO">${value} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:12.686" endtime="20241124 14:29:12.900"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.903" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:12.902" endtime="20241124 14:29:12.903"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.905" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:12.904" endtime="20241124 14:29:12.905"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.905" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:12.905" endtime="20241124 14:29:12.906"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.907" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.906" endtime="20241124 14:29:12.907"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.907" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:12.907" endtime="20241124 14:29:12.908"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.908" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.908" endtime="20241124 14:29:12.909"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.909" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:12.909" endtime="20241124 14:29:12.909"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.910" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:12.910" endtime="20241124 14:29:12.910"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:12.911" endtime="20241124 14:29:12.912"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:12.917" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:12.916" endtime="20241124 14:29:12.917"/>
</kw>
<msg timestamp="20241124 14:29:12.917" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.916" endtime="20241124 14:29:12.917"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.917"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.917"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.917"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.917"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.917"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.917"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.917"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.917"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.917"/>
</return>
<msg timestamp="20241124 14:29:12.917" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.914" endtime="20241124 14:29:12.917"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.917"/>
</kw>
<msg timestamp="20241124 14:29:12.917" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.917"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.917" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.917"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.934" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.933" endtime="20241124 14:29:12.934"/>
</kw>
<status status="PASS" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.934"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.934"/>
</if>
<status status="PASS" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.934"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.934"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</return>
<msg timestamp="20241124 14:29:12.934" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.917" endtime="20241124 14:29:12.934"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.934"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.949"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.950" endtime="20241124 14:29:12.951"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.950" endtime="20241124 14:29:12.951"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.949" endtime="20241124 14:29:12.951"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.952" endtime="20241124 14:29:12.952"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.953" endtime="20241124 14:29:12.954"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:12.954" endtime="20241124 14:29:12.954"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.953" endtime="20241124 14:29:12.954"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.955" endtime="20241124 14:29:12.955"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:12.956" endtime="20241124 14:29:12.956"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:12.955" endtime="20241124 14:29:12.956"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.952" endtime="20241124 14:29:12.956"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.951" endtime="20241124 14:29:12.957"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.951" endtime="20241124 14:29:12.957"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.957"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.934" endtime="20241124 14:29:12.957"/>
</if>
<status status="PASS" starttime="20241124 14:29:12.904" endtime="20241124 14:29:12.958"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.960" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:12.959" endtime="20241124 14:29:12.960"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.961" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:12.960" endtime="20241124 14:29:12.961"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.963" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.962" endtime="20241124 14:29:12.963"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.964" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:12.963" endtime="20241124 14:29:12.964"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.966" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.965" endtime="20241124 14:29:12.966"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.967" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:12.967" endtime="20241124 14:29:12.967"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.969" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:12.968" endtime="20241124 14:29:12.969"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:12.969" endtime="20241124 14:29:12.971"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:12.977" endtime="20241124 14:29:12.978"/>
</kw>
<msg timestamp="20241124 14:29:12.979" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.977" endtime="20241124 14:29:12.979"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.981" level="INFO">${values} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:12.980" endtime="20241124 14:29:12.981"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:12.984" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</kw>
<status status="PASS" starttime="20241124 14:29:12.982" endtime="20241124 14:29:12.984"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.981" endtime="20241124 14:29:12.984"/>
</if>
<status status="PASS" starttime="20241124 14:29:12.980" endtime="20241124 14:29:12.984"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.979" endtime="20241124 14:29:12.984"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</return>
<msg timestamp="20241124 14:29:12.984" level="INFO">${is_source_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:12.975" endtime="20241124 14:29:12.984"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:12.984" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</kw>
<msg timestamp="20241124 14:29:12.984" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.984"/>
</return>
<msg timestamp="20241124 14:29:12.984" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:12.984" endtime="20241124 14:29:12.999"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="PASS" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</return>
<status status="PASS" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</if>
<status status="PASS" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</if>
<status status="PASS" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.001"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.016" endtime="20241124 14:29:13.017"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:13.017" endtime="20241124 14:29:13.017"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.017"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.017" endtime="20241124 14:29:13.017"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:13.017" endtime="20241124 14:29:13.017"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.017" endtime="20241124 14:29:13.017"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.017"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.017"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.017"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.017"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.001" endtime="20241124 14:29:13.017"/>
</if>
<status status="PASS" starttime="20241124 14:29:12.958" endtime="20241124 14:29:13.017"/>
</iter>
<status status="PASS" starttime="20241124 14:29:12.903" endtime="20241124 14:29:13.017"/>
</for>
<msg timestamp="20241124 14:29:13.017" level="INFO">${assertion_message} = Assertion passed: TRUE == TRUE</msg>
<status status="PASS" starttime="20241124 14:29:12.901" endtime="20241124 14:29:13.017"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.017" endtime="20241124 14:29:13.017"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:13.033" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '302', 'status': 'COMPLETED', 'actionName': 'Is Name heading visible', 'actionType': 'IS_ELEMENT_VISIBLE', 'actionXpath': '//h4[text()="bharani deepan"]', 'inputValue':...</msg>
<status status="PASS" starttime="20241124 14:29:13.017" endtime="20241124 14:29:13.033"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:13.037" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "302", "status": "COMPLETED", "actionName": "Is Name heading visible", "actionType": "IS_ELEMENT_VISIBLE", "actionXpath": "//h4[text()=\"bharani deepan\"]", "inputValue...</msg>
<status status="PASS" starttime="20241124 14:29:13.036" endtime="20241124 14:29:13.037"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:13.046" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:13.046" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:13.038" endtime="20241124 14:29:13.046"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.047" endtime="20241124 14:29:13.048"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:13.049" endtime="20241124 14:29:13.049"/>
</return>
<status status="PASS" starttime="20241124 14:29:13.034" endtime="20241124 14:29:13.051"/>
</kw>
<status status="PASS" starttime="20241124 14:29:13.017" endtime="20241124 14:29:13.051"/>
</kw>
<status status="PASS" starttime="20241124 14:29:12.665" endtime="20241124 14:29:13.051"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.052" endtime="20241124 14:29:13.052"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:13.053" endtime="20241124 14:29:13.055"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.055" endtime="20241124 14:29:13.055"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.051" endtime="20241124 14:29:13.056"/>
</branch>
<status status="PASS" starttime="20241124 14:29:12.664" endtime="20241124 14:29:13.056"/>
</try>
<status status="PASS" starttime="20241124 14:29:12.664" endtime="20241124 14:29:13.057"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '52', 'actionId': '35', 'flowId': '15', 'order': 3, 'createdAt': '2024-11-24T06:43:12.545Z', 'updatedAt': '2024-11-24T06:43:12.545Z', 'action': {'id': '35', 'name': 'Get email id', 'type': 'GET...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.060" level="INFO">${action} = {'id': '35', 'name': 'Get email id', 'type': 'GET_TEXT', 'xpath': '//p[text()="EMAIL"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-23T19:18:23.510Z', 'updatedAt': '2024-11-24T08:38:42.2...</msg>
<status status="PASS" starttime="20241124 14:29:13.058" endtime="20241124 14:29:13.060"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.060" endtime="20241124 14:29:13.061"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:13.063" level="INFO">${input} = {'id': '32', 'actionId': '35', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-23T19:18:23.679Z', 'updatedAt': '2024-11-23T19:18:23.679Z'}</msg>
<status status="PASS" starttime="20241124 14:29:13.062" endtime="20241124 14:29:13.063"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.064" endtime="20241124 14:29:13.065"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.065" endtime="20241124 14:29:13.065"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.064" endtime="20241124 14:29:13.065"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.063" endtime="20241124 14:29:13.066"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.072" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:13.070" endtime="20241124 14:29:13.072"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:13.074" endtime="20241124 14:29:13.074"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.073" endtime="20241124 14:29:13.074"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:13.076" endtime="20241124 14:29:13.076"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.075" endtime="20241124 14:29:13.076"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.084" endtime="20241124 14:29:13.084"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.077" endtime="20241124 14:29:13.084"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.091" endtime="20241124 14:29:13.092"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.096" endtime="20241124 14:29:13.096"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.086" endtime="20241124 14:29:13.096"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.103" endtime="20241124 14:29:13.104"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.097" endtime="20241124 14:29:13.104"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.113" endtime="20241124 14:29:13.114"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.105" endtime="20241124 14:29:13.114"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.122" endtime="20241124 14:29:13.122"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.114" endtime="20241124 14:29:13.122"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.127" endtime="20241124 14:29:13.127"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.123" endtime="20241124 14:29:13.127"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.132" endtime="20241124 14:29:13.132"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.134" endtime="20241124 14:29:13.134"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.134" endtime="20241124 14:29:13.135"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.136" endtime="20241124 14:29:13.136"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.135" endtime="20241124 14:29:13.136"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.133" endtime="20241124 14:29:13.136"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:13.128" endtime="20241124 14:29:13.137"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:13.154" endtime="20241124 14:29:13.154"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.159" endtime="20241124 14:29:13.160"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.137" endtime="20241124 14:29:13.160"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.162" endtime="20241124 14:29:13.162"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.163" endtime="20241124 14:29:13.163"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.163" endtime="20241124 14:29:13.163"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.164" endtime="20241124 14:29:13.164"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.164" endtime="20241124 14:29:13.164"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.163" endtime="20241124 14:29:13.164"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:13.160" endtime="20241124 14:29:13.164"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:13.177" endtime="20241124 14:29:13.177"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.182" endtime="20241124 14:29:13.183"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.165" endtime="20241124 14:29:13.183"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.186" endtime="20241124 14:29:13.186"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.187" endtime="20241124 14:29:13.187"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.186" endtime="20241124 14:29:13.187"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.187" endtime="20241124 14:29:13.188"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.187" endtime="20241124 14:29:13.188"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.186" endtime="20241124 14:29:13.188"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:13.184" endtime="20241124 14:29:13.188"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:13.211" level="INFO">Waited for Element with selector //p[text()="EMAIL"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:13.203" endtime="20241124 14:29:13.211"/>
</kw>
<msg timestamp="20241124 14:29:13.211" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:13.202" endtime="20241124 14:29:13.211"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:13.212" endtime="20241124 14:29:13.212"/>
</return>
<status status="PASS" starttime="20241124 14:29:13.202" endtime="20241124 14:29:13.212"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.212" endtime="20241124 14:29:13.213"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.213" endtime="20241124 14:29:13.213"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.212" endtime="20241124 14:29:13.213"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.201" endtime="20241124 14:29:13.213"/>
</try>
<msg timestamp="20241124 14:29:13.214" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:13.201" endtime="20241124 14:29:13.214"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:13.214" endtime="20241124 14:29:13.214"/>
</return>
<status status="PASS" starttime="20241124 14:29:13.198" endtime="20241124 14:29:13.215"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:13.215" endtime="20241124 14:29:13.215"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.215" endtime="20241124 14:29:13.215"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.198" endtime="20241124 14:29:13.215"/>
</try>
<msg timestamp="20241124 14:29:13.216" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:13.197" endtime="20241124 14:29:13.216"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.221" endtime="20241124 14:29:13.221"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.221" endtime="20241124 14:29:13.221"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.220" endtime="20241124 14:29:13.221"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.220" endtime="20241124 14:29:13.222"/>
</if>
<status status="PASS" starttime="20241124 14:29:13.218" endtime="20241124 14:29:13.222"/>
</kw>
<status status="PASS" starttime="20241124 14:29:13.196" endtime="20241124 14:29:13.222"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:13.239" level="INFO">Property: 'EMAIL'</msg>
<msg timestamp="20241124 14:29:13.239" level="INFO">${property} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:29:13.223" endtime="20241124 14:29:13.240"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:13.240" endtime="20241124 14:29:13.240"/>
</return>
<status status="PASS" starttime="20241124 14:29:13.222" endtime="20241124 14:29:13.240"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.241" endtime="20241124 14:29:13.241"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.241" endtime="20241124 14:29:13.241"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.240" endtime="20241124 14:29:13.242"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.222" endtime="20241124 14:29:13.242"/>
</try>
<msg timestamp="20241124 14:29:13.242" level="INFO">${value} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:29:13.192" endtime="20241124 14:29:13.242"/>
</kw>
<status status="PASS" starttime="20241124 14:29:13.188" endtime="20241124 14:29:13.242"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.251"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.251"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.243" endtime="20241124 14:29:13.251"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.072" endtime="20241124 14:29:13.251"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.251"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:13.251" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.251"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.251"/>
</return>
<msg timestamp="20241124 14:29:13.251" level="INFO">${value} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:29:13.068" endtime="20241124 14:29:13.251"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.251" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.251"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.251" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.251"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.251" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.251"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.251" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.251"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.251" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.251"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.267" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.267"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.269" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:13.268" endtime="20241124 14:29:13.269"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.270" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:13.269" endtime="20241124 14:29:13.270"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:13.271" endtime="20241124 14:29:13.271"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:13.275" endtime="20241124 14:29:13.275"/>
</kw>
<msg timestamp="20241124 14:29:13.275" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:13.275" endtime="20241124 14:29:13.275"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.277" level="INFO">${values} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:29:13.276" endtime="20241124 14:29:13.277"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.278" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:13.278" endtime="20241124 14:29:13.278"/>
</kw>
<status status="PASS" starttime="20241124 14:29:13.277" endtime="20241124 14:29:13.278"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.279" endtime="20241124 14:29:13.279"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.278" endtime="20241124 14:29:13.279"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.277" endtime="20241124 14:29:13.279"/>
</if>
<status status="PASS" starttime="20241124 14:29:13.276" endtime="20241124 14:29:13.279"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.275" endtime="20241124 14:29:13.279"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:13.279" endtime="20241124 14:29:13.280"/>
</return>
<msg timestamp="20241124 14:29:13.280" level="INFO">${is_source_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:13.274" endtime="20241124 14:29:13.280"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:13.286" endtime="20241124 14:29:13.287"/>
</kw>
<msg timestamp="20241124 14:29:13.287" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:13.286" endtime="20241124 14:29:13.287"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.289" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:13.288" endtime="20241124 14:29:13.289"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:13.292" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:13.291" endtime="20241124 14:29:13.292"/>
</kw>
<status status="PASS" starttime="20241124 14:29:13.290" endtime="20241124 14:29:13.293"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.294" endtime="20241124 14:29:13.294"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.293" endtime="20241124 14:29:13.294"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.290" endtime="20241124 14:29:13.294"/>
</if>
<status status="PASS" starttime="20241124 14:29:13.288" endtime="20241124 14:29:13.295"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.287" endtime="20241124 14:29:13.295"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:13.295" endtime="20241124 14:29:13.295"/>
</return>
<msg timestamp="20241124 14:29:13.297" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:13.284" endtime="20241124 14:29:13.297"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:13.302" endtime="20241124 14:29:13.302"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.302" endtime="20241124 14:29:13.305"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.301" endtime="20241124 14:29:13.305"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.307" endtime="20241124 14:29:13.307"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:13.307" endtime="20241124 14:29:13.307"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.306" endtime="20241124 14:29:13.307"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.308" endtime="20241124 14:29:13.308"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:13.308" endtime="20241124 14:29:13.309"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.308" endtime="20241124 14:29:13.309"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.306" endtime="20241124 14:29:13.309"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:13.306" endtime="20241124 14:29:13.309"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.305" endtime="20241124 14:29:13.309"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<msg timestamp="20241124 14:29:13.314" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:29:13.311" endtime="20241124 14:29:13.314"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:13.315" endtime="20241124 14:29:13.315"/>
</return>
<status status="FAIL" starttime="20241124 14:29:13.310" endtime="20241124 14:29:13.315"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.316" endtime="20241124 14:29:13.317"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:13.317" endtime="20241124 14:29:13.317"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.315" endtime="20241124 14:29:13.318"/>
</branch>
<status status="FAIL" starttime="20241124 14:29:13.310" endtime="20241124 14:29:13.318"/>
</if>
<status status="FAIL" starttime="20241124 14:29:13.310" endtime="20241124 14:29:13.319"/>
</branch>
<status status="FAIL" starttime="20241124 14:29:13.309" endtime="20241124 14:29:13.319"/>
</if>
<status status="FAIL" starttime="20241124 14:29:13.301" endtime="20241124 14:29:13.320"/>
</branch>
<status status="FAIL" starttime="20241124 14:29:13.297" endtime="20241124 14:29:13.321"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:13.323" endtime="20241124 14:29:13.323"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.323" endtime="20241124 14:29:13.323"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.322" endtime="20241124 14:29:13.324"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.326" endtime="20241124 14:29:13.326"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.325" endtime="20241124 14:29:13.330"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.325" endtime="20241124 14:29:13.331"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.332" endtime="20241124 14:29:13.335"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.336" endtime="20241124 14:29:13.336"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:13.337" endtime="20241124 14:29:13.337"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.336" endtime="20241124 14:29:13.337"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.338" endtime="20241124 14:29:13.338"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:13.338" endtime="20241124 14:29:13.338"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:13.337" endtime="20241124 14:29:13.339"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.335" endtime="20241124 14:29:13.339"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:13.332" endtime="20241124 14:29:13.339"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.331" endtime="20241124 14:29:13.339"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:13.322" endtime="20241124 14:29:13.340"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:13.322" endtime="20241124 14:29:13.340"/>
</if>
<status status="FAIL" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.340"/>
</iter>
<status status="FAIL" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.343"/>
</for>
<status status="FAIL" starttime="20241124 14:29:13.251" endtime="20241124 14:29:13.349"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.351" endtime="20241124 14:29:13.351"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:13.352" endtime="20241124 14:29:13.352"/>
</kw>
<status status="FAIL" starttime="20241124 14:29:13.058" endtime="20241124 14:29:13.353"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.357" endtime="20241124 14:29:13.363"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:13.377" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '303', 'status': 'FAILED', 'actionName': 'Get email id', 'actionType': 'GET_TEXT', 'actionXpath': '//p[text()="EMAIL"]', 'inputValue': '', 'errorMessage': 'Email mismat...</msg>
<status status="PASS" starttime="20241124 14:29:13.374" endtime="20241124 14:29:13.377"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:13.384" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "303", "status": "FAILED", "actionName": "Get email id", "actionType": "GET_TEXT", "actionXpath": "//p[text()=\"EMAIL\"]", "inputValue": "", "errorMessage": "Email mism...</msg>
<status status="PASS" starttime="20241124 14:29:13.379" endtime="20241124 14:29:13.384"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:13.402" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:13.403" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:13.386" endtime="20241124 14:29:13.403"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.403" endtime="20241124 14:29:13.406"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:13.406" endtime="20241124 14:29:13.407"/>
</return>
<status status="PASS" starttime="20241124 14:29:13.378" endtime="20241124 14:29:13.407"/>
</kw>
<status status="PASS" starttime="20241124 14:29:13.365" endtime="20241124 14:29:13.408"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Error occurred:${exception}===&gt;</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.411" endtime="20241124 14:29:13.413"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>${exception}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20241124 14:29:13.417" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:29:13.414" endtime="20241124 14:29:13.418"/>
</kw>
<status status="FAIL" starttime="20241124 14:29:13.409" endtime="20241124 14:29:13.422"/>
</kw>
<status status="FAIL" starttime="20241124 14:29:13.355" endtime="20241124 14:29:13.423"/>
</branch>
<status status="FAIL" starttime="20241124 14:29:13.058" endtime="20241124 14:29:13.424"/>
</try>
<status status="FAIL" starttime="20241124 14:29:13.057" endtime="20241124 14:29:13.425"/>
</iter>
<status status="FAIL" starttime="20241124 14:29:09.619" endtime="20241124 14:29:13.426"/>
</for>
<status status="FAIL" starttime="20241124 14:29:09.604" endtime="20241124 14:29:13.427"/>
</branch>
<status status="FAIL" starttime="20241124 14:29:09.604" endtime="20241124 14:29:13.427"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<status status="NOT RUN" starttime="20241124 14:29:13.428" endtime="20241124 14:29:13.429"/>
</kw>
<status status="FAIL" starttime="20241124 14:29:09.570" endtime="20241124 14:29:13.429"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.429" endtime="20241124 14:29:13.429"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:13.440" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '80', 'status': 'FAILED', 'errorMessage': 'Email mismatch: EMAIL != bharani@ideas2it.com'}</msg>
<status status="PASS" starttime="20241124 14:29:13.438" endtime="20241124 14:29:13.440"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:13.443" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "80", "status": "FAILED", "errorMessage": "Email mismatch: EMAIL != bharani@ideas2it.com"}</msg>
<status status="PASS" starttime="20241124 14:29:13.442" endtime="20241124 14:29:13.443"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:13.454" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:13.454" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:13.443" endtime="20241124 14:29:13.454"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.455" endtime="20241124 14:29:13.456"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:13.456" endtime="20241124 14:29:13.457"/>
</return>
<status status="PASS" starttime="20241124 14:29:13.441" endtime="20241124 14:29:13.457"/>
</kw>
<status status="PASS" starttime="20241124 14:29:13.429" endtime="20241124 14:29:13.458"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Error occurred:${exception}===&gt;</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.460" endtime="20241124 14:29:13.462"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>${exception}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20241124 14:29:13.464" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:29:13.462" endtime="20241124 14:29:13.464"/>
</kw>
<status status="FAIL" starttime="20241124 14:29:13.459" endtime="20241124 14:29:13.468"/>
</kw>
<status status="FAIL" starttime="20241124 14:29:13.429" endtime="20241124 14:29:13.469"/>
</branch>
<status status="FAIL" starttime="20241124 14:29:09.570" endtime="20241124 14:29:13.470"/>
</try>
<status status="FAIL" starttime="20241124 14:29:09.570" endtime="20241124 14:29:13.471"/>
</iter>
<status status="FAIL" starttime="20241124 14:28:53.591" endtime="20241124 14:29:13.472"/>
</for>
<status status="FAIL" starttime="20241124 14:28:53.591" endtime="20241124 14:29:13.473"/>
</branch>
<status status="FAIL" starttime="20241124 14:28:53.590" endtime="20241124 14:29:13.473"/>
</if>
<kw name="send-test-case-run-message">
<arg>${testCaseRun}[id]</arg>
<arg>PASS</arg>
<status status="NOT RUN" starttime="20241124 14:29:13.474" endtime="20241124 14:29:13.474"/>
</kw>
<status status="FAIL" starttime="20241124 14:28:53.571" endtime="20241124 14:29:13.474"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.475" endtime="20241124 14:29:13.476"/>
</kw>
<kw name="send-test-case-run-message">
<arg>${testCaseRun}[id]</arg>
<arg>FAIL</arg>
<arg>errorMessage=${error_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseRunId=${testCaseRunId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:13.479" level="INFO">${response_message} = {'testCaseRunId': '40', 'status': 'FAIL', 'errorMessage': 'Email mismatch: EMAIL != bharani@ideas2it.com'}</msg>
<status status="PASS" starttime="20241124 14:29:13.478" endtime="20241124 14:29:13.479"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:13.482" level="INFO">${json_response} = {"testCaseRunId": "40", "status": "FAIL", "errorMessage": "Email mismatch: EMAIL != bharani@ideas2it.com"}</msg>
<status status="PASS" starttime="20241124 14:29:13.481" endtime="20241124 14:29:13.483"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:13.505" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:13.507" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:13.487" endtime="20241124 14:29:13.507"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.508" endtime="20241124 14:29:13.510"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:13.510" endtime="20241124 14:29:13.511"/>
</return>
<status status="PASS" starttime="20241124 14:29:13.479" endtime="20241124 14:29:13.512"/>
</kw>
<status status="PASS" starttime="20241124 14:29:13.476" endtime="20241124 14:29:13.513"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Error occurred:${exception}===&gt;</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.516" endtime="20241124 14:29:13.523"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>${exception}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20241124 14:29:13.527" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:29:13.524" endtime="20241124 14:29:13.528"/>
</kw>
<status status="FAIL" starttime="20241124 14:29:13.514" endtime="20241124 14:29:13.537"/>
</kw>
<status status="FAIL" starttime="20241124 14:29:13.474" endtime="20241124 14:29:13.539"/>
</branch>
<status status="FAIL" starttime="20241124 14:28:53.571" endtime="20241124 14:29:13.540"/>
</try>
<status status="FAIL" starttime="20241124 14:28:53.549" endtime="20241124 14:29:13.541"/>
</branch>
<branch type="ELSE">
<kw name="Log To Console" library="BuiltIn">
<arg>Command type not developed</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:13.542" endtime="20241124 14:29:13.542"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:13.541" endtime="20241124 14:29:13.543"/>
</branch>
<status status="FAIL" starttime="20241124 14:28:53.548" endtime="20241124 14:29:13.543"/>
</if>
<status status="FAIL" starttime="20241124 14:28:53.529" endtime="20241124 14:29:13.546"/>
</kw>
<status status="FAIL" starttime="20241124 14:28:53.529" endtime="20241124 14:29:13.548"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:13.554" endtime="20241124 14:29:13.563"/>
</kw>
<status status="PASS" starttime="20241124 14:29:13.548" endtime="20241124 14:29:13.564"/>
</branch>
<status status="PASS" starttime="20241124 14:28:53.529" endtime="20241124 14:29:13.565"/>
</try>
<kw name="close-browser" library="COMP_BrowserContext">
<try>
<branch type="TRY">
<kw name="Close Browser" library="RPA.Browser.Playwright">
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Closes the current browser.</doc>
<msg timestamp="20241124 14:29:14.366" level="INFO">Closed browser</msg>
<status status="PASS" starttime="20241124 14:29:13.576" endtime="20241124 14:29:14.366"/>
</kw>
<status status="PASS" starttime="20241124 14:29:13.575" endtime="20241124 14:29:14.366"/>
</branch>
<branch type="EXCEPT" variable="${err}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while closing browser: ${err}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:14.366" endtime="20241124 14:29:14.366"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:14.366" endtime="20241124 14:29:14.366"/>
</branch>
<status status="PASS" starttime="20241124 14:29:13.575" endtime="20241124 14:29:14.366"/>
</try>
<status status="PASS" starttime="20241124 14:29:13.572" endtime="20241124 14:29:14.366"/>
</kw>
<status status="PASS" starttime="20241124 14:28:48.184" endtime="20241124 14:29:14.366"/>
</iter>
<iter>
<kw name="launch-browser" library="COMP_BrowserContext">
<kw name="New Browser" library="RPA.Browser.Playwright">
<arg>chromium</arg>
<arg>headless=False</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new playwright Browser with specified options.</doc>
<msg timestamp="20241124 14:29:14.382" level="INFO">{"browser": "chromium", "headless": false, "devtools": false, "handleSIGHUP": true, "handleSIGINT": true, "handleSIGTERM": true, "slowMo": 0.0, "timeout": 30000.0, "deprecated_pos_args": [], "tracesDir": "C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\7c105fc2-305c-4927-a690-58ef090816b8"}</msg>
<msg timestamp="20241124 14:29:15.635" level="INFO">Successfully created browser with options: {"browser":"chromium","headless":false,"devtools":false,"handleSIGHUP":true,"handleSIGINT":true,"handleSIGTERM":true,"slowMo":0,"timeout":30000,"deprecated_pos_args":[],"tracesDir":"C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\7c105fc2-305c-4927-a690-58ef090816b8"}</msg>
<status status="PASS" starttime="20241124 14:29:14.366" endtime="20241124 14:29:15.636"/>
</kw>
<kw name="New Context" library="RPA.Browser.Playwright">
<arg>viewport={'width': 1280, 'height': 720}</arg>
<arg>acceptDownloads=True</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new BrowserContext with specified options.</doc>
<msg timestamp="20241124 14:29:15.638" level="INFO">{
  "acceptDownloads": true,
  "bypassCSP": false,
  "forcedColors": "none",
  "hideRfBrowser": false,
  "ignoreHTTPSErrors": false,
  "javaScriptEnabled": true,
  "offline": false,
  "reducedMotion": "no-preference",
  "viewport": {
    "width": 1280,
    "height": 720
  },
  "deprecated_pos_args": []
}</msg>
<msg timestamp="20241124 14:29:15.658" level="INFO">Successfully created context. </msg>
<msg timestamp="20241124 14:29:15.659" level="INFO">{'acceptDownloads': True, 'bypassCSP': False, 'forcedColors': 'none', 'hideRfBrowser': False, 'ignoreHTTPSErrors': False, 'javaScriptEnabled': True, 'offline': False, 'reducedMotion': 'no-preference', 'viewport': {'width': 1280, 'height': 720}, 'deprecated_pos_args': []}</msg>
<status status="PASS" starttime="20241124 14:29:15.637" endtime="20241124 14:29:15.659"/>
</kw>
<kw name="Set Browser Timeout" library="RPA.Browser.Playwright">
<arg>${browser_timeout}</arg>
<tag>Config</tag>
<tag>Setter</tag>
<doc>Sets the timeout used by most input and getter keywords.</doc>
<status status="PASS" starttime="20241124 14:29:15.660" endtime="20241124 14:29:15.661"/>
</kw>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>https://www.google.com/</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241124 14:29:19.306" level="INFO">Successfully initialized new page object and opened url: https://www.google.com/</msg>
<msg timestamp="20241124 14:29:19.307" level="INFO">${page_id} = {'page_id': 'page=667fa432-12dc-49c1-be8a-e81e56491aeb', 'video_path': ''}</msg>
<status status="PASS" starttime="20241124 14:29:15.662" endtime="20241124 14:29:19.307"/>
</kw>
<status status="PASS" starttime="20241124 14:29:14.366" endtime="20241124 14:29:19.307"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Polling message===&gt;</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:19.308" endtime="20241124 14:29:19.309"/>
</kw>
<kw name="Get A Command" library="CommandConsumer">
<var>${json}</var>
<arg>${5}</arg>
<msg timestamp="20241124 14:29:19.328" level="INFO">${json} = {'type': 'START_RUN', 'payload': {'testCaseRun': {'id': '41', 'testCaseId': '27', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-24T08:59:18.752Z', 'createdAt': '2024-11-24T08:59:18.752Z', 'errorMe...</msg>
<status status="PASS" starttime="20241124 14:29:19.309" endtime="20241124 14:29:19.328"/>
</kw>
<if>
<branch type="IF" condition="'${json}[type]' == 'KILL'">
<break>
<status status="NOT RUN" starttime="20241124 14:29:19.329" endtime="20241124 14:29:19.329"/>
</break>
<status status="NOT RUN" starttime="20241124 14:29:19.328" endtime="20241124 14:29:19.329"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.328" endtime="20241124 14:29:19.329"/>
</if>
<try>
<branch type="TRY">
<kw name="execute-test-case">
<arg>${json}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Data=&gt; ${input}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:19.330" endtime="20241124 14:29:19.338"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_type_exists}</var>
<arg>${input}</arg>
<arg>type</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:19.341" endtime="20241124 14:29:19.342"/>
</kw>
<msg timestamp="20241124 14:29:19.342" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.341" endtime="20241124 14:29:19.342"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.343" level="INFO">${values} = START_RUN</msg>
<status status="PASS" starttime="20241124 14:29:19.343" endtime="20241124 14:29:19.344"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.346" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.345" endtime="20241124 14:29:19.346"/>
</kw>
<status status="PASS" starttime="20241124 14:29:19.344" endtime="20241124 14:29:19.346"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:19.348" endtime="20241124 14:29:19.348"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:19.347" endtime="20241124 14:29:19.348"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.344" endtime="20241124 14:29:19.348"/>
</if>
<status status="PASS" starttime="20241124 14:29:19.342" endtime="20241124 14:29:19.348"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.342" endtime="20241124 14:29:19.349"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:19.349" endtime="20241124 14:29:19.349"/>
</return>
<msg timestamp="20241124 14:29:19.350" level="INFO">${is_type_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.340" endtime="20241124 14:29:19.350"/>
</kw>
<if>
<branch type="IF" condition="$is_type_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Type not exists in the input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:19.351" endtime="20241124 14:29:19.351"/>
</kw>
<return>
<status status="NOT RUN" starttime="20241124 14:29:19.351" endtime="20241124 14:29:19.351"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:19.350" endtime="20241124 14:29:19.351"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.350" endtime="20241124 14:29:19.351"/>
</if>
<if>
<branch type="IF" condition="'${input}[type]' == '${COMMAND_TYPE_START_RUN}'">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCase</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:19.356" endtime="20241124 14:29:19.357"/>
</kw>
<msg timestamp="20241124 14:29:19.357" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.356" endtime="20241124 14:29:19.357"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.359" level="INFO">${values} = {'id': '27', 'name': 'Login positive', 'projectId': '4', 'createdAt': '2024-11-21T16:43:35.118Z', 'updatedAt': '2024-11-24T06:57:13.357Z', 'testCaseFlowSequences': [{'id': '46', 'testCaseId': '27', 'f...</msg>
<status status="PASS" starttime="20241124 14:29:19.358" endtime="20241124 14:29:19.359"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.361" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.361" endtime="20241124 14:29:19.361"/>
</kw>
<status status="PASS" starttime="20241124 14:29:19.360" endtime="20241124 14:29:19.362"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:19.362" endtime="20241124 14:29:19.362"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:19.362" endtime="20241124 14:29:19.362"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.360" endtime="20241124 14:29:19.363"/>
</if>
<status status="PASS" starttime="20241124 14:29:19.358" endtime="20241124 14:29:19.363"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.357" endtime="20241124 14:29:19.363"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:19.363" endtime="20241124 14:29:19.363"/>
</return>
<msg timestamp="20241124 14:29:19.363" level="INFO">${is_test_case_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.355" endtime="20241124 14:29:19.363"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_run_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCaseRun</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:19.368" endtime="20241124 14:29:19.369"/>
</kw>
<msg timestamp="20241124 14:29:19.369" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.367" endtime="20241124 14:29:19.369"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.371" level="INFO">${values} = {'id': '41', 'testCaseId': '27', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-24T08:59:18.752Z', 'createdAt': '2024-11-24T08:59:18.752Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241124 14:29:19.370" endtime="20241124 14:29:19.371"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.373" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.372" endtime="20241124 14:29:19.373"/>
</kw>
<status status="PASS" starttime="20241124 14:29:19.372" endtime="20241124 14:29:19.373"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:19.374" endtime="20241124 14:29:19.374"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:19.373" endtime="20241124 14:29:19.374"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.371" endtime="20241124 14:29:19.374"/>
</if>
<status status="PASS" starttime="20241124 14:29:19.370" endtime="20241124 14:29:19.374"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.369" endtime="20241124 14:29:19.374"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:19.375" endtime="20241124 14:29:19.375"/>
</return>
<msg timestamp="20241124 14:29:19.375" level="INFO">${is_test_case_run_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.366" endtime="20241124 14:29:19.375"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_exists == $False or $is_test_case_run_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Testcase or TestCaseRun data not available in input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:19.377" endtime="20241124 14:29:19.377"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:19.376" endtime="20241124 14:29:19.377"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.375" endtime="20241124 14:29:19.378"/>
</if>
<kw name="Set Variable" library="BuiltIn">
<var>${testCase}</var>
<arg>${input}[payload][testCase]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.380" level="INFO">${testCase} = {'id': '27', 'name': 'Login positive', 'projectId': '4', 'createdAt': '2024-11-21T16:43:35.118Z', 'updatedAt': '2024-11-24T06:57:13.357Z', 'testCaseFlowSequences': [{'id': '46', 'testCaseId': '27', 'f...</msg>
<status status="PASS" starttime="20241124 14:29:19.378" endtime="20241124 14:29:19.381"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${testCaseRun}</var>
<arg>${input}[payload][testCaseRun]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.382" level="INFO">${testCaseRun} = {'id': '41', 'testCaseId': '27', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-24T08:59:18.752Z', 'createdAt': '2024-11-24T08:59:18.752Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241124 14:29:19.381" endtime="20241124 14:29:19.382"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${assertions}</var>
<arg>${testCase}[assertions]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.383" level="INFO">${assertions} = [{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cus...</msg>
<status status="PASS" starttime="20241124 14:29:19.382" endtime="20241124 14:29:19.383"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Name: ${testCase}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:19.384" endtime="20241124 14:29:19.384"/>
</kw>
<try>
<branch type="TRY">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_flow_sequences_exists}</var>
<arg>${testCase}</arg>
<arg>testCaseFlowSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:19.389" endtime="20241124 14:29:19.389"/>
</kw>
<msg timestamp="20241124 14:29:19.389" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.388" endtime="20241124 14:29:19.389"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.389" level="INFO">${values} = [{'id': '46', 'testCaseId': '27', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:35.233Z', 'updatedAt': '2024-11-24T06:57:13.419Z', 'flow': {'id': '14', 'name': 'Login', 'projectId': '4', ...</msg>
<status status="PASS" starttime="20241124 14:29:19.389" endtime="20241124 14:29:19.389"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.396" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.394" endtime="20241124 14:29:19.396"/>
</kw>
<status status="PASS" starttime="20241124 14:29:19.389" endtime="20241124 14:29:19.396"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:19.397" endtime="20241124 14:29:19.398"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:19.397" endtime="20241124 14:29:19.398"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.389" endtime="20241124 14:29:19.398"/>
</if>
<status status="PASS" starttime="20241124 14:29:19.389" endtime="20241124 14:29:19.398"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.389" endtime="20241124 14:29:19.398"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:19.399" endtime="20241124 14:29:19.399"/>
</return>
<msg timestamp="20241124 14:29:19.400" level="INFO">${is_test_case_flow_sequences_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.388" endtime="20241124 14:29:19.400"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${test_case_run_response_message}</var>
<arg>testCaseRunId=${testCaseRun}[id]</arg>
<arg>status=STARTED</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:19.402" level="INFO">${test_case_run_response_message} = {'testCaseRunId': '41', 'status': 'STARTED'}</msg>
<status status="PASS" starttime="20241124 14:29:19.400" endtime="20241124 14:29:19.402"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${test_case_run_response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:19.405" level="INFO">${json_response} = {"testCaseRunId": "41", "status": "STARTED"}</msg>
<status status="PASS" starttime="20241124 14:29:19.404" endtime="20241124 14:29:19.405"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:19.412" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:19.412" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:19.405" endtime="20241124 14:29:19.412"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:19.413" endtime="20241124 14:29:19.415"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:19.416" endtime="20241124 14:29:19.417"/>
</return>
<status status="PASS" starttime="20241124 14:29:19.403" endtime="20241124 14:29:19.419"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_flow_sequences_exists">
<kw name="Create Dictionary" library="BuiltIn">
<var>${ACCUMULATION}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:19.420" level="INFO">${ACCUMULATION} = {}</msg>
<status status="PASS" starttime="20241124 14:29:19.419" endtime="20241124 14:29:19.420"/>
</kw>
<for flavor="IN">
<var>${testCaseFlowSequence}</var>
<value>@{testCase}[testCaseFlowSequences]</value>
<iter>
<var name="${testCaseFlowSequence}">{'id': '46', 'testCaseId': '27', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:35.233Z', 'updatedAt': '2024-11-24T06:57:13.419Z', 'flow': {'id': '14', 'name': 'Login', 'projectId': '4', '...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.422" level="INFO">${flow} = {'id': '14', 'name': 'Login', 'projectId': '4', 'createdAt': '2024-11-21T16:43:09.327Z', 'updatedAt': '2024-11-22T04:20:41.623Z', 'flowActionSequences': [{'id': '41', 'actionId': '28', 'flowId': '14',...</msg>
<status status="PASS" starttime="20241124 14:29:19.422" endtime="20241124 14:29:19.422"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:19.423" endtime="20241124 14:29:19.424"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:19.432" endtime="20241124 14:29:19.433"/>
</kw>
<msg timestamp="20241124 14:29:19.433" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.432" endtime="20241124 14:29:19.433"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.435" level="INFO">${values} = [{'id': '41', 'actionId': '28', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:09.645Z', 'updatedAt': '2024-11-22T04:20:41.468Z', 'action': {'id': '28', 'name': 'Launch browser', 'type': '...</msg>
<status status="PASS" starttime="20241124 14:29:19.434" endtime="20241124 14:29:19.435"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.436" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.435" endtime="20241124 14:29:19.436"/>
</kw>
<status status="PASS" starttime="20241124 14:29:19.435" endtime="20241124 14:29:19.436"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:19.436" endtime="20241124 14:29:19.436"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:19.436" endtime="20241124 14:29:19.437"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.435" endtime="20241124 14:29:19.437"/>
</if>
<status status="PASS" starttime="20241124 14:29:19.434" endtime="20241124 14:29:19.437"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.433" endtime="20241124 14:29:19.437"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:19.437" endtime="20241124 14:29:19.437"/>
</return>
<msg timestamp="20241124 14:29:19.437" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:19.431" endtime="20241124 14:29:19.438"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '41', 'actionId': '28', 'flowId': '14', 'order': 0, 'createdAt': '2024-11-21T16:43:09.645Z', 'updatedAt': '2024-11-22T04:20:41.468Z', 'action': {'id': '28', 'name': 'Launch browser', 'type': 'L...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.442" level="INFO">${action} = {'id': '28', 'name': 'Launch browser', 'type': 'LAUNCH_BROWSER', 'xpath': '', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:38:00.836Z', 'updatedAt': '2024-11-21T16:38:00.836Z', 'inpu...</msg>
<status status="PASS" starttime="20241124 14:29:19.439" endtime="20241124 14:29:19.443"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:19.444" endtime="20241124 14:29:19.445"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:19.448" level="INFO">${input} = {'id': '25', 'actionId': '28', 'name': 'Login page', 'value': 'https://iassistant.ideas2it.com/login', 'waitAfterAction': '1', 'isDefault': True, 'createdAt': '2024-11-21T16:38:01.166Z', 'updatedAt': ...</msg>
<status status="PASS" starttime="20241124 14:29:19.447" endtime="20241124 14:29:19.448"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:19.450" endtime="20241124 14:29:19.450"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:19.451" endtime="20241124 14:29:19.451"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:19.449" endtime="20241124 14:29:19.451"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.449" endtime="20241124 14:29:19.451"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:19.454" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241124 14:29:19.453" endtime="20241124 14:29:19.454"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>${url}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241124 14:29:25.101" level="INFO">Successfully initialized new page object and opened url: https://iassistant.ideas2it.com/login</msg>
<msg timestamp="20241124 14:29:25.102" level="INFO">${page_id} = {'page_id': 'page=3745d4df-0437-4b27-adb3-03e9569f6409', 'video_path': ''}</msg>
<status status="PASS" starttime="20241124 14:29:19.456" endtime="20241124 14:29:25.102"/>
</kw>
<kw name="Switch Page" library="RPA.Browser.Playwright">
<arg>${page_id}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Switches the active browser page to another open page by ``id`` or ``NEW``.</doc>
<msg timestamp="20241124 14:29:25.103" level="INFO">Switching to page {'page_id': 'page=3745d4df-0437-4b27-adb3-03e9569f6409', 'video_path': ''},context CURRENT, browser CURRENT</msg>
<msg timestamp="20241124 14:29:25.114" level="INFO">[
  {
    "type": "chromium",
    "id": "browser=b8c85be3-306f-4966-876b-abce1936ea58",
    "contexts": [
      {
        "type": "context",
        "id": "context=2463295f-c08d-4e2a-bac0-0aa9681d0213",
        "activePage": "page=3745d4df-0437-4b27-adb3-03e9569f6409",
        "pages": [
          {
            "type": "page",
            "title": "Google",
            "url": "https://www.google.com/",
            "id": "page=667fa432-12dc-49c1-be8a-e81e56491aeb",
            "timestamp": 1732438755.969
          },
          {
            "type": "page",
            "title": "iAssistant",
            "url": "https://iassistant.ideas2it.com/login",
            "id": "page=3745d4df-0437-4b27-adb3-03e9569f6409",
            "timestamp": 1732438759.544
          }
        ]
      }
    ],
    "activeContext": "context=2463295f-c08d-4e2a-bac0-0aa9681d0213",
    "activeBrowser": true
  }
]</msg>
<msg timestamp="20241124 14:29:25.119" level="INFO">Successfully changed active page</msg>
<status status="PASS" starttime="20241124 14:29:25.102" endtime="20241124 14:29:25.119"/>
</kw>
<status status="PASS" starttime="20241124 14:29:19.455" endtime="20241124 14:29:25.119"/>
</kw>
<status status="PASS" starttime="20241124 14:29:19.455" endtime="20241124 14:29:25.120"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:25.120" endtime="20241124 14:29:25.121"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.120" endtime="20241124 14:29:25.121"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.125" endtime="20241124 14:29:25.126"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.121" endtime="20241124 14:29:25.126"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.128" endtime="20241124 14:29:25.129"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.131" endtime="20241124 14:29:25.131"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.126" endtime="20241124 14:29:25.131"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.133" endtime="20241124 14:29:25.133"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.132" endtime="20241124 14:29:25.133"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.137" endtime="20241124 14:29:25.137"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.133" endtime="20241124 14:29:25.137"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.141" endtime="20241124 14:29:25.141"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.137" endtime="20241124 14:29:25.141"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.143" endtime="20241124 14:29:25.143"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.141" endtime="20241124 14:29:25.143"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.144" endtime="20241124 14:29:25.144"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.145" endtime="20241124 14:29:25.145"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.145" endtime="20241124 14:29:25.145"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.145" endtime="20241124 14:29:25.146"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.145" endtime="20241124 14:29:25.146"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:25.145" endtime="20241124 14:29:25.146"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:25.143" endtime="20241124 14:29:25.146"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:25.153" endtime="20241124 14:29:25.153"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.156" endtime="20241124 14:29:25.156"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.146" endtime="20241124 14:29:25.156"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.159" endtime="20241124 14:29:25.159"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.160" endtime="20241124 14:29:25.160"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.159" endtime="20241124 14:29:25.160"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.160" endtime="20241124 14:29:25.160"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.160" endtime="20241124 14:29:25.160"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:25.159" endtime="20241124 14:29:25.161"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:25.156" endtime="20241124 14:29:25.161"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:25.168" endtime="20241124 14:29:25.168"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.172" endtime="20241124 14:29:25.172"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.161" endtime="20241124 14:29:25.172"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.175" endtime="20241124 14:29:25.175"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.176" endtime="20241124 14:29:25.176"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.175" endtime="20241124 14:29:25.176"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.176" endtime="20241124 14:29:25.176"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.176" endtime="20241124 14:29:25.177"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:25.175" endtime="20241124 14:29:25.177"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:25.172" endtime="20241124 14:29:25.177"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.179" endtime="20241124 14:29:25.180"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.177" endtime="20241124 14:29:25.180"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:25.187" endtime="20241124 14:29:25.187"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:25.187" endtime="20241124 14:29:25.187"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:25.180" endtime="20241124 14:29:25.187"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.454" endtime="20241124 14:29:25.187"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:25.188" endtime="20241124 14:29:25.189"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:26.205" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241124 14:29:25.189" endtime="20241124 14:29:26.206"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:26.206" endtime="20241124 14:29:26.208"/>
</return>
<msg timestamp="20241124 14:29:26.209" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241124 14:29:19.452" endtime="20241124 14:29:26.209"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.214" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:41</msg>
<status status="PASS" starttime="20241124 14:29:26.213" endtime="20241124 14:29:26.214"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.217" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:26.216" endtime="20241124 14:29:26.218"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.219" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:26.218" endtime="20241124 14:29:26.220"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.223" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:26.220" endtime="20241124 14:29:26.223"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.225" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:26.223" endtime="20241124 14:29:26.225"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.227" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:26.225" endtime="20241124 14:29:26.227"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.229" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:26.227" endtime="20241124 14:29:26.229"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.231" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:26.230" endtime="20241124 14:29:26.231"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:26.231" endtime="20241124 14:29:26.232"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:26.241" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:26.240" endtime="20241124 14:29:26.242"/>
</kw>
<msg timestamp="20241124 14:29:26.242" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:26.239" endtime="20241124 14:29:26.242"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.244" endtime="20241124 14:29:26.244"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.245" endtime="20241124 14:29:26.245"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.244" endtime="20241124 14:29:26.245"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.246" endtime="20241124 14:29:26.246"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.245" endtime="20241124 14:29:26.246"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.244" endtime="20241124 14:29:26.246"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.243" endtime="20241124 14:29:26.247"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.242" endtime="20241124 14:29:26.247"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:26.247" endtime="20241124 14:29:26.247"/>
</return>
<msg timestamp="20241124 14:29:26.248" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:26.236" endtime="20241124 14:29:26.248"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:26.256" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:46::flowActionSequenceId:42'.</msg>
<status status="FAIL" starttime="20241124 14:29:26.253" endtime="20241124 14:29:26.256"/>
</kw>
<msg timestamp="20241124 14:29:26.257" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:26.252" endtime="20241124 14:29:26.257"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.259" endtime="20241124 14:29:26.259"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.261" endtime="20241124 14:29:26.261"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.259" endtime="20241124 14:29:26.261"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.262" endtime="20241124 14:29:26.262"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.261" endtime="20241124 14:29:26.262"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.259" endtime="20241124 14:29:26.262"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.258" endtime="20241124 14:29:26.262"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.257" endtime="20241124 14:29:26.262"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:26.262" endtime="20241124 14:29:26.263"/>
</return>
<msg timestamp="20241124 14:29:26.263" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:26.251" endtime="20241124 14:29:26.263"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:26.263" endtime="20241124 14:29:26.263"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.263" endtime="20241124 14:29:26.263"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.263" endtime="20241124 14:29:26.263"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.264" endtime="20241124 14:29:26.264"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:26.264" endtime="20241124 14:29:26.264"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.264" endtime="20241124 14:29:26.264"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.265" endtime="20241124 14:29:26.265"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:26.265" endtime="20241124 14:29:26.265"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.265" endtime="20241124 14:29:26.265"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.264" endtime="20241124 14:29:26.265"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.264" endtime="20241124 14:29:26.266"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.263" endtime="20241124 14:29:26.266"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.266" endtime="20241124 14:29:26.266"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:26.267" endtime="20241124 14:29:26.267"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.266" endtime="20241124 14:29:26.267"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.267" endtime="20241124 14:29:26.267"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:26.267" endtime="20241124 14:29:26.267"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.267" endtime="20241124 14:29:26.268"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.266" endtime="20241124 14:29:26.268"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.266" endtime="20241124 14:29:26.268"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.266" endtime="20241124 14:29:26.268"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.263" endtime="20241124 14:29:26.268"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.263" endtime="20241124 14:29:26.268"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:26.269" endtime="20241124 14:29:26.269"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.269" endtime="20241124 14:29:26.269"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.269" endtime="20241124 14:29:26.269"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.269" endtime="20241124 14:29:26.270"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.269" endtime="20241124 14:29:26.270"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.269" endtime="20241124 14:29:26.270"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.271" endtime="20241124 14:29:26.271"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.272" endtime="20241124 14:29:26.272"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:26.272" endtime="20241124 14:29:26.272"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.271" endtime="20241124 14:29:26.272"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.272" endtime="20241124 14:29:26.272"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:26.272" endtime="20241124 14:29:26.272"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.272" endtime="20241124 14:29:26.273"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.271" endtime="20241124 14:29:26.273"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.270" endtime="20241124 14:29:26.273"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.270" endtime="20241124 14:29:26.273"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.268" endtime="20241124 14:29:26.273"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.268" endtime="20241124 14:29:26.273"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.215" endtime="20241124 14:29:26.273"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.274" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:26.273" endtime="20241124 14:29:26.274"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.274" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:26.274" endtime="20241124 14:29:26.274"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.275" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:26.274" endtime="20241124 14:29:26.275"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.275" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:26.275" endtime="20241124 14:29:26.275"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.276" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.275" endtime="20241124 14:29:26.276"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.276" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:26.276" endtime="20241124 14:29:26.276"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.277" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:26.277" endtime="20241124 14:29:26.277"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:26.277" endtime="20241124 14:29:26.278"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:26.280" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:29:26.280" endtime="20241124 14:29:26.280"/>
</kw>
<msg timestamp="20241124 14:29:26.280" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:26.279" endtime="20241124 14:29:26.280"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.281" endtime="20241124 14:29:26.281"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.281" endtime="20241124 14:29:26.281"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.281" endtime="20241124 14:29:26.281"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.282" endtime="20241124 14:29:26.282"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.282" endtime="20241124 14:29:26.282"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.281" endtime="20241124 14:29:26.282"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.281" endtime="20241124 14:29:26.282"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.281" endtime="20241124 14:29:26.282"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:26.282" endtime="20241124 14:29:26.282"/>
</return>
<msg timestamp="20241124 14:29:26.283" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:26.279" endtime="20241124 14:29:26.283"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:26.285" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:26.284" endtime="20241124 14:29:26.285"/>
</kw>
<msg timestamp="20241124 14:29:26.285" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:26.284" endtime="20241124 14:29:26.285"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.286" endtime="20241124 14:29:26.286"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.286" endtime="20241124 14:29:26.286"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.286" endtime="20241124 14:29:26.286"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.286" endtime="20241124 14:29:26.286"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.286" endtime="20241124 14:29:26.286"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.286" endtime="20241124 14:29:26.286"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.285" endtime="20241124 14:29:26.286"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.285" endtime="20241124 14:29:26.287"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:26.287" endtime="20241124 14:29:26.287"/>
</return>
<msg timestamp="20241124 14:29:26.287" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:26.284" endtime="20241124 14:29:26.287"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.288"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.288"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.288"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.288"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.288"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.288"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.288"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:26.289" endtime="20241124 14:29:26.289"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.289"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.289"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.289"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.289"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.289" endtime="20241124 14:29:26.289"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:26.289" endtime="20241124 14:29:26.289"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.289" endtime="20241124 14:29:26.289"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.290" endtime="20241124 14:29:26.290"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:26.290" endtime="20241124 14:29:26.290"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.290" endtime="20241124 14:29:26.290"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.289" endtime="20241124 14:29:26.290"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.289" endtime="20241124 14:29:26.290"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.289" endtime="20241124 14:29:26.290"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.290"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.288" endtime="20241124 14:29:26.290"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:26.291" endtime="20241124 14:29:26.291"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.291" endtime="20241124 14:29:26.291"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.291" endtime="20241124 14:29:26.291"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.291" endtime="20241124 14:29:26.291"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.291" endtime="20241124 14:29:26.291"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.291" endtime="20241124 14:29:26.291"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.291" endtime="20241124 14:29:26.292"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.292" endtime="20241124 14:29:26.292"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:26.292" endtime="20241124 14:29:26.292"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.292" endtime="20241124 14:29:26.292"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.292" endtime="20241124 14:29:26.292"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:26.292" endtime="20241124 14:29:26.292"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.292" endtime="20241124 14:29:26.292"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.292" endtime="20241124 14:29:26.293"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.291" endtime="20241124 14:29:26.293"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.291" endtime="20241124 14:29:26.293"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.290" endtime="20241124 14:29:26.293"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.290" endtime="20241124 14:29:26.293"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.273" endtime="20241124 14:29:26.293"/>
</iter>
<status status="PASS" starttime="20241124 14:29:26.215" endtime="20241124 14:29:26.293"/>
</for>
<msg timestamp="20241124 14:29:26.293" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:29:26.210" endtime="20241124 14:29:26.293"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:26.293" endtime="20241124 14:29:26.294"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:26.295" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '304', 'status': 'COMPLETED', 'actionName': 'Launch browser', 'actionType': 'LAUNCH_BROWSER', 'actionXpath': '', 'inputValue': 'https://iassistant.ideas2it.com/login', ...</msg>
<status status="PASS" starttime="20241124 14:29:26.295" endtime="20241124 14:29:26.296"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:26.296" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "304", "status": "COMPLETED", "actionName": "Launch browser", "actionType": "LAUNCH_BROWSER", "actionXpath": "", "inputValue": "https://iassistant.ideas2it.com/login", ...</msg>
<status status="PASS" starttime="20241124 14:29:26.296" endtime="20241124 14:29:26.296"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:26.325" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:26.325" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:26.296" endtime="20241124 14:29:26.325"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:26.325" endtime="20241124 14:29:26.326"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:26.326" endtime="20241124 14:29:26.326"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.296" endtime="20241124 14:29:26.326"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.294" endtime="20241124 14:29:26.327"/>
</kw>
<status status="PASS" starttime="20241124 14:29:19.439" endtime="20241124 14:29:26.327"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.327" endtime="20241124 14:29:26.327"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:26.327" endtime="20241124 14:29:26.327"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.327" endtime="20241124 14:29:26.328"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.327" endtime="20241124 14:29:26.328"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.439" endtime="20241124 14:29:26.328"/>
</try>
<status status="PASS" starttime="20241124 14:29:19.438" endtime="20241124 14:29:26.328"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '43', 'actionId': '30', 'flowId': '14', 'order': 1, 'createdAt': '2024-11-21T16:43:09.646Z', 'updatedAt': '2024-11-22T04:20:41.490Z', 'action': {'id': '30', 'name': 'Set login password', 'type'...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.329" level="INFO">${action} = {'id': '30', 'name': 'Set login password', 'type': 'TYPE_TEXT', 'xpath': '//input[@id="password"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:39:54.768Z', 'updatedAt': '2024-11-21...</msg>
<status status="PASS" starttime="20241124 14:29:26.328" endtime="20241124 14:29:26.329"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:26.329" endtime="20241124 14:29:26.329"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:26.330" level="INFO">${input} = {'id': '27', 'actionId': '30', 'name': 'Bharani', 'value': 'vijaybharani', 'waitAfterAction': '1', 'isDefault': True, 'createdAt': '2024-11-21T16:39:55.091Z', 'updatedAt': '2024-11-21T17:23:21.466Z'}</msg>
<status status="PASS" starttime="20241124 14:29:26.329" endtime="20241124 14:29:26.330"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.330" endtime="20241124 14:29:26.330"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.330" endtime="20241124 14:29:26.330"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.330" endtime="20241124 14:29:26.330"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.330" endtime="20241124 14:29:26.330"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:26.331" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:29:26.331" endtime="20241124 14:29:26.331"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:26.331" endtime="20241124 14:29:26.332"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.331" endtime="20241124 14:29:26.332"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:26.332" endtime="20241124 14:29:26.332"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.332" endtime="20241124 14:29:26.332"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.334" endtime="20241124 14:29:26.334"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.332" endtime="20241124 14:29:26.334"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.335" endtime="20241124 14:29:26.336"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.339" endtime="20241124 14:29:26.340"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.334" endtime="20241124 14:29:26.340"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.342" endtime="20241124 14:29:26.343"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.340" endtime="20241124 14:29:26.343"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.346" endtime="20241124 14:29:26.346"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.343" endtime="20241124 14:29:26.347"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="password"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:26.403" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:26.376" endtime="20241124 14:29:26.403"/>
</kw>
<msg timestamp="20241124 14:29:26.403" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.375" endtime="20241124 14:29:26.403"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.403" endtime="20241124 14:29:26.403"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.375" endtime="20241124 14:29:26.403"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.404" endtime="20241124 14:29:26.404"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.404" endtime="20241124 14:29:26.404"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.404" endtime="20241124 14:29:26.404"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.374" endtime="20241124 14:29:26.405"/>
</try>
<msg timestamp="20241124 14:29:26.405" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.374" endtime="20241124 14:29:26.405"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.405" endtime="20241124 14:29:26.405"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.362" endtime="20241124 14:29:26.405"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:26.406" endtime="20241124 14:29:26.406"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.406" endtime="20241124 14:29:26.406"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.361" endtime="20241124 14:29:26.406"/>
</try>
<msg timestamp="20241124 14:29:26.407" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.358" endtime="20241124 14:29:26.407"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.409" endtime="20241124 14:29:26.409"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.410" endtime="20241124 14:29:26.410"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.409" endtime="20241124 14:29:26.410"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.409" endtime="20241124 14:29:26.410"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.408" endtime="20241124 14:29:26.410"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.353" endtime="20241124 14:29:26.410"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:26.423" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:26.418" endtime="20241124 14:29:26.423"/>
</kw>
<msg timestamp="20241124 14:29:26.424" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.418" endtime="20241124 14:29:26.424"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.424" endtime="20241124 14:29:26.424"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.418" endtime="20241124 14:29:26.424"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.424" endtime="20241124 14:29:26.424"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.425" endtime="20241124 14:29:26.425"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.424" endtime="20241124 14:29:26.425"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.417" endtime="20241124 14:29:26.425"/>
</try>
<msg timestamp="20241124 14:29:26.425" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.417" endtime="20241124 14:29:26.425"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.425" endtime="20241124 14:29:26.425"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.416" endtime="20241124 14:29:26.425"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:26.425" endtime="20241124 14:29:26.425"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.425" endtime="20241124 14:29:26.425"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.416" endtime="20241124 14:29:26.426"/>
</try>
<msg timestamp="20241124 14:29:26.426" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.416" endtime="20241124 14:29:26.426"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.428" endtime="20241124 14:29:26.428"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.428" endtime="20241124 14:29:26.428"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.428" endtime="20241124 14:29:26.428"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.428" endtime="20241124 14:29:26.428"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.427" endtime="20241124 14:29:26.428"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.415" endtime="20241124 14:29:26.429"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:26.445" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:29:26.445" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:26.429" endtime="20241124 14:29:26.445"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:26.445" endtime="20241124 14:29:26.445"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.429" endtime="20241124 14:29:26.445"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.446" endtime="20241124 14:29:26.446"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.446" endtime="20241124 14:29:26.446"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.446" endtime="20241124 14:29:26.446"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.429" endtime="20241124 14:29:26.446"/>
</try>
<msg timestamp="20241124 14:29:26.446" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:26.414" endtime="20241124 14:29:26.446"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.449" endtime="20241124 14:29:26.449"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.449" endtime="20241124 14:29:26.449"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.448" endtime="20241124 14:29:26.449"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.448" endtime="20241124 14:29:26.449"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.447" endtime="20241124 14:29:26.449"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.413" endtime="20241124 14:29:26.449"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.449" endtime="20241124 14:29:26.450"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.449" endtime="20241124 14:29:26.450"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.413" endtime="20241124 14:29:26.450"/>
</try>
<status status="PASS" starttime="20241124 14:29:26.412" endtime="20241124 14:29:26.450"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:26.460" level="INFO">Waited for Element with selector //input[@id="password"] at state visible</msg>
<status status="PASS" starttime="20241124 14:29:26.455" endtime="20241124 14:29:26.460"/>
</kw>
<msg timestamp="20241124 14:29:26.460" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.454" endtime="20241124 14:29:26.460"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.460" endtime="20241124 14:29:26.460"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.454" endtime="20241124 14:29:26.460"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.461" endtime="20241124 14:29:26.461"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.461" endtime="20241124 14:29:26.461"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.460" endtime="20241124 14:29:26.461"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.454" endtime="20241124 14:29:26.461"/>
</try>
<msg timestamp="20241124 14:29:26.461" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.453" endtime="20241124 14:29:26.461"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.461" endtime="20241124 14:29:26.461"/>
</return>
<msg timestamp="20241124 14:29:26.462" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.452" endtime="20241124 14:29:26.462"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.464" endtime="20241124 14:29:26.464"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.464" endtime="20241124 14:29:26.464"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.464" endtime="20241124 14:29:26.464"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.463" endtime="20241124 14:29:26.464"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.463" endtime="20241124 14:29:26.464"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.451" endtime="20241124 14:29:26.464"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.350" endtime="20241124 14:29:26.465"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:26.482" level="INFO">Waited for Element with selector //input[@id="password"] at state editable</msg>
<status status="PASS" starttime="20241124 14:29:26.469" endtime="20241124 14:29:26.483"/>
</kw>
<msg timestamp="20241124 14:29:26.483" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.468" endtime="20241124 14:29:26.483"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.483" endtime="20241124 14:29:26.483"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.468" endtime="20241124 14:29:26.483"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.483" endtime="20241124 14:29:26.483"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.484" endtime="20241124 14:29:26.484"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.483" endtime="20241124 14:29:26.484"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.468" endtime="20241124 14:29:26.484"/>
</try>
<msg timestamp="20241124 14:29:26.484" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.468" endtime="20241124 14:29:26.484"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.484" endtime="20241124 14:29:26.484"/>
</return>
<msg timestamp="20241124 14:29:26.484" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.467" endtime="20241124 14:29:26.485"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.487" endtime="20241124 14:29:26.487"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.487" endtime="20241124 14:29:26.487"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.487" endtime="20241124 14:29:26.487"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.486" endtime="20241124 14:29:26.487"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.485" endtime="20241124 14:29:26.488"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.466" endtime="20241124 14:29:26.488"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:26.488" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:29:26.488" endtime="20241124 14:29:26.488"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="password"]: string</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.490" endtime="20241124 14:29:26.490"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.492" endtime="20241124 14:29:26.492"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.490" endtime="20241124 14:29:26.492"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:26.492" endtime="20241124 14:29:26.492"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.492" endtime="20241124 14:29:26.492"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.490" endtime="20241124 14:29:26.492"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241124 14:29:26.493" level="INFO">Fills the text 'vijaybharani' in the given field.</msg>
<status status="PASS" starttime="20241124 14:29:26.493" endtime="20241124 14:29:26.516"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.493" endtime="20241124 14:29:26.516"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.516" endtime="20241124 14:29:26.517"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.517" endtime="20241124 14:29:26.517"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.516" endtime="20241124 14:29:26.517"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.493" endtime="20241124 14:29:26.517"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="password"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:26.529" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:26.524" endtime="20241124 14:29:26.529"/>
</kw>
<msg timestamp="20241124 14:29:26.529" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.524" endtime="20241124 14:29:26.529"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.529" endtime="20241124 14:29:26.529"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.523" endtime="20241124 14:29:26.529"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.529" endtime="20241124 14:29:26.530"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.530" endtime="20241124 14:29:26.530"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.529" endtime="20241124 14:29:26.530"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.523" endtime="20241124 14:29:26.530"/>
</try>
<msg timestamp="20241124 14:29:26.530" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.523" endtime="20241124 14:29:26.530"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.530" endtime="20241124 14:29:26.530"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.522" endtime="20241124 14:29:26.530"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:26.531" endtime="20241124 14:29:26.531"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.531" endtime="20241124 14:29:26.531"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.522" endtime="20241124 14:29:26.531"/>
</try>
<msg timestamp="20241124 14:29:26.531" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.522" endtime="20241124 14:29:26.531"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.533" endtime="20241124 14:29:26.534"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.534" endtime="20241124 14:29:26.534"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.533" endtime="20241124 14:29:26.534"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.533" endtime="20241124 14:29:26.534"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.532" endtime="20241124 14:29:26.534"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.521" endtime="20241124 14:29:26.534"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:26.548" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:26.543" endtime="20241124 14:29:26.548"/>
</kw>
<msg timestamp="20241124 14:29:26.549" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.542" endtime="20241124 14:29:26.549"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.549" endtime="20241124 14:29:26.549"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.542" endtime="20241124 14:29:26.549"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.550" endtime="20241124 14:29:26.550"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.550" endtime="20241124 14:29:26.550"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.549" endtime="20241124 14:29:26.550"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.542" endtime="20241124 14:29:26.550"/>
</try>
<msg timestamp="20241124 14:29:26.550" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.542" endtime="20241124 14:29:26.550"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.550" endtime="20241124 14:29:26.551"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.541" endtime="20241124 14:29:26.551"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:26.551" endtime="20241124 14:29:26.551"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.551" endtime="20241124 14:29:26.551"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.541" endtime="20241124 14:29:26.551"/>
</try>
<msg timestamp="20241124 14:29:26.551" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.540" endtime="20241124 14:29:26.551"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.554" endtime="20241124 14:29:26.554"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.554" endtime="20241124 14:29:26.554"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.553" endtime="20241124 14:29:26.554"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.553" endtime="20241124 14:29:26.554"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.552" endtime="20241124 14:29:26.555"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.540" endtime="20241124 14:29:26.555"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:26.563" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:29:26.563" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:26.555" endtime="20241124 14:29:26.563"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:26.564" endtime="20241124 14:29:26.564"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.555" endtime="20241124 14:29:26.564"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.564" endtime="20241124 14:29:26.564"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.564" endtime="20241124 14:29:26.565"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.564" endtime="20241124 14:29:26.565"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.555" endtime="20241124 14:29:26.565"/>
</try>
<msg timestamp="20241124 14:29:26.565" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:26.537" endtime="20241124 14:29:26.565"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.567" endtime="20241124 14:29:26.567"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.568" endtime="20241124 14:29:26.568"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.567" endtime="20241124 14:29:26.568"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.567" endtime="20241124 14:29:26.568"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.566" endtime="20241124 14:29:26.568"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.536" endtime="20241124 14:29:26.568"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.568" endtime="20241124 14:29:26.568"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.568" endtime="20241124 14:29:26.568"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.536" endtime="20241124 14:29:26.568"/>
</try>
<status status="PASS" starttime="20241124 14:29:26.536" endtime="20241124 14:29:26.569"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:26.579" level="INFO">Waited for Element with selector //input[@id="password"] at state visible</msg>
<status status="PASS" starttime="20241124 14:29:26.573" endtime="20241124 14:29:26.579"/>
</kw>
<msg timestamp="20241124 14:29:26.579" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.573" endtime="20241124 14:29:26.580"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.580" endtime="20241124 14:29:26.580"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.573" endtime="20241124 14:29:26.580"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.580" endtime="20241124 14:29:26.580"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.580" endtime="20241124 14:29:26.580"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.580" endtime="20241124 14:29:26.580"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.573" endtime="20241124 14:29:26.581"/>
</try>
<msg timestamp="20241124 14:29:26.581" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.572" endtime="20241124 14:29:26.581"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.581" endtime="20241124 14:29:26.581"/>
</return>
<msg timestamp="20241124 14:29:26.581" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.571" endtime="20241124 14:29:26.581"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.583" endtime="20241124 14:29:26.584"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.584" endtime="20241124 14:29:26.584"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.583" endtime="20241124 14:29:26.584"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.583" endtime="20241124 14:29:26.584"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.582" endtime="20241124 14:29:26.584"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.571" endtime="20241124 14:29:26.584"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.519" endtime="20241124 14:29:26.584"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:26.598" level="INFO">Waited for Element with selector //input[@id="password"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:26.593" endtime="20241124 14:29:26.598"/>
</kw>
<msg timestamp="20241124 14:29:26.598" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.592" endtime="20241124 14:29:26.598"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.598" endtime="20241124 14:29:26.598"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.592" endtime="20241124 14:29:26.598"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.599" endtime="20241124 14:29:26.599"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.599" endtime="20241124 14:29:26.599"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.599" endtime="20241124 14:29:26.599"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.592" endtime="20241124 14:29:26.599"/>
</try>
<msg timestamp="20241124 14:29:26.600" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.591" endtime="20241124 14:29:26.600"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.600" endtime="20241124 14:29:26.600"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.589" endtime="20241124 14:29:26.600"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:26.600" endtime="20241124 14:29:26.600"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:26.600" endtime="20241124 14:29:26.600"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.589" endtime="20241124 14:29:26.600"/>
</try>
<msg timestamp="20241124 14:29:26.600" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.589" endtime="20241124 14:29:26.600"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.603" endtime="20241124 14:29:26.603"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.603" endtime="20241124 14:29:26.603"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.602" endtime="20241124 14:29:26.603"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.602" endtime="20241124 14:29:26.603"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.601" endtime="20241124 14:29:26.604"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.588" endtime="20241124 14:29:26.604"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:26.614" level="INFO">Property: 'vijaybharani'</msg>
<msg timestamp="20241124 14:29:26.614" level="INFO">${property} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:29:26.605" endtime="20241124 14:29:26.614"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:26.614" endtime="20241124 14:29:26.614"/>
</return>
<status status="PASS" starttime="20241124 14:29:26.604" endtime="20241124 14:29:26.614"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.615" endtime="20241124 14:29:26.615"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.615" endtime="20241124 14:29:26.615"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.614" endtime="20241124 14:29:26.615"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.604" endtime="20241124 14:29:26.615"/>
</try>
<msg timestamp="20241124 14:29:26.615" level="INFO">${fieldTextValue} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:29:26.585" endtime="20241124 14:29:26.615"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241124 14:29:26.616" endtime="20241124 14:29:26.616"/>
</return>
<msg timestamp="20241124 14:29:26.616" level="INFO">${populated_value} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:29:26.518" endtime="20241124 14:29:26.616"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241124 14:29:26.621" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.618" endtime="20241124 14:29:26.622"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:26.622" endtime="20241124 14:29:26.622"/>
</return>
<msg timestamp="20241124 14:29:26.622" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241124 14:29:26.618" endtime="20241124 14:29:26.622"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.626" endtime="20241124 14:29:26.626"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.626" endtime="20241124 14:29:26.626"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.626" endtime="20241124 14:29:26.626"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.626" endtime="20241124 14:29:26.627"/>
</if>
<status status="PASS" starttime="20241124 14:29:26.625" endtime="20241124 14:29:26.627"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.518" endtime="20241124 14:29:26.627"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.489" endtime="20241124 14:29:26.627"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.489" endtime="20241124 14:29:26.627"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.489" endtime="20241124 14:29:26.627"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.627" endtime="20241124 14:29:26.627"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.627" endtime="20241124 14:29:26.628"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.488" endtime="20241124 14:29:26.628"/>
</try>
<status status="PASS" starttime="20241124 14:29:26.349" endtime="20241124 14:29:26.628"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.347" endtime="20241124 14:29:26.628"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.629" endtime="20241124 14:29:26.629"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.628" endtime="20241124 14:29:26.629"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.630" endtime="20241124 14:29:26.630"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.630" endtime="20241124 14:29:26.631"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.630" endtime="20241124 14:29:26.631"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.631" endtime="20241124 14:29:26.631"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.631" endtime="20241124 14:29:26.631"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.630" endtime="20241124 14:29:26.631"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.629" endtime="20241124 14:29:26.631"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:26.636" endtime="20241124 14:29:26.636"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.639" endtime="20241124 14:29:26.640"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.631" endtime="20241124 14:29:26.640"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.641" endtime="20241124 14:29:26.641"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.641" endtime="20241124 14:29:26.641"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.641" endtime="20241124 14:29:26.641"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.642" endtime="20241124 14:29:26.642"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.641" endtime="20241124 14:29:26.642"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.641" endtime="20241124 14:29:26.642"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.640" endtime="20241124 14:29:26.642"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:26.647" endtime="20241124 14:29:26.647"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.649" endtime="20241124 14:29:26.650"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.642" endtime="20241124 14:29:26.650"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.651" endtime="20241124 14:29:26.651"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.651" endtime="20241124 14:29:26.651"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.651" endtime="20241124 14:29:26.651"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.651" endtime="20241124 14:29:26.652"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.651" endtime="20241124 14:29:26.652"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:26.651" endtime="20241124 14:29:26.652"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:26.650" endtime="20241124 14:29:26.652"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.655" endtime="20241124 14:29:26.655"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.652" endtime="20241124 14:29:26.655"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:26.660" endtime="20241124 14:29:26.661"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:26.661" endtime="20241124 14:29:26.661"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:26.655" endtime="20241124 14:29:26.661"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.331" endtime="20241124 14:29:26.661"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:26.661" endtime="20241124 14:29:26.662"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:27.668" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241124 14:29:26.662" endtime="20241124 14:29:27.668"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:27.668" endtime="20241124 14:29:27.668"/>
</return>
<msg timestamp="20241124 14:29:27.668" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241124 14:29:26.331" endtime="20241124 14:29:27.668"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.669" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:43</msg>
<status status="PASS" starttime="20241124 14:29:27.669" endtime="20241124 14:29:27.669"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.670" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:27.670" endtime="20241124 14:29:27.670"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.670" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:27.670" endtime="20241124 14:29:27.670"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.670" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:27.670" endtime="20241124 14:29:27.670"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.671" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:27.671" endtime="20241124 14:29:27.671"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.671" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:27.671" endtime="20241124 14:29:27.671"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.672" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:27.671" endtime="20241124 14:29:27.672"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.672" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:27.672" endtime="20241124 14:29:27.672"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:27.672" endtime="20241124 14:29:27.672"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:27.675" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:27.674" endtime="20241124 14:29:27.675"/>
</kw>
<msg timestamp="20241124 14:29:27.675" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:27.674" endtime="20241124 14:29:27.675"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.675" endtime="20241124 14:29:27.675"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.676" endtime="20241124 14:29:27.676"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.676" endtime="20241124 14:29:27.676"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.676" endtime="20241124 14:29:27.676"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.676" endtime="20241124 14:29:27.676"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.676" endtime="20241124 14:29:27.676"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.675" endtime="20241124 14:29:27.676"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.675" endtime="20241124 14:29:27.676"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:27.676" endtime="20241124 14:29:27.677"/>
</return>
<msg timestamp="20241124 14:29:27.677" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:27.674" endtime="20241124 14:29:27.677"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:27.680" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:46::flowActionSequenceId:42'.</msg>
<status status="FAIL" starttime="20241124 14:29:27.679" endtime="20241124 14:29:27.680"/>
</kw>
<msg timestamp="20241124 14:29:27.680" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:27.679" endtime="20241124 14:29:27.680"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.680" endtime="20241124 14:29:27.680"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.681" endtime="20241124 14:29:27.681"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.680" endtime="20241124 14:29:27.681"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.681" endtime="20241124 14:29:27.681"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.681" endtime="20241124 14:29:27.681"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.680" endtime="20241124 14:29:27.681"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.680" endtime="20241124 14:29:27.681"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.680" endtime="20241124 14:29:27.681"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:27.681" endtime="20241124 14:29:27.681"/>
</return>
<msg timestamp="20241124 14:29:27.682" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:27.679" endtime="20241124 14:29:27.682"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:27.682" endtime="20241124 14:29:27.682"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.682" endtime="20241124 14:29:27.682"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.682" endtime="20241124 14:29:27.682"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.683" endtime="20241124 14:29:27.683"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:27.683" endtime="20241124 14:29:27.683"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.683" endtime="20241124 14:29:27.683"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.683" endtime="20241124 14:29:27.683"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:27.683" endtime="20241124 14:29:27.683"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.683" endtime="20241124 14:29:27.684"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.682" endtime="20241124 14:29:27.684"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.682" endtime="20241124 14:29:27.684"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.682" endtime="20241124 14:29:27.684"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.684" endtime="20241124 14:29:27.684"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:27.684" endtime="20241124 14:29:27.684"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.684" endtime="20241124 14:29:27.684"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.685" endtime="20241124 14:29:27.685"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:27.685" endtime="20241124 14:29:27.685"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.684" endtime="20241124 14:29:27.685"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.684" endtime="20241124 14:29:27.685"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.684" endtime="20241124 14:29:27.685"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.684" endtime="20241124 14:29:27.685"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.682" endtime="20241124 14:29:27.685"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.682" endtime="20241124 14:29:27.685"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:27.686" endtime="20241124 14:29:27.686"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.686" endtime="20241124 14:29:27.686"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.686" endtime="20241124 14:29:27.686"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.687" endtime="20241124 14:29:27.687"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.686" endtime="20241124 14:29:27.687"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.686" endtime="20241124 14:29:27.687"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.687" endtime="20241124 14:29:27.687"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.687" endtime="20241124 14:29:27.687"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:27.688" endtime="20241124 14:29:27.688"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.687" endtime="20241124 14:29:27.688"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.688" endtime="20241124 14:29:27.688"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:27.688" endtime="20241124 14:29:27.688"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.688" endtime="20241124 14:29:27.688"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.687" endtime="20241124 14:29:27.688"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.687" endtime="20241124 14:29:27.688"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.687" endtime="20241124 14:29:27.688"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.685" endtime="20241124 14:29:27.689"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.685" endtime="20241124 14:29:27.689"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.670" endtime="20241124 14:29:27.689"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.690" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:27.689" endtime="20241124 14:29:27.690"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.690" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:27.690" endtime="20241124 14:29:27.690"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.690" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:27.690" endtime="20241124 14:29:27.690"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.691" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:27.690" endtime="20241124 14:29:27.691"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.691" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.691" endtime="20241124 14:29:27.691"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.691" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:27.691" endtime="20241124 14:29:27.692"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.692" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:27.692" endtime="20241124 14:29:27.692"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:27.692" endtime="20241124 14:29:27.692"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:27.695" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:29:27.694" endtime="20241124 14:29:27.695"/>
</kw>
<msg timestamp="20241124 14:29:27.695" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:27.694" endtime="20241124 14:29:27.695"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.696" endtime="20241124 14:29:27.696"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.696" endtime="20241124 14:29:27.696"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.696" endtime="20241124 14:29:27.696"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.696" endtime="20241124 14:29:27.697"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.696" endtime="20241124 14:29:27.697"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.696" endtime="20241124 14:29:27.697"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.696" endtime="20241124 14:29:27.697"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.695" endtime="20241124 14:29:27.697"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:27.697" endtime="20241124 14:29:27.697"/>
</return>
<msg timestamp="20241124 14:29:27.697" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:27.694" endtime="20241124 14:29:27.697"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:27.700" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:27.699" endtime="20241124 14:29:27.700"/>
</kw>
<msg timestamp="20241124 14:29:27.700" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:27.699" endtime="20241124 14:29:27.700"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.701" endtime="20241124 14:29:27.701"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.701" endtime="20241124 14:29:27.701"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.701" endtime="20241124 14:29:27.701"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.702" endtime="20241124 14:29:27.702"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.701" endtime="20241124 14:29:27.702"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.701" endtime="20241124 14:29:27.702"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.701" endtime="20241124 14:29:27.702"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.700" endtime="20241124 14:29:27.702"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:27.702" endtime="20241124 14:29:27.702"/>
</return>
<msg timestamp="20241124 14:29:27.703" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:27.699" endtime="20241124 14:29:27.703"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:27.704" endtime="20241124 14:29:27.704"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.704" endtime="20241124 14:29:27.704"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.704" endtime="20241124 14:29:27.704"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.704" endtime="20241124 14:29:27.704"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:27.704" endtime="20241124 14:29:27.704"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.704" endtime="20241124 14:29:27.704"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.705" endtime="20241124 14:29:27.705"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:27.705" endtime="20241124 14:29:27.705"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.704" endtime="20241124 14:29:27.705"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.704" endtime="20241124 14:29:27.705"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.704" endtime="20241124 14:29:27.705"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.704" endtime="20241124 14:29:27.705"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.706" endtime="20241124 14:29:27.706"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:27.706" endtime="20241124 14:29:27.706"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.705" endtime="20241124 14:29:27.706"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.707" endtime="20241124 14:29:27.707"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:27.707" endtime="20241124 14:29:27.707"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.707" endtime="20241124 14:29:27.707"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.705" endtime="20241124 14:29:27.707"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.705" endtime="20241124 14:29:27.707"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.705" endtime="20241124 14:29:27.707"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.704" endtime="20241124 14:29:27.707"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.703" endtime="20241124 14:29:27.707"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:27.708" endtime="20241124 14:29:27.708"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.708" endtime="20241124 14:29:27.708"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.708" endtime="20241124 14:29:27.708"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.708" endtime="20241124 14:29:27.709"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.708" endtime="20241124 14:29:27.709"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.708" endtime="20241124 14:29:27.709"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.709" endtime="20241124 14:29:27.709"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.710" endtime="20241124 14:29:27.710"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:27.710" endtime="20241124 14:29:27.710"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.709" endtime="20241124 14:29:27.710"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.710" endtime="20241124 14:29:27.710"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:27.710" endtime="20241124 14:29:27.710"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.710" endtime="20241124 14:29:27.711"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.709" endtime="20241124 14:29:27.711"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.709" endtime="20241124 14:29:27.711"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.709" endtime="20241124 14:29:27.711"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.708" endtime="20241124 14:29:27.711"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.707" endtime="20241124 14:29:27.711"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.689" endtime="20241124 14:29:27.711"/>
</iter>
<status status="PASS" starttime="20241124 14:29:27.669" endtime="20241124 14:29:27.711"/>
</for>
<msg timestamp="20241124 14:29:27.711" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:29:27.668" endtime="20241124 14:29:27.711"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:27.711" endtime="20241124 14:29:27.713"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:27.715" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '305', 'status': 'COMPLETED', 'actionName': 'Set login password', 'actionType': 'TYPE_TEXT', 'actionXpath': '//input[@id="password"]', 'inputValue': 'vijaybharani', 'er...</msg>
<status status="PASS" starttime="20241124 14:29:27.714" endtime="20241124 14:29:27.715"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:27.716" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "305", "status": "COMPLETED", "actionName": "Set login password", "actionType": "TYPE_TEXT", "actionXpath": "//input[@id=\"password\"]", "inputValue": "vijaybharani", "...</msg>
<status status="PASS" starttime="20241124 14:29:27.716" endtime="20241124 14:29:27.716"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:27.721" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:27.721" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:27.716" endtime="20241124 14:29:27.721"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:27.722" endtime="20241124 14:29:27.722"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:27.723" endtime="20241124 14:29:27.723"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.715" endtime="20241124 14:29:27.724"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.713" endtime="20241124 14:29:27.724"/>
</kw>
<status status="PASS" starttime="20241124 14:29:26.328" endtime="20241124 14:29:27.724"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.724" endtime="20241124 14:29:27.724"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:27.724" endtime="20241124 14:29:27.724"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.724" endtime="20241124 14:29:27.724"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.724" endtime="20241124 14:29:27.725"/>
</branch>
<status status="PASS" starttime="20241124 14:29:26.328" endtime="20241124 14:29:27.725"/>
</try>
<status status="PASS" starttime="20241124 14:29:26.328" endtime="20241124 14:29:27.725"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '42', 'actionId': '29', 'flowId': '14', 'order': 2, 'createdAt': '2024-11-21T16:43:09.645Z', 'updatedAt': '2024-11-22T04:20:41.497Z', 'action': {'id': '29', 'name': 'Set login username', 'type'...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.726" level="INFO">${action} = {'id': '29', 'name': 'Set login username', 'type': 'TYPE_TEXT', 'xpath': 'id=username', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:39:14.809Z', 'updatedAt': '2024-11-23T17:11:28.46...</msg>
<status status="PASS" starttime="20241124 14:29:27.725" endtime="20241124 14:29:27.726"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:27.726" endtime="20241124 14:29:27.726"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:27.727" level="INFO">${input} = {'id': '26', 'actionId': '29', 'name': 'Bharani', 'value': 'bharani@ideas2it.com', 'waitAfterAction': '1', 'isDefault': True, 'createdAt': '2024-11-21T16:39:15.038Z', 'updatedAt': '2024-11-21T17:23:16...</msg>
<status status="PASS" starttime="20241124 14:29:27.727" endtime="20241124 14:29:27.727"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.728" endtime="20241124 14:29:27.728"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.728" endtime="20241124 14:29:27.728"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.728" endtime="20241124 14:29:27.728"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.727" endtime="20241124 14:29:27.728"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:27.729" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:27.729" endtime="20241124 14:29:27.729"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:27.730" endtime="20241124 14:29:27.730"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.730" endtime="20241124 14:29:27.730"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:27.730" endtime="20241124 14:29:27.730"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.730" endtime="20241124 14:29:27.730"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.732" endtime="20241124 14:29:27.732"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.731" endtime="20241124 14:29:27.732"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.735" endtime="20241124 14:29:27.735"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.737" endtime="20241124 14:29:27.738"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.733" endtime="20241124 14:29:27.738"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.739" endtime="20241124 14:29:27.739"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.738" endtime="20241124 14:29:27.739"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.742" endtime="20241124 14:29:27.742"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.740" endtime="20241124 14:29:27.742"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=username: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:27.760" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:29:27.751" endtime="20241124 14:29:27.760"/>
</kw>
<msg timestamp="20241124 14:29:27.761" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.750" endtime="20241124 14:29:27.761"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.761" endtime="20241124 14:29:27.761"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.750" endtime="20241124 14:29:27.761"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.761" endtime="20241124 14:29:27.761"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.762" endtime="20241124 14:29:27.762"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.761" endtime="20241124 14:29:27.762"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.750" endtime="20241124 14:29:27.762"/>
</try>
<msg timestamp="20241124 14:29:27.762" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.749" endtime="20241124 14:29:27.762"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.762" endtime="20241124 14:29:27.762"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.748" endtime="20241124 14:29:27.762"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:27.763" endtime="20241124 14:29:27.763"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.762" endtime="20241124 14:29:27.763"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.748" endtime="20241124 14:29:27.763"/>
</try>
<msg timestamp="20241124 14:29:27.763" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.748" endtime="20241124 14:29:27.763"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.765" endtime="20241124 14:29:27.765"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.766" endtime="20241124 14:29:27.766"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.765" endtime="20241124 14:29:27.766"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.765" endtime="20241124 14:29:27.766"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.764" endtime="20241124 14:29:27.766"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.747" endtime="20241124 14:29:27.766"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:27.781" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:29:27.775" endtime="20241124 14:29:27.781"/>
</kw>
<msg timestamp="20241124 14:29:27.781" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.775" endtime="20241124 14:29:27.781"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.782" endtime="20241124 14:29:27.782"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.775" endtime="20241124 14:29:27.782"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.782" endtime="20241124 14:29:27.782"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.783" endtime="20241124 14:29:27.783"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.782" endtime="20241124 14:29:27.783"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.775" endtime="20241124 14:29:27.783"/>
</try>
<msg timestamp="20241124 14:29:27.784" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.775" endtime="20241124 14:29:27.784"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.784" endtime="20241124 14:29:27.784"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.774" endtime="20241124 14:29:27.784"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:27.784" endtime="20241124 14:29:27.784"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.784" endtime="20241124 14:29:27.784"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.773" endtime="20241124 14:29:27.785"/>
</try>
<msg timestamp="20241124 14:29:27.785" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.773" endtime="20241124 14:29:27.785"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.788" endtime="20241124 14:29:27.789"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.789" endtime="20241124 14:29:27.790"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.788" endtime="20241124 14:29:27.790"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.788" endtime="20241124 14:29:27.790"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.787" endtime="20241124 14:29:27.790"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.773" endtime="20241124 14:29:27.790"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:27.799" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:29:27.799" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:27.791" endtime="20241124 14:29:27.799"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:27.799" endtime="20241124 14:29:27.799"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.791" endtime="20241124 14:29:27.799"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.800" endtime="20241124 14:29:27.800"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.800" endtime="20241124 14:29:27.800"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.799" endtime="20241124 14:29:27.800"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.791" endtime="20241124 14:29:27.800"/>
</try>
<msg timestamp="20241124 14:29:27.800" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:27.770" endtime="20241124 14:29:27.800"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.804" endtime="20241124 14:29:27.805"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.803" endtime="20241124 14:29:27.805"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.803" endtime="20241124 14:29:27.805"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.801" endtime="20241124 14:29:27.805"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.769" endtime="20241124 14:29:27.805"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.769" endtime="20241124 14:29:27.805"/>
</try>
<status status="PASS" starttime="20241124 14:29:27.768" endtime="20241124 14:29:27.805"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:27.805" level="INFO">Waited for Element with selector id=username at state visible</msg>
<status status="PASS" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</kw>
<msg timestamp="20241124 14:29:27.805" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</try>
<msg timestamp="20241124 14:29:27.805" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</return>
<msg timestamp="20241124 14:29:27.805" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.805"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.822" endtime="20241124 14:29:27.822"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.822" endtime="20241124 14:29:27.822"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.822" endtime="20241124 14:29:27.822"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.822" endtime="20241124 14:29:27.822"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.820" endtime="20241124 14:29:27.823"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.805" endtime="20241124 14:29:27.823"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.745" endtime="20241124 14:29:27.823"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:27.839" level="INFO">Waited for Element with selector id=username at state editable</msg>
<status status="PASS" starttime="20241124 14:29:27.827" endtime="20241124 14:29:27.839"/>
</kw>
<msg timestamp="20241124 14:29:27.839" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.827" endtime="20241124 14:29:27.839"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.839" endtime="20241124 14:29:27.839"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.827" endtime="20241124 14:29:27.839"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.840" endtime="20241124 14:29:27.840"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.840" endtime="20241124 14:29:27.840"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.839" endtime="20241124 14:29:27.840"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.827" endtime="20241124 14:29:27.840"/>
</try>
<msg timestamp="20241124 14:29:27.840" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.826" endtime="20241124 14:29:27.840"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.840" endtime="20241124 14:29:27.841"/>
</return>
<msg timestamp="20241124 14:29:27.841" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.825" endtime="20241124 14:29:27.841"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.843" endtime="20241124 14:29:27.843"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.843" endtime="20241124 14:29:27.843"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.843" endtime="20241124 14:29:27.844"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.843" endtime="20241124 14:29:27.844"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.842" endtime="20241124 14:29:27.844"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.825" endtime="20241124 14:29:27.844"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:27.844" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:29:27.844" endtime="20241124 14:29:27.844"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=username: string</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.846" endtime="20241124 14:29:27.846"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.848" endtime="20241124 14:29:27.848"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.846" endtime="20241124 14:29:27.848"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:27.848" endtime="20241124 14:29:27.849"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.848" endtime="20241124 14:29:27.849"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.846" endtime="20241124 14:29:27.849"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241124 14:29:27.849" level="INFO">Fills the text 'bharani@ideas2it.com' in the given field.</msg>
<status status="PASS" starttime="20241124 14:29:27.849" endtime="20241124 14:29:27.869"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.849" endtime="20241124 14:29:27.869"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.870" endtime="20241124 14:29:27.870"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.870" endtime="20241124 14:29:27.871"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.869" endtime="20241124 14:29:27.871"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.849" endtime="20241124 14:29:27.871"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=username: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:27.888" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:29:27.882" endtime="20241124 14:29:27.888"/>
</kw>
<msg timestamp="20241124 14:29:27.889" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.881" endtime="20241124 14:29:27.889"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.889" endtime="20241124 14:29:27.889"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.881" endtime="20241124 14:29:27.889"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.889" endtime="20241124 14:29:27.889"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.890" endtime="20241124 14:29:27.890"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.889" endtime="20241124 14:29:27.890"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.881" endtime="20241124 14:29:27.890"/>
</try>
<msg timestamp="20241124 14:29:27.890" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.880" endtime="20241124 14:29:27.890"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.890" endtime="20241124 14:29:27.890"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.878" endtime="20241124 14:29:27.890"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:27.891" endtime="20241124 14:29:27.891"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.890" endtime="20241124 14:29:27.891"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.878" endtime="20241124 14:29:27.891"/>
</try>
<msg timestamp="20241124 14:29:27.891" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.878" endtime="20241124 14:29:27.891"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.893" endtime="20241124 14:29:27.893"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.894" endtime="20241124 14:29:27.894"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.893" endtime="20241124 14:29:27.894"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.893" endtime="20241124 14:29:27.894"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.892" endtime="20241124 14:29:27.894"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.877" endtime="20241124 14:29:27.894"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:27.908" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:29:27.902" endtime="20241124 14:29:27.908"/>
</kw>
<msg timestamp="20241124 14:29:27.908" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.902" endtime="20241124 14:29:27.908"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.908" endtime="20241124 14:29:27.909"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.902" endtime="20241124 14:29:27.909"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.909" endtime="20241124 14:29:27.909"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.909" endtime="20241124 14:29:27.909"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.909" endtime="20241124 14:29:27.909"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.902" endtime="20241124 14:29:27.909"/>
</try>
<msg timestamp="20241124 14:29:27.909" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.901" endtime="20241124 14:29:27.909"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.909" endtime="20241124 14:29:27.909"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.900" endtime="20241124 14:29:27.909"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:27.909" endtime="20241124 14:29:27.909"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.909" endtime="20241124 14:29:27.909"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.900" endtime="20241124 14:29:27.909"/>
</try>
<msg timestamp="20241124 14:29:27.910" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.900" endtime="20241124 14:29:27.910"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.912" endtime="20241124 14:29:27.912"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.912" endtime="20241124 14:29:27.912"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.912" endtime="20241124 14:29:27.912"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.911" endtime="20241124 14:29:27.912"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.911" endtime="20241124 14:29:27.912"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.899" endtime="20241124 14:29:27.913"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:27.921" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241124 14:29:27.921" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:27.913" endtime="20241124 14:29:27.921"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:27.921" endtime="20241124 14:29:27.921"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.913" endtime="20241124 14:29:27.921"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.922" endtime="20241124 14:29:27.922"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.922" endtime="20241124 14:29:27.922"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.921" endtime="20241124 14:29:27.922"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.913" endtime="20241124 14:29:27.922"/>
</try>
<msg timestamp="20241124 14:29:27.922" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241124 14:29:27.897" endtime="20241124 14:29:27.922"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.925" endtime="20241124 14:29:27.925"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.925" endtime="20241124 14:29:27.925"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.925" endtime="20241124 14:29:27.925"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.924" endtime="20241124 14:29:27.925"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.924" endtime="20241124 14:29:27.925"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.896" endtime="20241124 14:29:27.925"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.926" endtime="20241124 14:29:27.926"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.925" endtime="20241124 14:29:27.926"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.896" endtime="20241124 14:29:27.926"/>
</try>
<status status="PASS" starttime="20241124 14:29:27.896" endtime="20241124 14:29:27.926"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:27.937" level="INFO">Waited for Element with selector id=username at state visible</msg>
<status status="PASS" starttime="20241124 14:29:27.931" endtime="20241124 14:29:27.937"/>
</kw>
<msg timestamp="20241124 14:29:27.937" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.930" endtime="20241124 14:29:27.937"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.938" endtime="20241124 14:29:27.938"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.930" endtime="20241124 14:29:27.938"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.938" endtime="20241124 14:29:27.938"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.938" endtime="20241124 14:29:27.938"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.938" endtime="20241124 14:29:27.938"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.930" endtime="20241124 14:29:27.939"/>
</try>
<msg timestamp="20241124 14:29:27.939" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.930" endtime="20241124 14:29:27.939"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.939" endtime="20241124 14:29:27.939"/>
</return>
<msg timestamp="20241124 14:29:27.939" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.928" endtime="20241124 14:29:27.939"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.942" endtime="20241124 14:29:27.942"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.942" endtime="20241124 14:29:27.942"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.941" endtime="20241124 14:29:27.942"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.941" endtime="20241124 14:29:27.942"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.940" endtime="20241124 14:29:27.942"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.928" endtime="20241124 14:29:27.942"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.873" endtime="20241124 14:29:27.943"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:27.955" level="INFO">Waited for Element with selector id=username at state attached</msg>
<status status="PASS" starttime="20241124 14:29:27.948" endtime="20241124 14:29:27.955"/>
</kw>
<msg timestamp="20241124 14:29:27.955" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.948" endtime="20241124 14:29:27.955"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.955" endtime="20241124 14:29:27.955"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.948" endtime="20241124 14:29:27.955"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.956" endtime="20241124 14:29:27.956"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.956" endtime="20241124 14:29:27.956"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.956" endtime="20241124 14:29:27.956"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.948" endtime="20241124 14:29:27.956"/>
</try>
<msg timestamp="20241124 14:29:27.956" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.947" endtime="20241124 14:29:27.956"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.957" endtime="20241124 14:29:27.957"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.946" endtime="20241124 14:29:27.957"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:27.957" endtime="20241124 14:29:27.957"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:27.957" endtime="20241124 14:29:27.957"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.946" endtime="20241124 14:29:27.957"/>
</try>
<msg timestamp="20241124 14:29:27.957" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.946" endtime="20241124 14:29:27.957"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.960" endtime="20241124 14:29:27.960"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.960" endtime="20241124 14:29:27.960"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.959" endtime="20241124 14:29:27.960"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.959" endtime="20241124 14:29:27.960"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.958" endtime="20241124 14:29:27.960"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.946" endtime="20241124 14:29:27.960"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:27.970" level="INFO">Property: 'bharani@ideas2it.com'</msg>
<msg timestamp="20241124 14:29:27.970" level="INFO">${property} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:27.961" endtime="20241124 14:29:27.970"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:27.970" endtime="20241124 14:29:27.970"/>
</return>
<status status="PASS" starttime="20241124 14:29:27.961" endtime="20241124 14:29:27.970"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.971" endtime="20241124 14:29:27.971"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.971" endtime="20241124 14:29:27.971"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.970" endtime="20241124 14:29:27.971"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.961" endtime="20241124 14:29:27.971"/>
</try>
<msg timestamp="20241124 14:29:27.971" level="INFO">${fieldTextValue} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:27.944" endtime="20241124 14:29:27.971"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241124 14:29:27.971" endtime="20241124 14:29:27.971"/>
</return>
<msg timestamp="20241124 14:29:27.972" level="INFO">${populated_value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:27.872" endtime="20241124 14:29:27.972"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241124 14:29:27.978" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.974" endtime="20241124 14:29:27.978"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:27.978" endtime="20241124 14:29:27.978"/>
</return>
<msg timestamp="20241124 14:29:27.978" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241124 14:29:27.973" endtime="20241124 14:29:27.978"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.982" endtime="20241124 14:29:27.982"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.982" endtime="20241124 14:29:27.982"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.982" endtime="20241124 14:29:27.982"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.982" endtime="20241124 14:29:27.982"/>
</if>
<status status="PASS" starttime="20241124 14:29:27.981" endtime="20241124 14:29:27.983"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.872" endtime="20241124 14:29:27.983"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.845" endtime="20241124 14:29:27.983"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.845" endtime="20241124 14:29:27.983"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.845" endtime="20241124 14:29:27.983"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.983" endtime="20241124 14:29:27.983"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.983" endtime="20241124 14:29:27.984"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.845" endtime="20241124 14:29:27.984"/>
</try>
<status status="PASS" starttime="20241124 14:29:27.744" endtime="20241124 14:29:27.984"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.743" endtime="20241124 14:29:27.984"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.985" endtime="20241124 14:29:27.985"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.984" endtime="20241124 14:29:27.985"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.986" endtime="20241124 14:29:27.986"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.986" endtime="20241124 14:29:27.986"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.986" endtime="20241124 14:29:27.986"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.987" endtime="20241124 14:29:27.987"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.986" endtime="20241124 14:29:27.987"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.986" endtime="20241124 14:29:27.987"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.985" endtime="20241124 14:29:27.987"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:27.992" endtime="20241124 14:29:27.992"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.995" endtime="20241124 14:29:27.995"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.987" endtime="20241124 14:29:27.995"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.996" endtime="20241124 14:29:27.996"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.996" endtime="20241124 14:29:27.997"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.996" endtime="20241124 14:29:27.997"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:27.997" endtime="20241124 14:29:27.997"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.997" endtime="20241124 14:29:27.997"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:27.996" endtime="20241124 14:29:27.997"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:27.995" endtime="20241124 14:29:27.997"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:28.004" endtime="20241124 14:29:28.004"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:28.007" endtime="20241124 14:29:28.007"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:27.997" endtime="20241124 14:29:28.007"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:28.008" endtime="20241124 14:29:28.008"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:28.009" endtime="20241124 14:29:28.009"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:28.008" endtime="20241124 14:29:28.009"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:28.009" endtime="20241124 14:29:28.009"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:28.009" endtime="20241124 14:29:28.009"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:28.008" endtime="20241124 14:29:28.009"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:28.007" endtime="20241124 14:29:28.009"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:28.011" endtime="20241124 14:29:28.011"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:28.009" endtime="20241124 14:29:28.012"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:28.018" endtime="20241124 14:29:28.018"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:28.018" endtime="20241124 14:29:28.018"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:28.012" endtime="20241124 14:29:28.018"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.729" endtime="20241124 14:29:28.018"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:28.018" endtime="20241124 14:29:28.019"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:29.034" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241124 14:29:28.019" endtime="20241124 14:29:29.034"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:29.034" endtime="20241124 14:29:29.034"/>
</return>
<msg timestamp="20241124 14:29:29.034" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:27.729" endtime="20241124 14:29:29.035"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.037" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:29.036" endtime="20241124 14:29:29.037"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.038" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:29.037" endtime="20241124 14:29:29.038"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.038" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:29.038" endtime="20241124 14:29:29.038"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.039" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:29.039" endtime="20241124 14:29:29.039"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.039" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:29.039" endtime="20241124 14:29:29.040"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.040" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:29.040" endtime="20241124 14:29:29.040"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.041" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:29.040" endtime="20241124 14:29:29.041"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.041" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:29.041" endtime="20241124 14:29:29.041"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:29.041" endtime="20241124 14:29:29.042"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:29.046" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:29.045" endtime="20241124 14:29:29.046"/>
</kw>
<msg timestamp="20241124 14:29:29.046" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:29.044" endtime="20241124 14:29:29.046"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.047" endtime="20241124 14:29:29.047"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.047" endtime="20241124 14:29:29.047"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.047" endtime="20241124 14:29:29.047"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.047" endtime="20241124 14:29:29.047"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.047" endtime="20241124 14:29:29.047"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.047" endtime="20241124 14:29:29.048"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.046" endtime="20241124 14:29:29.048"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.046" endtime="20241124 14:29:29.048"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:29.048" endtime="20241124 14:29:29.048"/>
</return>
<msg timestamp="20241124 14:29:29.048" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:29.044" endtime="20241124 14:29:29.048"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:29.050" endtime="20241124 14:29:29.050"/>
</kw>
<msg timestamp="20241124 14:29:29.050" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.050" endtime="20241124 14:29:29.050"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.051" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:29.051" endtime="20241124 14:29:29.051"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.052" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.051" endtime="20241124 14:29:29.052"/>
</kw>
<status status="PASS" starttime="20241124 14:29:29.051" endtime="20241124 14:29:29.052"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.052" endtime="20241124 14:29:29.052"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.052" endtime="20241124 14:29:29.052"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.051" endtime="20241124 14:29:29.052"/>
</if>
<status status="PASS" starttime="20241124 14:29:29.050" endtime="20241124 14:29:29.052"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.050" endtime="20241124 14:29:29.052"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:29.052" endtime="20241124 14:29:29.052"/>
</return>
<msg timestamp="20241124 14:29:29.052" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.049" endtime="20241124 14:29:29.052"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:29.052" endtime="20241124 14:29:29.052"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.052" endtime="20241124 14:29:29.053"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.052" endtime="20241124 14:29:29.053"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.053" endtime="20241124 14:29:29.053"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:29.053" endtime="20241124 14:29:29.053"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.053" endtime="20241124 14:29:29.053"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.054" endtime="20241124 14:29:29.054"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:29.054" endtime="20241124 14:29:29.054"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.053" endtime="20241124 14:29:29.054"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.053" endtime="20241124 14:29:29.054"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.053" endtime="20241124 14:29:29.054"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.053" endtime="20241124 14:29:29.054"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.054" endtime="20241124 14:29:29.055"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:29.055" endtime="20241124 14:29:29.055"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.054" endtime="20241124 14:29:29.055"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.055" endtime="20241124 14:29:29.055"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:29.055" endtime="20241124 14:29:29.055"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.055" endtime="20241124 14:29:29.055"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.054" endtime="20241124 14:29:29.055"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.054" endtime="20241124 14:29:29.056"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.054" endtime="20241124 14:29:29.056"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.052" endtime="20241124 14:29:29.056"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.052" endtime="20241124 14:29:29.056"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:29.056" endtime="20241124 14:29:29.056"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.056" endtime="20241124 14:29:29.056"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.056" endtime="20241124 14:29:29.057"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.057" endtime="20241124 14:29:29.057"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.057" endtime="20241124 14:29:29.057"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.057" endtime="20241124 14:29:29.057"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.057" endtime="20241124 14:29:29.057"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.058" endtime="20241124 14:29:29.058"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:29.058" endtime="20241124 14:29:29.058"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.058" endtime="20241124 14:29:29.058"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.058" endtime="20241124 14:29:29.058"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:29.058" endtime="20241124 14:29:29.058"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.058" endtime="20241124 14:29:29.059"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.058" endtime="20241124 14:29:29.059"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.057" endtime="20241124 14:29:29.059"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.057" endtime="20241124 14:29:29.059"/>
</if>
<status status="PASS" starttime="20241124 14:29:29.056" endtime="20241124 14:29:29.059"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.056" endtime="20241124 14:29:29.059"/>
</if>
<status status="PASS" starttime="20241124 14:29:29.037" endtime="20241124 14:29:29.059"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.060" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:29.059" endtime="20241124 14:29:29.060"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.060" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:29.060" endtime="20241124 14:29:29.060"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.061" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:29.061" endtime="20241124 14:29:29.061"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.061" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:29.061" endtime="20241124 14:29:29.061"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.062" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.062" endtime="20241124 14:29:29.062"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.062" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:29.062" endtime="20241124 14:29:29.063"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.063" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:29.063" endtime="20241124 14:29:29.063"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:29.063" endtime="20241124 14:29:29.064"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:29.071" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:29:29.070" endtime="20241124 14:29:29.071"/>
</kw>
<msg timestamp="20241124 14:29:29.072" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:29.069" endtime="20241124 14:29:29.072"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.073" endtime="20241124 14:29:29.075"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.077" endtime="20241124 14:29:29.078"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.076" endtime="20241124 14:29:29.078"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.079" endtime="20241124 14:29:29.079"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.078" endtime="20241124 14:29:29.079"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.076" endtime="20241124 14:29:29.079"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.072" endtime="20241124 14:29:29.080"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.072" endtime="20241124 14:29:29.080"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:29.080" endtime="20241124 14:29:29.080"/>
</return>
<msg timestamp="20241124 14:29:29.081" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:29.067" endtime="20241124 14:29:29.081"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:29.089" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:29.087" endtime="20241124 14:29:29.089"/>
</kw>
<msg timestamp="20241124 14:29:29.090" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:29.086" endtime="20241124 14:29:29.090"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.094" endtime="20241124 14:29:29.094"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.095" endtime="20241124 14:29:29.095"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.095" endtime="20241124 14:29:29.096"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.096" endtime="20241124 14:29:29.096"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.096" endtime="20241124 14:29:29.096"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.094" endtime="20241124 14:29:29.096"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.091" endtime="20241124 14:29:29.096"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.090" endtime="20241124 14:29:29.096"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:29.096" endtime="20241124 14:29:29.113"/>
</return>
<msg timestamp="20241124 14:29:29.117" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:29.084" endtime="20241124 14:29:29.118"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.119"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.135"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.135"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.135"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.135"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.135"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.135"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.119" endtime="20241124 14:29:29.135"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</if>
<status status="PASS" starttime="20241124 14:29:29.059" endtime="20241124 14:29:29.135"/>
</iter>
<status status="PASS" starttime="20241124 14:29:29.037" endtime="20241124 14:29:29.135"/>
</for>
<msg timestamp="20241124 14:29:29.135" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:29:29.035" endtime="20241124 14:29:29.135"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.135"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:29.152" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '306', 'status': 'COMPLETED', 'actionName': 'Set login username', 'actionType': 'TYPE_TEXT', 'actionXpath': 'id=username', 'inputValue': 'bharani@ideas2it.com', 'errorM...</msg>
<status status="PASS" starttime="20241124 14:29:29.152" endtime="20241124 14:29:29.152"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:29.152" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "306", "status": "COMPLETED", "actionName": "Set login username", "actionType": "TYPE_TEXT", "actionXpath": "id=username", "inputValue": "bharani@ideas2it.com", "errorM...</msg>
<status status="PASS" starttime="20241124 14:29:29.152" endtime="20241124 14:29:29.152"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:29.152" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:29.152" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:29.152" endtime="20241124 14:29:29.152"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:29.152" endtime="20241124 14:29:29.152"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:29.152" endtime="20241124 14:29:29.152"/>
</return>
<status status="PASS" starttime="20241124 14:29:29.152" endtime="20241124 14:29:29.152"/>
</kw>
<status status="PASS" starttime="20241124 14:29:29.135" endtime="20241124 14:29:29.152"/>
</kw>
<status status="PASS" starttime="20241124 14:29:27.725" endtime="20241124 14:29:29.152"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.168" endtime="20241124 14:29:29.169"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.169"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.169"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.152" endtime="20241124 14:29:29.169"/>
</branch>
<status status="PASS" starttime="20241124 14:29:27.725" endtime="20241124 14:29:29.169"/>
</try>
<status status="PASS" starttime="20241124 14:29:27.725" endtime="20241124 14:29:29.169"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '44', 'actionId': '31', 'flowId': '14', 'order': 3, 'createdAt': '2024-11-21T16:43:09.646Z', 'updatedAt': '2024-11-22T04:20:41.481Z', 'action': {'id': '31', 'name': 'Click login button', 'type'...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.169" level="INFO">${action} = {'id': '31', 'name': 'Click login button', 'type': 'CLICK', 'xpath': '//button[@type="submit" and text()="Login"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T16:41:25.179Z', 'updated...</msg>
<status status="PASS" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.169"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.169"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:29.169" level="INFO">${input} = {'id': '28', 'actionId': '31', 'name': 'Input 01', 'value': '', 'waitAfterAction': '5', 'isDefault': True, 'createdAt': '2024-11-21T16:41:25.706Z', 'updatedAt': '2024-11-21T17:38:31.563Z'}</msg>
<status status="PASS" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.169"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.169"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.169"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.169"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.169"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:29.169" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.169"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.184"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.185"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:29.185" endtime="20241124 14:29:29.185"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.185" endtime="20241124 14:29:29.185"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:29.202" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:29.202" endtime="20241124 14:29:29.202"/>
</kw>
<msg timestamp="20241124 14:29:29.202" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.202" endtime="20241124 14:29:29.202"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:29.202" endtime="20241124 14:29:29.202"/>
</return>
<status status="PASS" starttime="20241124 14:29:29.202" endtime="20241124 14:29:29.202"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.202" endtime="20241124 14:29:29.202"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.202" endtime="20241124 14:29:29.202"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.202" endtime="20241124 14:29:29.202"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.201" endtime="20241124 14:29:29.202"/>
</try>
<msg timestamp="20241124 14:29:29.202" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.185" endtime="20241124 14:29:29.202"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:29.202" endtime="20241124 14:29:29.202"/>
</return>
<status status="PASS" starttime="20241124 14:29:29.185" endtime="20241124 14:29:29.202"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:29.202" endtime="20241124 14:29:29.202"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:29.202" endtime="20241124 14:29:29.202"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.185" endtime="20241124 14:29:29.202"/>
</try>
<msg timestamp="20241124 14:29:29.218" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.185" endtime="20241124 14:29:29.218"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.219" endtime="20241124 14:29:29.219"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.219" endtime="20241124 14:29:29.219"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.219" endtime="20241124 14:29:29.219"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.219" endtime="20241124 14:29:29.219"/>
</if>
<status status="PASS" starttime="20241124 14:29:29.219" endtime="20241124 14:29:29.219"/>
</kw>
<status status="PASS" starttime="20241124 14:29:29.185" endtime="20241124 14:29:29.219"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:29.235" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state visible</msg>
<status status="PASS" starttime="20241124 14:29:29.235" endtime="20241124 14:29:29.235"/>
</kw>
<msg timestamp="20241124 14:29:29.235" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.219" endtime="20241124 14:29:29.235"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:29.235" endtime="20241124 14:29:29.235"/>
</return>
<status status="PASS" starttime="20241124 14:29:29.219" endtime="20241124 14:29:29.235"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.235" endtime="20241124 14:29:29.235"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.235" endtime="20241124 14:29:29.235"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.235" endtime="20241124 14:29:29.235"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.219" endtime="20241124 14:29:29.235"/>
</try>
<msg timestamp="20241124 14:29:29.235" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.219" endtime="20241124 14:29:29.235"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:29.235" endtime="20241124 14:29:29.235"/>
</return>
<msg timestamp="20241124 14:29:29.235" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.219" endtime="20241124 14:29:29.235"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.252" endtime="20241124 14:29:29.252"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.252" endtime="20241124 14:29:29.252"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.252" endtime="20241124 14:29:29.252"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.252" endtime="20241124 14:29:29.252"/>
</if>
<status status="PASS" starttime="20241124 14:29:29.235" endtime="20241124 14:29:29.252"/>
</kw>
<status status="PASS" starttime="20241124 14:29:29.219" endtime="20241124 14:29:29.252"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:29.294" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state enabled</msg>
<status status="PASS" starttime="20241124 14:29:29.268" endtime="20241124 14:29:29.294"/>
</kw>
<msg timestamp="20241124 14:29:29.294" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.252" endtime="20241124 14:29:29.294"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:29.294" endtime="20241124 14:29:29.294"/>
</return>
<status status="PASS" starttime="20241124 14:29:29.252" endtime="20241124 14:29:29.294"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.294" endtime="20241124 14:29:29.294"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.294" endtime="20241124 14:29:29.294"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.294" endtime="20241124 14:29:29.294"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.252" endtime="20241124 14:29:29.294"/>
</try>
<msg timestamp="20241124 14:29:29.294" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.252" endtime="20241124 14:29:29.294"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:29.294" endtime="20241124 14:29:29.294"/>
</return>
<msg timestamp="20241124 14:29:29.294" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241124 14:29:29.252" endtime="20241124 14:29:29.294"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.302"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.302"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.302"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.294" endtime="20241124 14:29:29.302"/>
</if>
<status status="PASS" starttime="20241124 14:29:29.294" endtime="20241124 14:29:29.302"/>
</kw>
<status status="PASS" starttime="20241124 14:29:29.252" endtime="20241124 14:29:29.302"/>
</kw>
<status status="PASS" starttime="20241124 14:29:29.185" endtime="20241124 14:29:29.302"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:29.302" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.302"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.302"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.302"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.302"/>
</kw>
<status status="PASS" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.302"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.302"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.363"/>
</kw>
<status status="PASS" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.363"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.363" endtime="20241124 14:29:29.363"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.363" endtime="20241124 14:29:29.363"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.363" endtime="20241124 14:29:29.363"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.363"/>
</try>
<status status="PASS" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.363"/>
</kw>
<status status="PASS" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.363"/>
</kw>
<status status="PASS" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.363"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.368" endtime="20241124 14:29:29.369"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.368" endtime="20241124 14:29:29.369"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.302" endtime="20241124 14:29:29.369"/>
</try>
<status status="PASS" starttime="20241124 14:29:29.185" endtime="20241124 14:29:29.369"/>
</kw>
<status status="PASS" starttime="20241124 14:29:29.185" endtime="20241124 14:29:29.369"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.374" endtime="20241124 14:29:29.374"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.379" endtime="20241124 14:29:29.379"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.370" endtime="20241124 14:29:29.379"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.381" endtime="20241124 14:29:29.381"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.379" endtime="20241124 14:29:29.381"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.384" endtime="20241124 14:29:29.385"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.381" endtime="20241124 14:29:29.385"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.386" endtime="20241124 14:29:29.386"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.385" endtime="20241124 14:29:29.386"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.386" endtime="20241124 14:29:29.386"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.386" endtime="20241124 14:29:29.386"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.386" endtime="20241124 14:29:29.386"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.386" endtime="20241124 14:29:29.386"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.386" endtime="20241124 14:29:29.386"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.386" endtime="20241124 14:29:29.386"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.386" endtime="20241124 14:29:29.386"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.386" endtime="20241124 14:29:29.386"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.386" endtime="20241124 14:29:29.386"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:29.386" endtime="20241124 14:29:29.386"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.403" endtime="20241124 14:29:29.403"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.386" endtime="20241124 14:29:29.404"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.405" endtime="20241124 14:29:29.405"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.406" endtime="20241124 14:29:29.406"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.405" endtime="20241124 14:29:29.406"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.406" endtime="20241124 14:29:29.406"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.406" endtime="20241124 14:29:29.406"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.405" endtime="20241124 14:29:29.406"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.404" endtime="20241124 14:29:29.406"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:29.413" endtime="20241124 14:29:29.413"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.417" endtime="20241124 14:29:29.417"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.406" endtime="20241124 14:29:29.417"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.419" endtime="20241124 14:29:29.420"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.420" endtime="20241124 14:29:29.421"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.420" endtime="20241124 14:29:29.421"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.421" endtime="20241124 14:29:29.421"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.421" endtime="20241124 14:29:29.421"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:29.420" endtime="20241124 14:29:29.422"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:29.417" endtime="20241124 14:29:29.422"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.426" endtime="20241124 14:29:29.426"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.422" endtime="20241124 14:29:29.426"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:29.435" endtime="20241124 14:29:29.435"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:29.435" endtime="20241124 14:29:29.435"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:29.427" endtime="20241124 14:29:29.435"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.169" endtime="20241124 14:29:29.435"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:29.435" endtime="20241124 14:29:29.435"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:34.447" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20241124 14:29:29.435" endtime="20241124 14:29:34.447"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:34.447" endtime="20241124 14:29:34.448"/>
</return>
<msg timestamp="20241124 14:29:34.448" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:29.169" endtime="20241124 14:29:34.448"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.451" level="INFO">${key} = testCaseFlowSequenceId:46::flowActionSequenceId:44</msg>
<status status="PASS" starttime="20241124 14:29:34.450" endtime="20241124 14:29:34.451"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.453" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:34.452" endtime="20241124 14:29:34.453"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.454" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:34.453" endtime="20241124 14:29:34.454"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.455" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.454" endtime="20241124 14:29:34.455"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.456" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:34.456" endtime="20241124 14:29:34.456"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.457" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.457" endtime="20241124 14:29:34.457"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.458" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:34.458" endtime="20241124 14:29:34.458"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.459" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:34.459" endtime="20241124 14:29:34.460"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:34.460" endtime="20241124 14:29:34.461"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:34.468" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:34.466" endtime="20241124 14:29:34.468"/>
</kw>
<msg timestamp="20241124 14:29:34.469" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.466" endtime="20241124 14:29:34.469"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.470" endtime="20241124 14:29:34.470"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.471" endtime="20241124 14:29:34.471"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.470" endtime="20241124 14:29:34.471"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.472" endtime="20241124 14:29:34.472"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.471" endtime="20241124 14:29:34.473"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.470" endtime="20241124 14:29:34.473"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.469" endtime="20241124 14:29:34.473"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.469" endtime="20241124 14:29:34.473"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:34.473" endtime="20241124 14:29:34.473"/>
</return>
<msg timestamp="20241124 14:29:34.474" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.465" endtime="20241124 14:29:34.474"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:34.479" endtime="20241124 14:29:34.480"/>
</kw>
<msg timestamp="20241124 14:29:34.480" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.478" endtime="20241124 14:29:34.480"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.481" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:34.481" endtime="20241124 14:29:34.481"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.482" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.481" endtime="20241124 14:29:34.482"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.481" endtime="20241124 14:29:34.482"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.482" endtime="20241124 14:29:34.482"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.482" endtime="20241124 14:29:34.482"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.481" endtime="20241124 14:29:34.482"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.480" endtime="20241124 14:29:34.482"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.480" endtime="20241124 14:29:34.482"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:34.482" endtime="20241124 14:29:34.482"/>
</return>
<msg timestamp="20241124 14:29:34.483" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.477" endtime="20241124 14:29:34.483"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:34.483" endtime="20241124 14:29:34.483"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.483" endtime="20241124 14:29:34.483"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.483" endtime="20241124 14:29:34.483"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.484" endtime="20241124 14:29:34.484"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:34.484" endtime="20241124 14:29:34.484"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.483" endtime="20241124 14:29:34.484"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.484" endtime="20241124 14:29:34.484"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:34.484" endtime="20241124 14:29:34.484"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.484" endtime="20241124 14:29:34.484"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.483" endtime="20241124 14:29:34.484"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.483" endtime="20241124 14:29:34.484"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.483" endtime="20241124 14:29:34.484"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.485" endtime="20241124 14:29:34.485"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.485" endtime="20241124 14:29:34.485"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.485" endtime="20241124 14:29:34.485"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.485" endtime="20241124 14:29:34.485"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.485" endtime="20241124 14:29:34.485"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.485" endtime="20241124 14:29:34.485"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.484" endtime="20241124 14:29:34.485"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.484" endtime="20241124 14:29:34.485"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.484" endtime="20241124 14:29:34.485"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.483" endtime="20241124 14:29:34.486"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.483" endtime="20241124 14:29:34.486"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:34.486" endtime="20241124 14:29:34.486"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.486" endtime="20241124 14:29:34.486"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.486" endtime="20241124 14:29:34.486"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.486" endtime="20241124 14:29:34.486"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.486" endtime="20241124 14:29:34.487"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.486" endtime="20241124 14:29:34.487"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.487" endtime="20241124 14:29:34.487"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.487" endtime="20241124 14:29:34.487"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.487" endtime="20241124 14:29:34.487"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.487" endtime="20241124 14:29:34.487"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.487" endtime="20241124 14:29:34.488"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.488" endtime="20241124 14:29:34.488"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.487" endtime="20241124 14:29:34.488"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.487" endtime="20241124 14:29:34.488"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.487" endtime="20241124 14:29:34.488"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.487" endtime="20241124 14:29:34.488"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.486" endtime="20241124 14:29:34.488"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.486" endtime="20241124 14:29:34.488"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.452" endtime="20241124 14:29:34.488"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.488" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:34.488" endtime="20241124 14:29:34.488"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.489" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:34.489" endtime="20241124 14:29:34.489"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.489" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.489" endtime="20241124 14:29:34.489"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.489" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:34.489" endtime="20241124 14:29:34.489"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.490" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.490" endtime="20241124 14:29:34.490"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.490" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:34.490" endtime="20241124 14:29:34.490"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.490" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:34.490" endtime="20241124 14:29:34.490"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:34.491" endtime="20241124 14:29:34.491"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:34.493" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:29:34.492" endtime="20241124 14:29:34.493"/>
</kw>
<msg timestamp="20241124 14:29:34.493" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.492" endtime="20241124 14:29:34.493"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.493" endtime="20241124 14:29:34.493"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.494" endtime="20241124 14:29:34.494"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.494" endtime="20241124 14:29:34.494"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.494" endtime="20241124 14:29:34.494"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.494" endtime="20241124 14:29:34.494"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.493" endtime="20241124 14:29:34.494"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.493" endtime="20241124 14:29:34.494"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.493" endtime="20241124 14:29:34.494"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:34.494" endtime="20241124 14:29:34.494"/>
</return>
<msg timestamp="20241124 14:29:34.495" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.492" endtime="20241124 14:29:34.495"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:34.497" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:34.497" endtime="20241124 14:29:34.497"/>
</kw>
<msg timestamp="20241124 14:29:34.497" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.497" endtime="20241124 14:29:34.497"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.498" endtime="20241124 14:29:34.498"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.498" endtime="20241124 14:29:34.498"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.498" endtime="20241124 14:29:34.498"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.498" endtime="20241124 14:29:34.498"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.498" endtime="20241124 14:29:34.498"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.498" endtime="20241124 14:29:34.499"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.498" endtime="20241124 14:29:34.499"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.497" endtime="20241124 14:29:34.499"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:34.499" endtime="20241124 14:29:34.499"/>
</return>
<msg timestamp="20241124 14:29:34.499" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.496" endtime="20241124 14:29:34.499"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:34.499" endtime="20241124 14:29:34.500"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.499" endtime="20241124 14:29:34.500"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.499" endtime="20241124 14:29:34.500"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.500" endtime="20241124 14:29:34.500"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:34.500" endtime="20241124 14:29:34.500"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.500" endtime="20241124 14:29:34.500"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.500" endtime="20241124 14:29:34.500"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:34.501" endtime="20241124 14:29:34.501"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.500" endtime="20241124 14:29:34.501"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.500" endtime="20241124 14:29:34.501"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.500" endtime="20241124 14:29:34.501"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.500" endtime="20241124 14:29:34.501"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.501" endtime="20241124 14:29:34.501"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.501" endtime="20241124 14:29:34.501"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.501" endtime="20241124 14:29:34.502"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.502" endtime="20241124 14:29:34.502"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.502" endtime="20241124 14:29:34.502"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.502" endtime="20241124 14:29:34.502"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.501" endtime="20241124 14:29:34.502"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.501" endtime="20241124 14:29:34.502"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.501" endtime="20241124 14:29:34.502"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.499" endtime="20241124 14:29:34.502"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.499" endtime="20241124 14:29:34.502"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:34.503" endtime="20241124 14:29:34.503"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.503" endtime="20241124 14:29:34.503"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.503" endtime="20241124 14:29:34.503"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.503" endtime="20241124 14:29:34.503"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.503" endtime="20241124 14:29:34.503"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.503" endtime="20241124 14:29:34.503"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.504" endtime="20241124 14:29:34.504"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.504" endtime="20241124 14:29:34.504"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.504" endtime="20241124 14:29:34.504"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.504" endtime="20241124 14:29:34.504"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.504" endtime="20241124 14:29:34.505"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.505" endtime="20241124 14:29:34.505"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.504" endtime="20241124 14:29:34.505"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.504" endtime="20241124 14:29:34.505"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.503" endtime="20241124 14:29:34.505"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.503" endtime="20241124 14:29:34.505"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.503" endtime="20241124 14:29:34.505"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.502" endtime="20241124 14:29:34.505"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.488" endtime="20241124 14:29:34.505"/>
</iter>
<status status="PASS" starttime="20241124 14:29:34.451" endtime="20241124 14:29:34.505"/>
</for>
<msg timestamp="20241124 14:29:34.505" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:29:34.448" endtime="20241124 14:29:34.505"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:34.505" endtime="20241124 14:29:34.507"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:34.509" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '307', 'status': 'COMPLETED', 'actionName': 'Click login button', 'actionType': 'CLICK', 'actionXpath': '//button[@type="submit" and text()="Login"]', 'inputValue': '',...</msg>
<status status="PASS" starttime="20241124 14:29:34.508" endtime="20241124 14:29:34.509"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:34.509" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "307", "status": "COMPLETED", "actionName": "Click login button", "actionType": "CLICK", "actionXpath": "//button[@type=\"submit\" and text()=\"Login\"]", "inputValue":...</msg>
<status status="PASS" starttime="20241124 14:29:34.509" endtime="20241124 14:29:34.509"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:34.548" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:34.549" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:34.510" endtime="20241124 14:29:34.549"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:34.549" endtime="20241124 14:29:34.550"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:34.550" endtime="20241124 14:29:34.550"/>
</return>
<status status="PASS" starttime="20241124 14:29:34.509" endtime="20241124 14:29:34.551"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.507" endtime="20241124 14:29:34.551"/>
</kw>
<status status="PASS" starttime="20241124 14:29:29.169" endtime="20241124 14:29:34.551"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.551" endtime="20241124 14:29:34.551"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:34.552" endtime="20241124 14:29:34.552"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.552" endtime="20241124 14:29:34.552"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.551" endtime="20241124 14:29:34.552"/>
</branch>
<status status="PASS" starttime="20241124 14:29:29.169" endtime="20241124 14:29:34.552"/>
</try>
<status status="PASS" starttime="20241124 14:29:29.169" endtime="20241124 14:29:34.552"/>
</iter>
<status status="PASS" starttime="20241124 14:29:19.438" endtime="20241124 14:29:34.552"/>
</for>
<status status="PASS" starttime="20241124 14:29:19.438" endtime="20241124 14:29:34.552"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.438" endtime="20241124 14:29:34.553"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:34.554" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '81', 'status': 'COMPLETED', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241124 14:29:34.554" endtime="20241124 14:29:34.554"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:34.556" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "81", "status": "COMPLETED", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241124 14:29:34.555" endtime="20241124 14:29:34.556"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:34.599" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:34.599" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:34.556" endtime="20241124 14:29:34.599"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:34.600" endtime="20241124 14:29:34.600"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:34.600" endtime="20241124 14:29:34.600"/>
</return>
<status status="PASS" starttime="20241124 14:29:34.555" endtime="20241124 14:29:34.601"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.553" endtime="20241124 14:29:34.601"/>
</kw>
<status status="PASS" starttime="20241124 14:29:19.421" endtime="20241124 14:29:34.601"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.601" endtime="20241124 14:29:34.602"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:34.602" endtime="20241124 14:29:34.602"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.602" endtime="20241124 14:29:34.602"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.601" endtime="20241124 14:29:34.602"/>
</branch>
<status status="PASS" starttime="20241124 14:29:19.421" endtime="20241124 14:29:34.602"/>
</try>
<status status="PASS" starttime="20241124 14:29:19.421" endtime="20241124 14:29:34.602"/>
</iter>
<iter>
<var name="${testCaseFlowSequence}">{'id': '47', 'testCaseId': '27', 'flowId': '15', 'order': 1, 'createdAt': '2024-11-21T17:34:46.435Z', 'updatedAt': '2024-11-24T06:57:13.421Z', 'flow': {'id': '15', 'name': 'Navigate to profile', 'proj...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.603" level="INFO">${flow} = {'id': '15', 'name': 'Navigate to profile', 'projectId': '4', 'createdAt': '2024-11-21T17:34:26.845Z', 'updatedAt': '2024-11-24T06:43:12.878Z', 'flowActionSequences': [{'id': '45', 'actionId': '32', '...</msg>
<status status="PASS" starttime="20241124 14:29:34.603" endtime="20241124 14:29:34.603"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:34.604" endtime="20241124 14:29:34.604"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:34.608" endtime="20241124 14:29:34.608"/>
</kw>
<msg timestamp="20241124 14:29:34.608" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.608" endtime="20241124 14:29:34.608"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.609" level="INFO">${values} = [{'id': '45', 'actionId': '32', 'flowId': '15', 'order': 0, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.562Z', 'action': {'id': '32', 'name': 'Click Profile image icon',...</msg>
<status status="PASS" starttime="20241124 14:29:34.609" endtime="20241124 14:29:34.609"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.610" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.610" endtime="20241124 14:29:34.610"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.609" endtime="20241124 14:29:34.610"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.611" endtime="20241124 14:29:34.611"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.610" endtime="20241124 14:29:34.611"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.609" endtime="20241124 14:29:34.611"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.609" endtime="20241124 14:29:34.611"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.608" endtime="20241124 14:29:34.611"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:34.611" endtime="20241124 14:29:34.611"/>
</return>
<msg timestamp="20241124 14:29:34.611" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.607" endtime="20241124 14:29:34.611"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '45', 'actionId': '32', 'flowId': '15', 'order': 0, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.562Z', 'action': {'id': '32', 'name': 'Click Profile image icon', ...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.614" level="INFO">${action} = {'id': '32', 'name': 'Click Profile image icon', 'type': 'CLICK', 'xpath': 'id=headerProfileImage', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T17:30:46.836Z', 'updatedAt': '2024-11-21...</msg>
<status status="PASS" starttime="20241124 14:29:34.612" endtime="20241124 14:29:34.615"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:34.615" endtime="20241124 14:29:34.615"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:34.616" level="INFO">${input} = {'id': '29', 'actionId': '32', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-21T17:30:47.048Z', 'updatedAt': '2024-11-21T17:30:47.048Z'}</msg>
<status status="PASS" starttime="20241124 14:29:34.616" endtime="20241124 14:29:34.616"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.617" endtime="20241124 14:29:34.617"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.617" endtime="20241124 14:29:34.617"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.616" endtime="20241124 14:29:34.617"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.616" endtime="20241124 14:29:34.617"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.618" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:34.618" endtime="20241124 14:29:34.618"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:34.619" endtime="20241124 14:29:34.619"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.618" endtime="20241124 14:29:34.619"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:34.619" endtime="20241124 14:29:34.619"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.619" endtime="20241124 14:29:34.619"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:34.635" level="INFO">Waited for Element with selector id=headerProfileImage at state attached</msg>
<status status="PASS" starttime="20241124 14:29:34.626" endtime="20241124 14:29:34.635"/>
</kw>
<msg timestamp="20241124 14:29:34.635" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.626" endtime="20241124 14:29:34.635"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:34.635" endtime="20241124 14:29:34.635"/>
</return>
<status status="PASS" starttime="20241124 14:29:34.626" endtime="20241124 14:29:34.635"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.636" endtime="20241124 14:29:34.636"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.636" endtime="20241124 14:29:34.636"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.635" endtime="20241124 14:29:34.636"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.625" endtime="20241124 14:29:34.636"/>
</try>
<msg timestamp="20241124 14:29:34.636" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.625" endtime="20241124 14:29:34.636"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:34.636" endtime="20241124 14:29:34.636"/>
</return>
<status status="PASS" starttime="20241124 14:29:34.624" endtime="20241124 14:29:34.637"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:34.637" endtime="20241124 14:29:34.637"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.637" endtime="20241124 14:29:34.637"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.624" endtime="20241124 14:29:34.637"/>
</try>
<msg timestamp="20241124 14:29:34.637" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.624" endtime="20241124 14:29:34.637"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.639" endtime="20241124 14:29:34.639"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.639" endtime="20241124 14:29:34.639"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.639" endtime="20241124 14:29:34.639"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.639" endtime="20241124 14:29:34.639"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.638" endtime="20241124 14:29:34.639"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.624" endtime="20241124 14:29:34.640"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:34.650" level="INFO">Waited for Element with selector id=headerProfileImage at state visible</msg>
<status status="PASS" starttime="20241124 14:29:34.643" endtime="20241124 14:29:34.650"/>
</kw>
<msg timestamp="20241124 14:29:34.650" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.643" endtime="20241124 14:29:34.650"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:34.650" endtime="20241124 14:29:34.650"/>
</return>
<status status="PASS" starttime="20241124 14:29:34.643" endtime="20241124 14:29:34.650"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.651" endtime="20241124 14:29:34.651"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.651" endtime="20241124 14:29:34.651"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.650" endtime="20241124 14:29:34.651"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.643" endtime="20241124 14:29:34.651"/>
</try>
<msg timestamp="20241124 14:29:34.651" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.642" endtime="20241124 14:29:34.651"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:34.651" endtime="20241124 14:29:34.651"/>
</return>
<msg timestamp="20241124 14:29:34.652" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.641" endtime="20241124 14:29:34.652"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.653" endtime="20241124 14:29:34.654"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.654" endtime="20241124 14:29:34.654"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.653" endtime="20241124 14:29:34.654"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.653" endtime="20241124 14:29:34.654"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.652" endtime="20241124 14:29:34.654"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.641" endtime="20241124 14:29:34.654"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:34.671" level="INFO">Waited for Element with selector id=headerProfileImage at state enabled</msg>
<status status="PASS" starttime="20241124 14:29:34.658" endtime="20241124 14:29:34.671"/>
</kw>
<msg timestamp="20241124 14:29:34.672" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.657" endtime="20241124 14:29:34.672"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:34.672" endtime="20241124 14:29:34.672"/>
</return>
<status status="PASS" starttime="20241124 14:29:34.657" endtime="20241124 14:29:34.672"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.672" endtime="20241124 14:29:34.672"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.672" endtime="20241124 14:29:34.672"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.672" endtime="20241124 14:29:34.672"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.657" endtime="20241124 14:29:34.672"/>
</try>
<msg timestamp="20241124 14:29:34.673" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.657" endtime="20241124 14:29:34.673"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:34.673" endtime="20241124 14:29:34.673"/>
</return>
<msg timestamp="20241124 14:29:34.673" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.656" endtime="20241124 14:29:34.673"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.675" endtime="20241124 14:29:34.675"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.675" endtime="20241124 14:29:34.675"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.675" endtime="20241124 14:29:34.675"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.675" endtime="20241124 14:29:34.675"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.674" endtime="20241124 14:29:34.675"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.655" endtime="20241124 14:29:34.676"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.622" endtime="20241124 14:29:34.676"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:34.676" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:29:34.676" endtime="20241124 14:29:34.676"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.678" endtime="20241124 14:29:34.678"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.677" endtime="20241124 14:29:34.678"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:34.678" endtime="20241124 14:29:34.679"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.678" endtime="20241124 14:29:34.679"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.677" endtime="20241124 14:29:34.679"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241124 14:29:34.680" endtime="20241124 14:29:34.735"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.680" endtime="20241124 14:29:34.735"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.736" endtime="20241124 14:29:34.737"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.737" endtime="20241124 14:29:34.737"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.735" endtime="20241124 14:29:34.737"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.679" endtime="20241124 14:29:34.737"/>
</try>
<status status="PASS" starttime="20241124 14:29:34.677" endtime="20241124 14:29:34.738"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.676" endtime="20241124 14:29:34.738"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.676" endtime="20241124 14:29:34.738"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.739" endtime="20241124 14:29:34.739"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.738" endtime="20241124 14:29:34.739"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.676" endtime="20241124 14:29:34.740"/>
</try>
<status status="PASS" starttime="20241124 14:29:34.621" endtime="20241124 14:29:34.740"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.619" endtime="20241124 14:29:34.740"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.744" endtime="20241124 14:29:34.744"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.749" endtime="20241124 14:29:34.749"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.740" endtime="20241124 14:29:34.749"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.751" endtime="20241124 14:29:34.752"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.749" endtime="20241124 14:29:34.752"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.757" endtime="20241124 14:29:34.757"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.752" endtime="20241124 14:29:34.757"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.759" endtime="20241124 14:29:34.760"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.757" endtime="20241124 14:29:34.760"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.761" endtime="20241124 14:29:34.761"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.760" endtime="20241124 14:29:34.761"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.762" endtime="20241124 14:29:34.762"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.763" endtime="20241124 14:29:34.763"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.762" endtime="20241124 14:29:34.763"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.763" endtime="20241124 14:29:34.763"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.763" endtime="20241124 14:29:34.764"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.762" endtime="20241124 14:29:34.764"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.761" endtime="20241124 14:29:34.764"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:34.770" endtime="20241124 14:29:34.770"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.772" endtime="20241124 14:29:34.772"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.764" endtime="20241124 14:29:34.772"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.774" endtime="20241124 14:29:34.774"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.775" endtime="20241124 14:29:34.775"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.774" endtime="20241124 14:29:34.775"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.775" endtime="20241124 14:29:34.775"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.775" endtime="20241124 14:29:34.775"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.774" endtime="20241124 14:29:34.775"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.773" endtime="20241124 14:29:34.775"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:34.781" endtime="20241124 14:29:34.781"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.784" endtime="20241124 14:29:34.784"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.775" endtime="20241124 14:29:34.784"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.785" endtime="20241124 14:29:34.785"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.786" endtime="20241124 14:29:34.786"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.786" endtime="20241124 14:29:34.786"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.786" endtime="20241124 14:29:34.786"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.786" endtime="20241124 14:29:34.786"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.786" endtime="20241124 14:29:34.786"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.784" endtime="20241124 14:29:34.786"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.788" endtime="20241124 14:29:34.788"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.787" endtime="20241124 14:29:34.788"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:34.793" endtime="20241124 14:29:34.794"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.794" endtime="20241124 14:29:34.794"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.788" endtime="20241124 14:29:34.794"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.618" endtime="20241124 14:29:34.794"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:34.794" endtime="20241124 14:29:34.795"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:34.795" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:29:34.795" endtime="20241124 14:29:34.795"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:34.795" endtime="20241124 14:29:34.795"/>
</return>
<msg timestamp="20241124 14:29:34.796" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:34.617" endtime="20241124 14:29:34.796"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.797" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:45</msg>
<status status="PASS" starttime="20241124 14:29:34.797" endtime="20241124 14:29:34.797"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.798" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:34.798" endtime="20241124 14:29:34.798"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.799" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:34.798" endtime="20241124 14:29:34.799"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.799" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.799" endtime="20241124 14:29:34.799"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.800" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:34.799" endtime="20241124 14:29:34.800"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.800" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.800" endtime="20241124 14:29:34.800"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.801" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:34.800" endtime="20241124 14:29:34.801"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.801" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:34.801" endtime="20241124 14:29:34.801"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:34.801" endtime="20241124 14:29:34.802"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:34.804" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:34.804" endtime="20241124 14:29:34.804"/>
</kw>
<msg timestamp="20241124 14:29:34.804" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.803" endtime="20241124 14:29:34.804"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.805" endtime="20241124 14:29:34.805"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.805" endtime="20241124 14:29:34.805"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.805" endtime="20241124 14:29:34.805"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.806" endtime="20241124 14:29:34.806"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.805" endtime="20241124 14:29:34.806"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.805" endtime="20241124 14:29:34.806"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.805" endtime="20241124 14:29:34.806"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.805" endtime="20241124 14:29:34.806"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:34.807" endtime="20241124 14:29:34.807"/>
</return>
<msg timestamp="20241124 14:29:34.807" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.803" endtime="20241124 14:29:34.807"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:34.809" endtime="20241124 14:29:34.809"/>
</kw>
<msg timestamp="20241124 14:29:34.809" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.808" endtime="20241124 14:29:34.809"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.810" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:34.809" endtime="20241124 14:29:34.810"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.810" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.810" endtime="20241124 14:29:34.810"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.810" endtime="20241124 14:29:34.811"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.811" endtime="20241124 14:29:34.811"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.811" endtime="20241124 14:29:34.811"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.810" endtime="20241124 14:29:34.811"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.809" endtime="20241124 14:29:34.811"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.809" endtime="20241124 14:29:34.811"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:34.811" endtime="20241124 14:29:34.811"/>
</return>
<msg timestamp="20241124 14:29:34.812" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.808" endtime="20241124 14:29:34.812"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:34.812" endtime="20241124 14:29:34.812"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.812" endtime="20241124 14:29:34.812"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.812" endtime="20241124 14:29:34.812"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.813" endtime="20241124 14:29:34.813"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:34.813" endtime="20241124 14:29:34.813"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.813" endtime="20241124 14:29:34.813"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.813" endtime="20241124 14:29:34.813"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:34.813" endtime="20241124 14:29:34.813"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.813" endtime="20241124 14:29:34.813"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.812" endtime="20241124 14:29:34.814"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.812" endtime="20241124 14:29:34.814"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.812" endtime="20241124 14:29:34.814"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.814" endtime="20241124 14:29:34.814"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.814" endtime="20241124 14:29:34.814"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.814" endtime="20241124 14:29:34.814"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.815" endtime="20241124 14:29:34.815"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.815" endtime="20241124 14:29:34.815"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.814" endtime="20241124 14:29:34.815"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.814" endtime="20241124 14:29:34.815"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.814" endtime="20241124 14:29:34.815"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.814" endtime="20241124 14:29:34.815"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.812" endtime="20241124 14:29:34.815"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.812" endtime="20241124 14:29:34.815"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:34.816" endtime="20241124 14:29:34.816"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.816" endtime="20241124 14:29:34.816"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.816" endtime="20241124 14:29:34.816"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.816" endtime="20241124 14:29:34.816"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.816" endtime="20241124 14:29:34.816"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.816" endtime="20241124 14:29:34.817"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.817" endtime="20241124 14:29:34.817"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.817" endtime="20241124 14:29:34.817"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.817" endtime="20241124 14:29:34.817"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.817" endtime="20241124 14:29:34.817"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.818" endtime="20241124 14:29:34.818"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.818" endtime="20241124 14:29:34.818"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.818" endtime="20241124 14:29:34.818"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.817" endtime="20241124 14:29:34.818"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.817" endtime="20241124 14:29:34.818"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.817" endtime="20241124 14:29:34.818"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.816" endtime="20241124 14:29:34.818"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.815" endtime="20241124 14:29:34.818"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.798" endtime="20241124 14:29:34.818"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.819" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:34.819" endtime="20241124 14:29:34.819"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.819" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:34.819" endtime="20241124 14:29:34.819"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.820" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.820" endtime="20241124 14:29:34.820"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.820" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:34.820" endtime="20241124 14:29:34.821"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.821" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.821" endtime="20241124 14:29:34.821"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.821" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:34.821" endtime="20241124 14:29:34.821"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.822" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:34.822" endtime="20241124 14:29:34.822"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:34.822" endtime="20241124 14:29:34.822"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:34.825" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:29:34.824" endtime="20241124 14:29:34.825"/>
</kw>
<msg timestamp="20241124 14:29:34.825" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.824" endtime="20241124 14:29:34.825"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.825" endtime="20241124 14:29:34.825"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.826" endtime="20241124 14:29:34.826"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.826" endtime="20241124 14:29:34.826"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.826" endtime="20241124 14:29:34.826"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.826" endtime="20241124 14:29:34.826"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.826" endtime="20241124 14:29:34.826"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.825" endtime="20241124 14:29:34.826"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.825" endtime="20241124 14:29:34.826"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:34.826" endtime="20241124 14:29:34.826"/>
</return>
<msg timestamp="20241124 14:29:34.827" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.824" endtime="20241124 14:29:34.827"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:34.830" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:34.828" endtime="20241124 14:29:34.830"/>
</kw>
<msg timestamp="20241124 14:29:34.830" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.828" endtime="20241124 14:29:34.830"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.830" endtime="20241124 14:29:34.830"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.831" endtime="20241124 14:29:34.831"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.830" endtime="20241124 14:29:34.831"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.831" endtime="20241124 14:29:34.831"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.831" endtime="20241124 14:29:34.831"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.830" endtime="20241124 14:29:34.831"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.830" endtime="20241124 14:29:34.831"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.830" endtime="20241124 14:29:34.831"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:34.831" endtime="20241124 14:29:34.831"/>
</return>
<msg timestamp="20241124 14:29:34.832" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:34.828" endtime="20241124 14:29:34.832"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:34.832" endtime="20241124 14:29:34.832"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.832" endtime="20241124 14:29:34.832"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.832" endtime="20241124 14:29:34.832"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.833" endtime="20241124 14:29:34.833"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:34.833" endtime="20241124 14:29:34.833"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.833" endtime="20241124 14:29:34.833"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.833" endtime="20241124 14:29:34.833"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:34.833" endtime="20241124 14:29:34.833"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.833" endtime="20241124 14:29:34.833"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.832" endtime="20241124 14:29:34.833"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.832" endtime="20241124 14:29:34.833"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.832" endtime="20241124 14:29:34.834"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.834" endtime="20241124 14:29:34.834"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.834" endtime="20241124 14:29:34.834"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.834" endtime="20241124 14:29:34.834"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.834" endtime="20241124 14:29:34.834"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.834" endtime="20241124 14:29:34.835"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.834" endtime="20241124 14:29:34.835"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.834" endtime="20241124 14:29:34.835"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.834" endtime="20241124 14:29:34.835"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.834" endtime="20241124 14:29:34.835"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.832" endtime="20241124 14:29:34.835"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.832" endtime="20241124 14:29:34.835"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:34.835" endtime="20241124 14:29:34.835"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.835" endtime="20241124 14:29:34.835"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.835" endtime="20241124 14:29:34.836"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.836" endtime="20241124 14:29:34.836"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.836" endtime="20241124 14:29:34.836"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.836" endtime="20241124 14:29:34.836"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.836" endtime="20241124 14:29:34.836"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.837" endtime="20241124 14:29:34.837"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.837" endtime="20241124 14:29:34.837"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.836" endtime="20241124 14:29:34.837"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.837" endtime="20241124 14:29:34.837"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:34.837" endtime="20241124 14:29:34.837"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.837" endtime="20241124 14:29:34.837"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.836" endtime="20241124 14:29:34.837"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.836" endtime="20241124 14:29:34.837"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:34.836" endtime="20241124 14:29:34.838"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:34.835" endtime="20241124 14:29:34.838"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.835" endtime="20241124 14:29:34.838"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.819" endtime="20241124 14:29:34.838"/>
</iter>
<status status="PASS" starttime="20241124 14:29:34.797" endtime="20241124 14:29:34.838"/>
</for>
<msg timestamp="20241124 14:29:34.838" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:29:34.796" endtime="20241124 14:29:34.838"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:34.838" endtime="20241124 14:29:34.839"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:34.841" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '308', 'status': 'COMPLETED', 'actionName': 'Click Profile image icon', 'actionType': 'CLICK', 'actionXpath': 'id=headerProfileImage', 'inputValue': '', 'errorMessage':...</msg>
<status status="PASS" starttime="20241124 14:29:34.840" endtime="20241124 14:29:34.841"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:34.842" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "308", "status": "COMPLETED", "actionName": "Click Profile image icon", "actionType": "CLICK", "actionXpath": "id=headerProfileImage", "inputValue": "", "errorMessage":...</msg>
<status status="PASS" starttime="20241124 14:29:34.841" endtime="20241124 14:29:34.842"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:34.867" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:34.867" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:34.842" endtime="20241124 14:29:34.867"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:34.867" endtime="20241124 14:29:34.868"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:34.868" endtime="20241124 14:29:34.868"/>
</return>
<status status="PASS" starttime="20241124 14:29:34.841" endtime="20241124 14:29:34.868"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.839" endtime="20241124 14:29:34.868"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.612" endtime="20241124 14:29:34.868"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.869" endtime="20241124 14:29:34.869"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:34.869" endtime="20241124 14:29:34.869"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.869" endtime="20241124 14:29:34.869"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.869" endtime="20241124 14:29:34.869"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.612" endtime="20241124 14:29:34.869"/>
</try>
<status status="PASS" starttime="20241124 14:29:34.612" endtime="20241124 14:29:34.869"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '46', 'actionId': '33', 'flowId': '15', 'order': 1, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.564Z', 'action': {'id': '33', 'name': 'Click Profile Dropdown acti...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.870" level="INFO">${action} = {'id': '33', 'name': 'Click Profile Dropdown action', 'type': 'CLICK', 'xpath': '//p[text()="Profile"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T17:32:01.896Z', 'updatedAt': '2024-...</msg>
<status status="PASS" starttime="20241124 14:29:34.870" endtime="20241124 14:29:34.870"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:34.871" endtime="20241124 14:29:34.871"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:34.872" level="INFO">${input} = {'id': '30', 'actionId': '33', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-21T17:32:02.118Z', 'updatedAt': '2024-11-21T17:32:02.118Z'}</msg>
<status status="PASS" starttime="20241124 14:29:34.871" endtime="20241124 14:29:34.872"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.872" endtime="20241124 14:29:34.872"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.872" endtime="20241124 14:29:34.872"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.872" endtime="20241124 14:29:34.873"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.872" endtime="20241124 14:29:34.873"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:34.873" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:34.873" endtime="20241124 14:29:34.873"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:34.874" endtime="20241124 14:29:34.874"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.874" endtime="20241124 14:29:34.874"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:34.874" endtime="20241124 14:29:34.874"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.874" endtime="20241124 14:29:34.874"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:34.887" level="INFO">Waited for Element with selector //p[text()="Profile"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:34.883" endtime="20241124 14:29:34.887"/>
</kw>
<msg timestamp="20241124 14:29:34.887" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.883" endtime="20241124 14:29:34.887"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:34.887" endtime="20241124 14:29:34.888"/>
</return>
<status status="PASS" starttime="20241124 14:29:34.883" endtime="20241124 14:29:34.888"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.888" endtime="20241124 14:29:34.888"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.888" endtime="20241124 14:29:34.888"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.888" endtime="20241124 14:29:34.888"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.882" endtime="20241124 14:29:34.888"/>
</try>
<msg timestamp="20241124 14:29:34.888" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.882" endtime="20241124 14:29:34.889"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:34.889" endtime="20241124 14:29:34.889"/>
</return>
<status status="PASS" starttime="20241124 14:29:34.881" endtime="20241124 14:29:34.889"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:34.889" endtime="20241124 14:29:34.889"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:34.889" endtime="20241124 14:29:34.889"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.881" endtime="20241124 14:29:34.889"/>
</try>
<msg timestamp="20241124 14:29:34.889" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.880" endtime="20241124 14:29:34.889"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.891" endtime="20241124 14:29:34.891"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.891" endtime="20241124 14:29:34.891"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.891" endtime="20241124 14:29:34.891"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.891" endtime="20241124 14:29:34.892"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.890" endtime="20241124 14:29:34.892"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.879" endtime="20241124 14:29:34.892"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:34.903" level="INFO">Waited for Element with selector //p[text()="Profile"] at state visible</msg>
<status status="PASS" starttime="20241124 14:29:34.895" endtime="20241124 14:29:34.903"/>
</kw>
<msg timestamp="20241124 14:29:34.903" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.895" endtime="20241124 14:29:34.903"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:34.904" endtime="20241124 14:29:34.904"/>
</return>
<status status="PASS" starttime="20241124 14:29:34.895" endtime="20241124 14:29:34.904"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.904" endtime="20241124 14:29:34.904"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.904" endtime="20241124 14:29:34.904"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.904" endtime="20241124 14:29:34.904"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.895" endtime="20241124 14:29:34.904"/>
</try>
<msg timestamp="20241124 14:29:34.905" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.895" endtime="20241124 14:29:34.905"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:34.905" endtime="20241124 14:29:34.905"/>
</return>
<msg timestamp="20241124 14:29:34.905" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.894" endtime="20241124 14:29:34.905"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.907" endtime="20241124 14:29:34.907"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.907" endtime="20241124 14:29:34.907"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.907" endtime="20241124 14:29:34.907"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.907" endtime="20241124 14:29:34.907"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.906" endtime="20241124 14:29:34.907"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.893" endtime="20241124 14:29:34.907"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:34.926" level="INFO">Waited for Element with selector //p[text()="Profile"] at state enabled</msg>
<status status="PASS" starttime="20241124 14:29:34.911" endtime="20241124 14:29:34.926"/>
</kw>
<msg timestamp="20241124 14:29:34.927" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.911" endtime="20241124 14:29:34.927"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:34.927" endtime="20241124 14:29:34.927"/>
</return>
<status status="PASS" starttime="20241124 14:29:34.911" endtime="20241124 14:29:34.927"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.927" endtime="20241124 14:29:34.927"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.927" endtime="20241124 14:29:34.927"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.927" endtime="20241124 14:29:34.927"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.910" endtime="20241124 14:29:34.927"/>
</try>
<msg timestamp="20241124 14:29:34.928" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.910" endtime="20241124 14:29:34.928"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:34.928" endtime="20241124 14:29:34.928"/>
</return>
<msg timestamp="20241124 14:29:34.928" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241124 14:29:34.909" endtime="20241124 14:29:34.928"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.931" endtime="20241124 14:29:34.931"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.932" endtime="20241124 14:29:34.932"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.931" endtime="20241124 14:29:34.932"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.930" endtime="20241124 14:29:34.932"/>
</if>
<status status="PASS" starttime="20241124 14:29:34.929" endtime="20241124 14:29:34.932"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.909" endtime="20241124 14:29:34.933"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.877" endtime="20241124 14:29:34.933"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:34.933" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241124 14:29:34.933" endtime="20241124 14:29:34.933"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241124 14:29:34.935" endtime="20241124 14:29:34.935"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:34.935" endtime="20241124 14:29:34.935"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:34.935" endtime="20241124 14:29:34.936"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.935" endtime="20241124 14:29:34.936"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.935" endtime="20241124 14:29:34.936"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241124 14:29:34.936" endtime="20241124 14:29:35.074"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.936" endtime="20241124 14:29:35.074"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.074" endtime="20241124 14:29:35.074"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.074" endtime="20241124 14:29:35.074"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.074" endtime="20241124 14:29:35.074"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.936" endtime="20241124 14:29:35.074"/>
</try>
<status status="PASS" starttime="20241124 14:29:34.934" endtime="20241124 14:29:35.074"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.934" endtime="20241124 14:29:35.074"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.934" endtime="20241124 14:29:35.074"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.074" endtime="20241124 14:29:35.074"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.074" endtime="20241124 14:29:35.074"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.933" endtime="20241124 14:29:35.074"/>
</try>
<status status="PASS" starttime="20241124 14:29:34.876" endtime="20241124 14:29:35.074"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.875" endtime="20241124 14:29:35.074"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.083" endtime="20241124 14:29:35.083"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.083" endtime="20241124 14:29:35.083"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.079" endtime="20241124 14:29:35.083"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.083" endtime="20241124 14:29:35.083"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.083" endtime="20241124 14:29:35.083"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.083" endtime="20241124 14:29:35.083"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.083" endtime="20241124 14:29:35.083"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.097" endtime="20241124 14:29:35.097"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.083" endtime="20241124 14:29:35.097"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.099" endtime="20241124 14:29:35.099"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.097" endtime="20241124 14:29:35.099"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.100" endtime="20241124 14:29:35.100"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.100" endtime="20241124 14:29:35.100"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.100" endtime="20241124 14:29:35.100"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.100" endtime="20241124 14:29:35.100"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.100" endtime="20241124 14:29:35.100"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.100" endtime="20241124 14:29:35.100"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.099" endtime="20241124 14:29:35.100"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:35.100" endtime="20241124 14:29:35.113"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.119" endtime="20241124 14:29:35.119"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.100" endtime="20241124 14:29:35.119"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.121" endtime="20241124 14:29:35.121"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.122" endtime="20241124 14:29:35.122"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.122" endtime="20241124 14:29:35.122"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.123" endtime="20241124 14:29:35.123"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.122" endtime="20241124 14:29:35.123"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.122" endtime="20241124 14:29:35.123"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.120" endtime="20241124 14:29:35.123"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:35.131" endtime="20241124 14:29:35.132"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.135" endtime="20241124 14:29:35.135"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.123" endtime="20241124 14:29:35.135"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.137" endtime="20241124 14:29:35.137"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.137" endtime="20241124 14:29:35.137"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.137" endtime="20241124 14:29:35.137"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.138" endtime="20241124 14:29:35.138"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.137" endtime="20241124 14:29:35.138"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.137" endtime="20241124 14:29:35.138"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.135" endtime="20241124 14:29:35.138"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.140" endtime="20241124 14:29:35.140"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.138" endtime="20241124 14:29:35.140"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:35.149" endtime="20241124 14:29:35.149"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.150" endtime="20241124 14:29:35.150"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.140" endtime="20241124 14:29:35.150"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.874" endtime="20241124 14:29:35.150"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.150" endtime="20241124 14:29:35.151"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:35.152" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:29:35.151" endtime="20241124 14:29:35.152"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:35.152" endtime="20241124 14:29:35.152"/>
</return>
<msg timestamp="20241124 14:29:35.152" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:34.873" endtime="20241124 14:29:35.152"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.154" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:46</msg>
<status status="PASS" starttime="20241124 14:29:35.154" endtime="20241124 14:29:35.154"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.155" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:35.155" endtime="20241124 14:29:35.155"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.156" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:35.155" endtime="20241124 14:29:35.156"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.156" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.156" endtime="20241124 14:29:35.156"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.157" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:35.156" endtime="20241124 14:29:35.157"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.157" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.157" endtime="20241124 14:29:35.157"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.157" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:35.157" endtime="20241124 14:29:35.157"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.157" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:35.157" endtime="20241124 14:29:35.157"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:35.157" endtime="20241124 14:29:35.157"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:35.164" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:35.163" endtime="20241124 14:29:35.164"/>
</kw>
<msg timestamp="20241124 14:29:35.165" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.163" endtime="20241124 14:29:35.165"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.165" endtime="20241124 14:29:35.165"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.166" endtime="20241124 14:29:35.166"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.166" endtime="20241124 14:29:35.166"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.166" endtime="20241124 14:29:35.166"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.166" endtime="20241124 14:29:35.167"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.165" endtime="20241124 14:29:35.167"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.165" endtime="20241124 14:29:35.167"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.165" endtime="20241124 14:29:35.167"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:35.167" endtime="20241124 14:29:35.167"/>
</return>
<msg timestamp="20241124 14:29:35.167" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.157" endtime="20241124 14:29:35.168"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:35.170" endtime="20241124 14:29:35.170"/>
</kw>
<msg timestamp="20241124 14:29:35.171" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.170" endtime="20241124 14:29:35.171"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.172" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:35.171" endtime="20241124 14:29:35.172"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.173" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.172" endtime="20241124 14:29:35.173"/>
</kw>
<status status="PASS" starttime="20241124 14:29:35.172" endtime="20241124 14:29:35.174"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.174"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.174"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.172" endtime="20241124 14:29:35.174"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.171" endtime="20241124 14:29:35.174"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.171" endtime="20241124 14:29:35.174"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.174"/>
</return>
<msg timestamp="20241124 14:29:35.174" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.169" endtime="20241124 14:29:35.174"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.174"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.174"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.174"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.174"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.174"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.174"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.179" endtime="20241124 14:29:35.179"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:35.179" endtime="20241124 14:29:35.179"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.179" endtime="20241124 14:29:35.180"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.180"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.180"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.180"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.181" endtime="20241124 14:29:35.181"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.181" endtime="20241124 14:29:35.182"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.181" endtime="20241124 14:29:35.182"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.182" endtime="20241124 14:29:35.182"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.183" endtime="20241124 14:29:35.183"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.182" endtime="20241124 14:29:35.183"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.181" endtime="20241124 14:29:35.183"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.180" endtime="20241124 14:29:35.183"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.180" endtime="20241124 14:29:35.183"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.184"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.174" endtime="20241124 14:29:35.184"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:35.185" endtime="20241124 14:29:35.185"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.185" endtime="20241124 14:29:35.185"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.185" endtime="20241124 14:29:35.186"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.186" endtime="20241124 14:29:35.186"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.186" endtime="20241124 14:29:35.187"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.186" endtime="20241124 14:29:35.187"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.187" endtime="20241124 14:29:35.188"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.188" endtime="20241124 14:29:35.188"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.188" endtime="20241124 14:29:35.188"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.188" endtime="20241124 14:29:35.189"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.189" endtime="20241124 14:29:35.189"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.190" endtime="20241124 14:29:35.190"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.189" endtime="20241124 14:29:35.190"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.188" endtime="20241124 14:29:35.190"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.187" endtime="20241124 14:29:35.190"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.187" endtime="20241124 14:29:35.190"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.185" endtime="20241124 14:29:35.190"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.184" endtime="20241124 14:29:35.190"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.154" endtime="20241124 14:29:35.190"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.191" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:35.191" endtime="20241124 14:29:35.191"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.192" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:35.192" endtime="20241124 14:29:35.192"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.193" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.192" endtime="20241124 14:29:35.193"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.193" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:35.193" endtime="20241124 14:29:35.193"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.194" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.193" endtime="20241124 14:29:35.194"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.194" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:35.194" endtime="20241124 14:29:35.194"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.195" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:35.194" endtime="20241124 14:29:35.195"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:35.195" endtime="20241124 14:29:35.198"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:35.203" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:47'.</msg>
<status status="FAIL" starttime="20241124 14:29:35.202" endtime="20241124 14:29:35.204"/>
</kw>
<msg timestamp="20241124 14:29:35.204" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.202" endtime="20241124 14:29:35.204"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.205" endtime="20241124 14:29:35.205"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.205" endtime="20241124 14:29:35.206"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.205" endtime="20241124 14:29:35.206"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.206" endtime="20241124 14:29:35.206"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.206" endtime="20241124 14:29:35.206"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.205" endtime="20241124 14:29:35.206"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.204" endtime="20241124 14:29:35.206"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.204" endtime="20241124 14:29:35.206"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:35.206" endtime="20241124 14:29:35.206"/>
</return>
<msg timestamp="20241124 14:29:35.207" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.201" endtime="20241124 14:29:35.207"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:35.210" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:35.209" endtime="20241124 14:29:35.210"/>
</kw>
<msg timestamp="20241124 14:29:35.210" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.209" endtime="20241124 14:29:35.210"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.210" endtime="20241124 14:29:35.210"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.211" endtime="20241124 14:29:35.211"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.211" endtime="20241124 14:29:35.211"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.211" endtime="20241124 14:29:35.211"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.211" endtime="20241124 14:29:35.211"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.211" endtime="20241124 14:29:35.211"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.210" endtime="20241124 14:29:35.211"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.210" endtime="20241124 14:29:35.211"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:35.212" endtime="20241124 14:29:35.212"/>
</return>
<msg timestamp="20241124 14:29:35.212" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.208" endtime="20241124 14:29:35.212"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:35.213" endtime="20241124 14:29:35.213"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.213" endtime="20241124 14:29:35.213"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.213" endtime="20241124 14:29:35.213"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.214" endtime="20241124 14:29:35.214"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:35.214" endtime="20241124 14:29:35.214"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.213" endtime="20241124 14:29:35.214"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.214" endtime="20241124 14:29:35.214"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:35.214" endtime="20241124 14:29:35.214"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.214" endtime="20241124 14:29:35.214"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.213" endtime="20241124 14:29:35.215"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.213" endtime="20241124 14:29:35.215"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.213" endtime="20241124 14:29:35.215"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.215" endtime="20241124 14:29:35.215"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.215" endtime="20241124 14:29:35.215"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.215" endtime="20241124 14:29:35.215"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.216" endtime="20241124 14:29:35.216"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.216" endtime="20241124 14:29:35.216"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.216" endtime="20241124 14:29:35.216"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.215" endtime="20241124 14:29:35.216"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.215" endtime="20241124 14:29:35.217"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.215" endtime="20241124 14:29:35.217"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.213" endtime="20241124 14:29:35.217"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.212" endtime="20241124 14:29:35.217"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:35.218" endtime="20241124 14:29:35.218"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.218" endtime="20241124 14:29:35.218"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.218" endtime="20241124 14:29:35.218"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.219" endtime="20241124 14:29:35.219"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.219" endtime="20241124 14:29:35.219"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.219" endtime="20241124 14:29:35.219"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.221" endtime="20241124 14:29:35.221"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.221" endtime="20241124 14:29:35.222"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.222" endtime="20241124 14:29:35.222"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.221" endtime="20241124 14:29:35.222"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.222" endtime="20241124 14:29:35.222"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.222" endtime="20241124 14:29:35.222"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.222" endtime="20241124 14:29:35.222"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.221" endtime="20241124 14:29:35.222"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.219" endtime="20241124 14:29:35.222"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.219" endtime="20241124 14:29:35.222"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.218" endtime="20241124 14:29:35.222"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.217" endtime="20241124 14:29:35.222"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.191" endtime="20241124 14:29:35.222"/>
</iter>
<status status="PASS" starttime="20241124 14:29:35.154" endtime="20241124 14:29:35.222"/>
</for>
<msg timestamp="20241124 14:29:35.222" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241124 14:29:35.153" endtime="20241124 14:29:35.222"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.222" endtime="20241124 14:29:35.222"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:35.230" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '309', 'status': 'COMPLETED', 'actionName': 'Click Profile Dropdown action', 'actionType': 'CLICK', 'actionXpath': '//p[text()="Profile"]', 'inputValue': '', 'errorMess...</msg>
<status status="PASS" starttime="20241124 14:29:35.222" endtime="20241124 14:29:35.231"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:35.234" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "309", "status": "COMPLETED", "actionName": "Click Profile Dropdown action", "actionType": "CLICK", "actionXpath": "//p[text()=\"Profile\"]", "inputValue": "", "errorMe...</msg>
<status status="PASS" starttime="20241124 14:29:35.232" endtime="20241124 14:29:35.234"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:35.241" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:35.241" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:35.234" endtime="20241124 14:29:35.241"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.242" endtime="20241124 14:29:35.243"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:35.243" endtime="20241124 14:29:35.243"/>
</return>
<status status="PASS" starttime="20241124 14:29:35.231" endtime="20241124 14:29:35.243"/>
</kw>
<status status="PASS" starttime="20241124 14:29:35.222" endtime="20241124 14:29:35.244"/>
</kw>
<status status="PASS" starttime="20241124 14:29:34.870" endtime="20241124 14:29:35.244"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.244" endtime="20241124 14:29:35.244"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:35.245" endtime="20241124 14:29:35.245"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.245" endtime="20241124 14:29:35.245"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.244" endtime="20241124 14:29:35.246"/>
</branch>
<status status="PASS" starttime="20241124 14:29:34.870" endtime="20241124 14:29:35.246"/>
</try>
<status status="PASS" starttime="20241124 14:29:34.870" endtime="20241124 14:29:35.246"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '47', 'actionId': '34', 'flowId': '15', 'order': 2, 'createdAt': '2024-11-21T17:34:27.027Z', 'updatedAt': '2024-11-24T06:43:12.566Z', 'action': {'id': '34', 'name': 'Is Name heading visible', '...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.248" level="INFO">${action} = {'id': '34', 'name': 'Is Name heading visible', 'type': 'IS_ELEMENT_VISIBLE', 'xpath': '//h4[text()="bharani deepan"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-21T17:33:53.346Z', 'upd...</msg>
<status status="PASS" starttime="20241124 14:29:35.247" endtime="20241124 14:29:35.249"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.249" endtime="20241124 14:29:35.250"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:35.251" level="INFO">${input} = {'id': '31', 'actionId': '34', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-21T17:33:53.666Z', 'updatedAt': '2024-11-21T17:33:53.666Z'}</msg>
<status status="PASS" starttime="20241124 14:29:35.251" endtime="20241124 14:29:35.251"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.252" endtime="20241124 14:29:35.252"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.253" endtime="20241124 14:29:35.253"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.252" endtime="20241124 14:29:35.253"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.251" endtime="20241124 14:29:35.253"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.254" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:35.254" endtime="20241124 14:29:35.254"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:35.255" endtime="20241124 14:29:35.255"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.254" endtime="20241124 14:29:35.255"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:35.255" endtime="20241124 14:29:35.255"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.255" endtime="20241124 14:29:35.256"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.258" endtime="20241124 14:29:35.258"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.256" endtime="20241124 14:29:35.258"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.261" endtime="20241124 14:29:35.261"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.265" endtime="20241124 14:29:35.265"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.259" endtime="20241124 14:29:35.265"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.267" endtime="20241124 14:29:35.267"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.265" endtime="20241124 14:29:35.267"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.270" endtime="20241124 14:29:35.270"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.267" endtime="20241124 14:29:35.271"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.273" endtime="20241124 14:29:35.273"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.271" endtime="20241124 14:29:35.273"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.274" endtime="20241124 14:29:35.274"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.273" endtime="20241124 14:29:35.274"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.276" endtime="20241124 14:29:35.276"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.276" endtime="20241124 14:29:35.276"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.276" endtime="20241124 14:29:35.276"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.276" endtime="20241124 14:29:35.277"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.276" endtime="20241124 14:29:35.277"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.276" endtime="20241124 14:29:35.277"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.275" endtime="20241124 14:29:35.277"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:35.284" endtime="20241124 14:29:35.285"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.288" endtime="20241124 14:29:35.288"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.277" endtime="20241124 14:29:35.288"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.290" endtime="20241124 14:29:35.290"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.290" endtime="20241124 14:29:35.290"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.290" endtime="20241124 14:29:35.290"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.291" endtime="20241124 14:29:35.291"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.290" endtime="20241124 14:29:35.291"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.290" endtime="20241124 14:29:35.291"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.289" endtime="20241124 14:29:35.291"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:35.303" endtime="20241124 14:29:35.303"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.307" endtime="20241124 14:29:35.307"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.291" endtime="20241124 14:29:35.307"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:35.339" level="INFO">Waited for Element with selector //h4[text()="bharani deepan"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:35.312" endtime="20241124 14:29:35.339"/>
</kw>
<msg timestamp="20241124 14:29:35.339" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.311" endtime="20241124 14:29:35.339"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:35.340" endtime="20241124 14:29:35.340"/>
</return>
<status status="PASS" starttime="20241124 14:29:35.311" endtime="20241124 14:29:35.340"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.340" endtime="20241124 14:29:35.340"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.340" endtime="20241124 14:29:35.340"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.340" endtime="20241124 14:29:35.340"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.311" endtime="20241124 14:29:35.341"/>
</try>
<msg timestamp="20241124 14:29:35.341" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.311" endtime="20241124 14:29:35.341"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:35.341" endtime="20241124 14:29:35.341"/>
</return>
<status status="PASS" starttime="20241124 14:29:35.309" endtime="20241124 14:29:35.341"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:35.341" endtime="20241124 14:29:35.341"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.341" endtime="20241124 14:29:35.341"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.309" endtime="20241124 14:29:35.341"/>
</try>
<msg timestamp="20241124 14:29:35.342" level="INFO">${value} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.309" endtime="20241124 14:29:35.342"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.342" level="INFO">${value} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:35.342" endtime="20241124 14:29:35.342"/>
</kw>
<status status="PASS" starttime="20241124 14:29:35.342" endtime="20241124 14:29:35.342"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.342" endtime="20241124 14:29:35.343"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.342" endtime="20241124 14:29:35.343"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.342" endtime="20241124 14:29:35.343"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.308" endtime="20241124 14:29:35.343"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.345" endtime="20241124 14:29:35.345"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.343" endtime="20241124 14:29:35.345"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:35.351" endtime="20241124 14:29:35.351"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.351" endtime="20241124 14:29:35.351"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.345" endtime="20241124 14:29:35.351"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.254" endtime="20241124 14:29:35.351"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.351" endtime="20241124 14:29:35.352"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:35.353" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:29:35.352" endtime="20241124 14:29:35.353"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:35.353" endtime="20241124 14:29:35.353"/>
</return>
<msg timestamp="20241124 14:29:35.353" level="INFO">${value} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:35.253" endtime="20241124 14:29:35.353"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.355" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:35.355" endtime="20241124 14:29:35.355"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.356" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:35.356" endtime="20241124 14:29:35.356"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.357" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:35.357" endtime="20241124 14:29:35.357"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.358" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.357" endtime="20241124 14:29:35.358"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.358" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:35.358" endtime="20241124 14:29:35.359"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.359" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.359" endtime="20241124 14:29:35.359"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.360" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:35.360" endtime="20241124 14:29:35.360"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.361" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:35.360" endtime="20241124 14:29:35.361"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:35.361" endtime="20241124 14:29:35.362"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:35.366" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:47::flowActionSequenceId:52'.</msg>
<status status="FAIL" starttime="20241124 14:29:35.365" endtime="20241124 14:29:35.366"/>
</kw>
<msg timestamp="20241124 14:29:35.366" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.365" endtime="20241124 14:29:35.366"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.367" endtime="20241124 14:29:35.367"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.367" endtime="20241124 14:29:35.367"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.367" endtime="20241124 14:29:35.367"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.368" endtime="20241124 14:29:35.368"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.368" endtime="20241124 14:29:35.368"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.367" endtime="20241124 14:29:35.368"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.367" endtime="20241124 14:29:35.368"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.366" endtime="20241124 14:29:35.368"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:35.368" endtime="20241124 14:29:35.368"/>
</return>
<msg timestamp="20241124 14:29:35.369" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.364" endtime="20241124 14:29:35.369"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:35.371" endtime="20241124 14:29:35.371"/>
</kw>
<msg timestamp="20241124 14:29:35.371" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.370" endtime="20241124 14:29:35.371"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.372" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:35.372" endtime="20241124 14:29:35.372"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.373" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.372" endtime="20241124 14:29:35.373"/>
</kw>
<status status="PASS" starttime="20241124 14:29:35.372" endtime="20241124 14:29:35.373"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.373" endtime="20241124 14:29:35.373"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.373" endtime="20241124 14:29:35.373"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.372" endtime="20241124 14:29:35.373"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.371" endtime="20241124 14:29:35.373"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.371" endtime="20241124 14:29:35.373"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:35.374" endtime="20241124 14:29:35.374"/>
</return>
<msg timestamp="20241124 14:29:35.374" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.370" endtime="20241124 14:29:35.374"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:35.375" endtime="20241124 14:29:35.375"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.374" endtime="20241124 14:29:35.375"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.374" endtime="20241124 14:29:35.375"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.375" endtime="20241124 14:29:35.376"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:35.376" endtime="20241124 14:29:35.376"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.375" endtime="20241124 14:29:35.376"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.376" endtime="20241124 14:29:35.376"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:35.376" endtime="20241124 14:29:35.376"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.376" endtime="20241124 14:29:35.376"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.375" endtime="20241124 14:29:35.376"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.375" endtime="20241124 14:29:35.376"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.375" endtime="20241124 14:29:35.377"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.377" endtime="20241124 14:29:35.377"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.377" endtime="20241124 14:29:35.377"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.377" endtime="20241124 14:29:35.377"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.378" endtime="20241124 14:29:35.378"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.378" endtime="20241124 14:29:35.378"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.377" endtime="20241124 14:29:35.378"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.377" endtime="20241124 14:29:35.378"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.377" endtime="20241124 14:29:35.378"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.377" endtime="20241124 14:29:35.378"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.374" endtime="20241124 14:29:35.378"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.374" endtime="20241124 14:29:35.378"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:35.379" endtime="20241124 14:29:35.379"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.379" endtime="20241124 14:29:35.379"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.379" endtime="20241124 14:29:35.380"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.380" endtime="20241124 14:29:35.380"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.380" endtime="20241124 14:29:35.380"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.380" endtime="20241124 14:29:35.380"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.380" endtime="20241124 14:29:35.381"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.381" endtime="20241124 14:29:35.381"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.381" endtime="20241124 14:29:35.381"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.381" endtime="20241124 14:29:35.381"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.381" endtime="20241124 14:29:35.382"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.382" endtime="20241124 14:29:35.382"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.381" endtime="20241124 14:29:35.382"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.381" endtime="20241124 14:29:35.382"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.380" endtime="20241124 14:29:35.382"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.380" endtime="20241124 14:29:35.382"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.379" endtime="20241124 14:29:35.382"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.379" endtime="20241124 14:29:35.382"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.356" endtime="20241124 14:29:35.382"/>
</iter>
<iter>
<var name="${assertion}">{'id': '10', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:47', 'target': 'TRUE', 'customTargetValue': 'TRUE', 'useCustomTargetValue'...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.383" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:47</msg>
<status status="PASS" starttime="20241124 14:29:35.382" endtime="20241124 14:29:35.383"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.383" level="INFO">${target} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:35.383" endtime="20241124 14:29:35.383"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.384" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.384" endtime="20241124 14:29:35.384"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.384" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:35.384" endtime="20241124 14:29:35.384"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.385" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.384" endtime="20241124 14:29:35.385"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.385" level="INFO">${customTargetValue} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:35.385" endtime="20241124 14:29:35.385"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.386" level="INFO">${errorMessage} = Name heading not visible</msg>
<status status="PASS" starttime="20241124 14:29:35.385" endtime="20241124 14:29:35.386"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:35.386" endtime="20241124 14:29:35.386"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:35.389" endtime="20241124 14:29:35.389"/>
</kw>
<msg timestamp="20241124 14:29:35.389" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.388" endtime="20241124 14:29:35.389"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.390" level="INFO">${values} = TRUE</msg>
<status status="PASS" starttime="20241124 14:29:35.390" endtime="20241124 14:29:35.390"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.391" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.390" endtime="20241124 14:29:35.391"/>
</kw>
<status status="PASS" starttime="20241124 14:29:35.390" endtime="20241124 14:29:35.391"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.391" endtime="20241124 14:29:35.391"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.391" endtime="20241124 14:29:35.391"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.390" endtime="20241124 14:29:35.391"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.389" endtime="20241124 14:29:35.391"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.389" endtime="20241124 14:29:35.391"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:35.391" endtime="20241124 14:29:35.392"/>
</return>
<msg timestamp="20241124 14:29:35.392" level="INFO">${is_source_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.388" endtime="20241124 14:29:35.392"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241124 14:29:35.395" level="FAIL">Dictionary does not contain key 'TRUE'.</msg>
<status status="FAIL" starttime="20241124 14:29:35.394" endtime="20241124 14:29:35.395"/>
</kw>
<msg timestamp="20241124 14:29:35.395" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.394" endtime="20241124 14:29:35.395"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.396" endtime="20241124 14:29:35.397"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.397" endtime="20241124 14:29:35.397"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.397" endtime="20241124 14:29:35.397"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.398" endtime="20241124 14:29:35.398"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.398" endtime="20241124 14:29:35.398"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.397" endtime="20241124 14:29:35.398"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.395" endtime="20241124 14:29:35.398"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.395" endtime="20241124 14:29:35.398"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:35.398" endtime="20241124 14:29:35.398"/>
</return>
<msg timestamp="20241124 14:29:35.399" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.393" endtime="20241124 14:29:35.399"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:35.399" endtime="20241124 14:29:35.399"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.399" endtime="20241124 14:29:35.399"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.399" endtime="20241124 14:29:35.399"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20241124 14:29:35.400" endtime="20241124 14:29:35.400"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="PASS" starttime="20241124 14:29:35.401" endtime="20241124 14:29:35.401"/>
</return>
<status status="PASS" starttime="20241124 14:29:35.400" endtime="20241124 14:29:35.401"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.401" endtime="20241124 14:29:35.401"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:35.401" endtime="20241124 14:29:35.401"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.401" endtime="20241124 14:29:35.401"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.400" endtime="20241124 14:29:35.401"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.400" endtime="20241124 14:29:35.401"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.400" endtime="20241124 14:29:35.401"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.402" endtime="20241124 14:29:35.402"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.402" endtime="20241124 14:29:35.402"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.402" endtime="20241124 14:29:35.402"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.403" endtime="20241124 14:29:35.403"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.403" endtime="20241124 14:29:35.403"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.403" endtime="20241124 14:29:35.403"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.402" endtime="20241124 14:29:35.403"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.402" endtime="20241124 14:29:35.403"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.401" endtime="20241124 14:29:35.403"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.399" endtime="20241124 14:29:35.403"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.399" endtime="20241124 14:29:35.403"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:35.404" endtime="20241124 14:29:35.404"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.404" endtime="20241124 14:29:35.404"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.404" endtime="20241124 14:29:35.404"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.404" endtime="20241124 14:29:35.404"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.404" endtime="20241124 14:29:35.404"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.404" endtime="20241124 14:29:35.404"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.405" endtime="20241124 14:29:35.405"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.405" endtime="20241124 14:29:35.405"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.405" endtime="20241124 14:29:35.405"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.405" endtime="20241124 14:29:35.405"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.406" endtime="20241124 14:29:35.406"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.406" endtime="20241124 14:29:35.406"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.405" endtime="20241124 14:29:35.406"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.405" endtime="20241124 14:29:35.406"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.405" endtime="20241124 14:29:35.406"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.404" endtime="20241124 14:29:35.406"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.403" endtime="20241124 14:29:35.406"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.403" endtime="20241124 14:29:35.406"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.382" endtime="20241124 14:29:35.406"/>
</iter>
<status status="PASS" starttime="20241124 14:29:35.355" endtime="20241124 14:29:35.406"/>
</for>
<msg timestamp="20241124 14:29:35.407" level="INFO">${assertion_message} = Assertion passed: TRUE == TRUE</msg>
<status status="PASS" starttime="20241124 14:29:35.354" endtime="20241124 14:29:35.407"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.407" endtime="20241124 14:29:35.407"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:35.410" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '310', 'status': 'COMPLETED', 'actionName': 'Is Name heading visible', 'actionType': 'IS_ELEMENT_VISIBLE', 'actionXpath': '//h4[text()="bharani deepan"]', 'inputValue':...</msg>
<status status="PASS" starttime="20241124 14:29:35.409" endtime="20241124 14:29:35.410"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:35.411" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "310", "status": "COMPLETED", "actionName": "Is Name heading visible", "actionType": "IS_ELEMENT_VISIBLE", "actionXpath": "//h4[text()=\"bharani deepan\"]", "inputValue...</msg>
<status status="PASS" starttime="20241124 14:29:35.410" endtime="20241124 14:29:35.411"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:35.428" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:35.428" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:35.411" endtime="20241124 14:29:35.428"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.429" endtime="20241124 14:29:35.430"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:35.431" endtime="20241124 14:29:35.431"/>
</return>
<status status="PASS" starttime="20241124 14:29:35.410" endtime="20241124 14:29:35.432"/>
</kw>
<status status="PASS" starttime="20241124 14:29:35.407" endtime="20241124 14:29:35.432"/>
</kw>
<status status="PASS" starttime="20241124 14:29:35.247" endtime="20241124 14:29:35.433"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.434" endtime="20241124 14:29:35.434"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:35.434" endtime="20241124 14:29:35.434"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.435" endtime="20241124 14:29:35.435"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.433" endtime="20241124 14:29:35.435"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.247" endtime="20241124 14:29:35.435"/>
</try>
<status status="PASS" starttime="20241124 14:29:35.246" endtime="20241124 14:29:35.435"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '52', 'actionId': '35', 'flowId': '15', 'order': 3, 'createdAt': '2024-11-24T06:43:12.545Z', 'updatedAt': '2024-11-24T06:43:12.545Z', 'action': {'id': '35', 'name': 'Get email id', 'type': 'GET...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.437" level="INFO">${action} = {'id': '35', 'name': 'Get email id', 'type': 'GET_TEXT', 'xpath': '//p[text()="EMAIL"]', 'valueRege': '', 'projectId': '4', 'createdAt': '2024-11-23T19:18:23.510Z', 'updatedAt': '2024-11-24T08:38:42.2...</msg>
<status status="PASS" starttime="20241124 14:29:35.436" endtime="20241124 14:29:35.437"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.437" endtime="20241124 14:29:35.438"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241124 14:29:35.439" level="INFO">${input} = {'id': '32', 'actionId': '35', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-23T19:18:23.679Z', 'updatedAt': '2024-11-23T19:18:23.679Z'}</msg>
<status status="PASS" starttime="20241124 14:29:35.439" endtime="20241124 14:29:35.439"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.441" endtime="20241124 14:29:35.441"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.441" endtime="20241124 14:29:35.441"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.440" endtime="20241124 14:29:35.442"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.439" endtime="20241124 14:29:35.442"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.444" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241124 14:29:35.443" endtime="20241124 14:29:35.444"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:35.445" endtime="20241124 14:29:35.445"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.444" endtime="20241124 14:29:35.445"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241124 14:29:35.447" endtime="20241124 14:29:35.447"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.446" endtime="20241124 14:29:35.448"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.452" endtime="20241124 14:29:35.452"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.448" endtime="20241124 14:29:35.452"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.456" endtime="20241124 14:29:35.457"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.460" endtime="20241124 14:29:35.460"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.452" endtime="20241124 14:29:35.461"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.464" endtime="20241124 14:29:35.465"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.461" endtime="20241124 14:29:35.465"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.470" endtime="20241124 14:29:35.470"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.465" endtime="20241124 14:29:35.471"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.475" endtime="20241124 14:29:35.475"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.471" endtime="20241124 14:29:35.475"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.477" endtime="20241124 14:29:35.478"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.476" endtime="20241124 14:29:35.478"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.482" endtime="20241124 14:29:35.482"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.483" endtime="20241124 14:29:35.483"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.483" endtime="20241124 14:29:35.483"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.484" endtime="20241124 14:29:35.484"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.483" endtime="20241124 14:29:35.484"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.482" endtime="20241124 14:29:35.484"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.479" endtime="20241124 14:29:35.484"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:35.493" endtime="20241124 14:29:35.493"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.498" endtime="20241124 14:29:35.498"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.485" endtime="20241124 14:29:35.498"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.500" endtime="20241124 14:29:35.500"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.501" endtime="20241124 14:29:35.501"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.500" endtime="20241124 14:29:35.501"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.501" endtime="20241124 14:29:35.501"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.501" endtime="20241124 14:29:35.501"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.500" endtime="20241124 14:29:35.501"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.499" endtime="20241124 14:29:35.501"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241124 14:29:35.507" endtime="20241124 14:29:35.507"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.510" endtime="20241124 14:29:35.510"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.502" endtime="20241124 14:29:35.510"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.513" endtime="20241124 14:29:35.514"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.514" endtime="20241124 14:29:35.514"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.514" endtime="20241124 14:29:35.514"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.515" endtime="20241124 14:29:35.515"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.515" endtime="20241124 14:29:35.515"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.514" endtime="20241124 14:29:35.515"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.511" endtime="20241124 14:29:35.515"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241124 14:29:35.525" level="INFO">Waited for Element with selector //p[text()="EMAIL"] at state attached</msg>
<status status="PASS" starttime="20241124 14:29:35.521" endtime="20241124 14:29:35.525"/>
</kw>
<msg timestamp="20241124 14:29:35.525" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.521" endtime="20241124 14:29:35.525"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:35.525" endtime="20241124 14:29:35.526"/>
</return>
<status status="PASS" starttime="20241124 14:29:35.521" endtime="20241124 14:29:35.526"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.526" endtime="20241124 14:29:35.526"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.526" endtime="20241124 14:29:35.526"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.526" endtime="20241124 14:29:35.526"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.521" endtime="20241124 14:29:35.526"/>
</try>
<msg timestamp="20241124 14:29:35.526" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.520" endtime="20241124 14:29:35.526"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241124 14:29:35.527" endtime="20241124 14:29:35.527"/>
</return>
<status status="PASS" starttime="20241124 14:29:35.519" endtime="20241124 14:29:35.527"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241124 14:29:35.527" endtime="20241124 14:29:35.527"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.527" endtime="20241124 14:29:35.527"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.519" endtime="20241124 14:29:35.527"/>
</try>
<msg timestamp="20241124 14:29:35.527" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.519" endtime="20241124 14:29:35.527"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.530" endtime="20241124 14:29:35.530"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.530" endtime="20241124 14:29:35.530"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.530" endtime="20241124 14:29:35.530"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.530" endtime="20241124 14:29:35.530"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.528" endtime="20241124 14:29:35.530"/>
</kw>
<status status="PASS" starttime="20241124 14:29:35.519" endtime="20241124 14:29:35.530"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241124 14:29:35.538" level="INFO">Property: 'EMAIL'</msg>
<msg timestamp="20241124 14:29:35.538" level="INFO">${property} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:29:35.530" endtime="20241124 14:29:35.538"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241124 14:29:35.539" endtime="20241124 14:29:35.539"/>
</return>
<status status="PASS" starttime="20241124 14:29:35.530" endtime="20241124 14:29:35.539"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.539" endtime="20241124 14:29:35.539"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.539" endtime="20241124 14:29:35.539"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.539" endtime="20241124 14:29:35.539"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.530" endtime="20241124 14:29:35.539"/>
</try>
<msg timestamp="20241124 14:29:35.540" level="INFO">${value} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:29:35.517" endtime="20241124 14:29:35.540"/>
</kw>
<status status="PASS" starttime="20241124 14:29:35.515" endtime="20241124 14:29:35.540"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241124 14:29:35.544" endtime="20241124 14:29:35.544"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.544" endtime="20241124 14:29:35.544"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.540" endtime="20241124 14:29:35.544"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.444" endtime="20241124 14:29:35.544"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.545" endtime="20241124 14:29:35.546"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241124 14:29:35.546" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241124 14:29:35.546" endtime="20241124 14:29:35.546"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241124 14:29:35.546" endtime="20241124 14:29:35.546"/>
</return>
<msg timestamp="20241124 14:29:35.546" level="INFO">${value} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:29:35.442" endtime="20241124 14:29:35.546"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.547" level="INFO">${key} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:35.547" endtime="20241124 14:29:35.547"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '12', 'testCaseId': '27', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:47::flowActionSequenceId:52', 'target': 'testCaseFlowSequenceId:46::flowActionSequenceId:42', 'cust...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.548" level="INFO">${source} = testCaseFlowSequenceId:47::flowActionSequenceId:52</msg>
<status status="PASS" starttime="20241124 14:29:35.548" endtime="20241124 14:29:35.548"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.548" level="INFO">${target} = testCaseFlowSequenceId:46::flowActionSequenceId:42</msg>
<status status="PASS" starttime="20241124 14:29:35.548" endtime="20241124 14:29:35.548"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.549" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.548" endtime="20241124 14:29:35.549"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.549" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241124 14:29:35.549" endtime="20241124 14:29:35.549"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.549" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241124 14:29:35.549" endtime="20241124 14:29:35.549"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.550" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241124 14:29:35.549" endtime="20241124 14:29:35.550"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.550" level="INFO">${errorMessage} = Email mismatch</msg>
<status status="PASS" starttime="20241124 14:29:35.550" endtime="20241124 14:29:35.550"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:35.550" endtime="20241124 14:29:35.550"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:35.552" endtime="20241124 14:29:35.552"/>
</kw>
<msg timestamp="20241124 14:29:35.552" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.552" endtime="20241124 14:29:35.552"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.553" level="INFO">${values} = EMAIL</msg>
<status status="PASS" starttime="20241124 14:29:35.553" endtime="20241124 14:29:35.553"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.553" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.553" endtime="20241124 14:29:35.553"/>
</kw>
<status status="PASS" starttime="20241124 14:29:35.553" endtime="20241124 14:29:35.554"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.554" endtime="20241124 14:29:35.554"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.554" endtime="20241124 14:29:35.554"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.553" endtime="20241124 14:29:35.554"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.553" endtime="20241124 14:29:35.554"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.552" endtime="20241124 14:29:35.554"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:35.554" endtime="20241124 14:29:35.554"/>
</return>
<msg timestamp="20241124 14:29:35.554" level="INFO">${is_source_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.551" endtime="20241124 14:29:35.554"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241124 14:29:35.556" endtime="20241124 14:29:35.556"/>
</kw>
<msg timestamp="20241124 14:29:35.556" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.556" endtime="20241124 14:29:35.556"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.557" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241124 14:29:35.557" endtime="20241124 14:29:35.557"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241124 14:29:35.558" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.557" endtime="20241124 14:29:35.558"/>
</kw>
<status status="PASS" starttime="20241124 14:29:35.557" endtime="20241124 14:29:35.558"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.558" endtime="20241124 14:29:35.558"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.558" endtime="20241124 14:29:35.558"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.557" endtime="20241124 14:29:35.558"/>
</if>
<status status="PASS" starttime="20241124 14:29:35.557" endtime="20241124 14:29:35.558"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.556" endtime="20241124 14:29:35.558"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241124 14:29:35.558" endtime="20241124 14:29:35.558"/>
</return>
<msg timestamp="20241124 14:29:35.558" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241124 14:29:35.555" endtime="20241124 14:29:35.559"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:35.559" endtime="20241124 14:29:35.559"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.559" endtime="20241124 14:29:35.559"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.559" endtime="20241124 14:29:35.559"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.560" endtime="20241124 14:29:35.561"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:35.561" endtime="20241124 14:29:35.561"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.560" endtime="20241124 14:29:35.561"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.562" endtime="20241124 14:29:35.563"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241124 14:29:35.563" endtime="20241124 14:29:35.563"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.561" endtime="20241124 14:29:35.563"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.560" endtime="20241124 14:29:35.563"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.560" endtime="20241124 14:29:35.564"/>
</branch>
<status status="PASS" starttime="20241124 14:29:35.560" endtime="20241124 14:29:35.564"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<msg timestamp="20241124 14:29:35.565" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:29:35.564" endtime="20241124 14:29:35.565"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.565" endtime="20241124 14:29:35.566"/>
</return>
<status status="FAIL" starttime="20241124 14:29:35.564" endtime="20241124 14:29:35.566"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.566" endtime="20241124 14:29:35.566"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.566" endtime="20241124 14:29:35.566"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.566" endtime="20241124 14:29:35.566"/>
</branch>
<status status="FAIL" starttime="20241124 14:29:35.564" endtime="20241124 14:29:35.566"/>
</if>
<status status="FAIL" starttime="20241124 14:29:35.564" endtime="20241124 14:29:35.566"/>
</branch>
<status status="FAIL" starttime="20241124 14:29:35.564" endtime="20241124 14:29:35.566"/>
</if>
<status status="FAIL" starttime="20241124 14:29:35.559" endtime="20241124 14:29:35.567"/>
</branch>
<status status="FAIL" starttime="20241124 14:29:35.559" endtime="20241124 14:29:35.567"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241124 14:29:35.567" endtime="20241124 14:29:35.567"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.567" endtime="20241124 14:29:35.567"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.567" endtime="20241124 14:29:35.567"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.568" endtime="20241124 14:29:35.568"/>
</kw>
<status status="NOT RUN" starttime="20241124 14:29:35.568" endtime="20241124 14:29:35.568"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.568" endtime="20241124 14:29:35.568"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<kw name="Log To Console" library="BuiltIn">
<arg>${ACCUMULATION}-${key}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.568" endtime="20241124 14:29:35.568"/>
</kw>
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.568" endtime="20241124 14:29:35.569"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.569" endtime="20241124 14:29:35.569"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.568" endtime="20241124 14:29:35.569"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.569" endtime="20241124 14:29:35.569"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241124 14:29:35.569" endtime="20241124 14:29:35.569"/>
</return>
<status status="NOT RUN" starttime="20241124 14:29:35.569" endtime="20241124 14:29:35.569"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.568" endtime="20241124 14:29:35.569"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.568" endtime="20241124 14:29:35.569"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.568" endtime="20241124 14:29:35.569"/>
</if>
<status status="NOT RUN" starttime="20241124 14:29:35.567" endtime="20241124 14:29:35.569"/>
</branch>
<status status="NOT RUN" starttime="20241124 14:29:35.567" endtime="20241124 14:29:35.570"/>
</if>
<status status="FAIL" starttime="20241124 14:29:35.547" endtime="20241124 14:29:35.570"/>
</iter>
<status status="FAIL" starttime="20241124 14:29:35.547" endtime="20241124 14:29:35.570"/>
</for>
<status status="FAIL" starttime="20241124 14:29:35.546" endtime="20241124 14:29:35.571"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241124 14:29:35.571" endtime="20241124 14:29:35.571"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<status status="NOT RUN" starttime="20241124 14:29:35.571" endtime="20241124 14:29:35.571"/>
</kw>
<status status="FAIL" starttime="20241124 14:29:35.436" endtime="20241124 14:29:35.571"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.572" endtime="20241124 14:29:35.572"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${action}[xpath]</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241124 14:29:35.574" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '311', 'status': 'FAILED', 'actionName': 'Get email id', 'actionType': 'GET_TEXT', 'actionXpath': '//p[text()="EMAIL"]', 'inputValue': '', 'errorMessage': 'Email mismat...</msg>
<status status="PASS" starttime="20241124 14:29:35.573" endtime="20241124 14:29:35.574"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241124 14:29:35.575" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "311", "status": "FAILED", "actionName": "Get email id", "actionType": "GET_TEXT", "actionXpath": "//p[text()=\"EMAIL\"]", "inputValue": "", "errorMessage": "Email mism...</msg>
<status status="PASS" starttime="20241124 14:29:35.575" endtime="20241124 14:29:35.575"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241124 14:29:35.598" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241124 14:29:35.598" level="INFO">${producer_response} = &lt;function delivery_report at 0x000001A4C1A28430&gt;</msg>
<status status="PASS" starttime="20241124 14:29:35.575" endtime="20241124 14:29:35.598"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.598" endtime="20241124 14:29:35.599"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241124 14:29:35.599" endtime="20241124 14:29:35.599"/>
</return>
<status status="PASS" starttime="20241124 14:29:35.574" endtime="20241124 14:29:35.599"/>
</kw>
<status status="PASS" starttime="20241124 14:29:35.572" endtime="20241124 14:29:35.599"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Error occurred:${exception}===&gt;</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.600" endtime="20241124 14:29:35.600"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>${exception}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20241124 14:29:35.601" level="FAIL">Email mismatch: EMAIL != bharani@ideas2it.com</msg>
<status status="FAIL" starttime="20241124 14:29:35.601" endtime="20241124 14:29:35.601"/>
</kw>
<status status="FAIL" starttime="20241124 14:29:35.600" endtime="20241124 14:29:35.602"/>
</kw>
<status status="FAIL" starttime="20241124 14:29:35.571" endtime="20241124 14:29:35.602"/>
</branch>
<status status="FAIL" starttime="20241124 14:29:35.436" endtime="20241124 14:29:35.602"/>
</try>
<status status="FAIL" starttime="20241124 14:29:35.435" endtime="20241124 14:29:35.602"/>
</iter>
<status status="FAIL" starttime="20241124 14:29:34.612" endtime="20241124 14:29:35.603"/>
</for>
<status status="FAIL" starttime="20241124 14:29:34.612" endtime="20241124 14:29:35.603"/>
</branch>
<status status="FAIL" starttime="20241124 14:29:34.612" endtime="20241124 14:29:35.603"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<status status="NOT RUN" starttime="20241124 14:29:35.603" endtime="20241124 14:29:35.603"/>
</kw>
<status status="FAIL" starttime="20241124 14:29:34.603" endtime="20241124 14:29:35.604"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241124 14:29:35.604" endtime="20241124 14:29:35.604"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>