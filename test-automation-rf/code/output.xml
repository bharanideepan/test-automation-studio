<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 5.0.1 (Python 3.9.20 on win32)" generated="20241125 10:51:08.724" rpa="true" schemaversion="3">
<suite id="s1" name="Start" source="C:\Users\Admin\Documents\Hackathon\Test Automation Studio\Test-automation-studio-projects\test-automation-rf\code\robots\start.robot">
<test id="s1-t1" name="initialize-fb-worker" line="42">
<kw name="execute-functional-block">
<tag>to-initialize-library</tag>
<doc>To execute fb</doc>
<while condition="'${TERMINATION_FLAG}' == 'False'">
<iter>
<kw name="launch-browser" library="COMP_BrowserContext">
<kw name="New Browser" library="RPA.Browser.Playwright">
<arg>chromium</arg>
<arg>headless=False</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new playwright Browser with specified options.</doc>
<msg timestamp="20241125 10:51:16.019" level="INFO">{"browser": "chromium", "headless": false, "devtools": false, "handleSIGHUP": true, "handleSIGINT": true, "handleSIGTERM": true, "slowMo": 0.0, "timeout": 30000.0, "deprecated_pos_args": [], "tracesDir": "C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\1f3166c8-2aff-410c-967e-1072090e1802"}</msg>
<msg timestamp="20241125 10:51:17.178" level="INFO">Successfully created browser with options: {"browser":"chromium","headless":false,"devtools":false,"handleSIGHUP":true,"handleSIGINT":true,"handleSIGTERM":true,"slowMo":0,"timeout":30000,"deprecated_pos_args":[],"tracesDir":"C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\1f3166c8-2aff-410c-967e-1072090e1802"}</msg>
<status status="PASS" starttime="20241125 10:51:16.019" endtime="20241125 10:51:17.178"/>
</kw>
<kw name="New Context" library="RPA.Browser.Playwright">
<arg>viewport={'width': 1280, 'height': 720}</arg>
<arg>acceptDownloads=True</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new BrowserContext with specified options.</doc>
<msg timestamp="20241125 10:51:17.182" level="INFO">{
  "acceptDownloads": true,
  "bypassCSP": false,
  "forcedColors": "none",
  "hideRfBrowser": false,
  "ignoreHTTPSErrors": false,
  "javaScriptEnabled": true,
  "offline": false,
  "reducedMotion": "no-preference",
  "viewport": {
    "width": 1280,
    "height": 720
  },
  "deprecated_pos_args": []
}</msg>
<msg timestamp="20241125 10:51:17.211" level="INFO">Successfully created context. </msg>
<msg timestamp="20241125 10:51:17.211" level="INFO">{'acceptDownloads': True, 'bypassCSP': False, 'forcedColors': 'none', 'hideRfBrowser': False, 'ignoreHTTPSErrors': False, 'javaScriptEnabled': True, 'offline': False, 'reducedMotion': 'no-preference', 'viewport': {'width': 1280, 'height': 720}, 'deprecated_pos_args': []}</msg>
<status status="PASS" starttime="20241125 10:51:17.179" endtime="20241125 10:51:17.211"/>
</kw>
<kw name="Set Browser Timeout" library="RPA.Browser.Playwright">
<arg>${browser_timeout}</arg>
<tag>Config</tag>
<tag>Setter</tag>
<doc>Sets the timeout used by most input and getter keywords.</doc>
<msg timestamp="20241125 10:51:17.220" level="INFO">Set timeout to: 20000</msg>
<status status="PASS" starttime="20241125 10:51:17.212" endtime="20241125 10:51:17.220"/>
</kw>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>https://www.google.com/</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241125 10:51:19.437" level="INFO">Successfully initialized new page object and opened url: https://www.google.com/</msg>
<msg timestamp="20241125 10:51:19.437" level="INFO">${page_id} = {'page_id': 'page=e30bfac3-7642-4389-8b16-45e82cec6e4c', 'video_path': ''}</msg>
<status status="PASS" starttime="20241125 10:51:17.221" endtime="20241125 10:51:19.437"/>
</kw>
<status status="PASS" starttime="20241125 10:51:16.018" endtime="20241125 10:51:19.438"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Polling message===&gt;</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:51:19.438" endtime="20241125 10:51:19.439"/>
</kw>
<kw name="Get A Command" library="CommandConsumer">
<var>${json}</var>
<arg>${5}</arg>
<msg timestamp="20241125 10:52:43.887" level="INFO">${json} = {'type': 'START_RUN', 'payload': {'testCaseRun': {'id': '22', 'testCaseId': '2', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-25T05:22:43.516Z', 'createdAt': '2024-11-25T05:22:43.516Z', 'errorMes...</msg>
<status status="PASS" starttime="20241125 10:51:19.440" endtime="20241125 10:52:43.887"/>
</kw>
<if>
<branch type="IF" condition="'${json}[type]' == 'KILL'">
<break>
<status status="NOT RUN" starttime="20241125 10:52:43.887" endtime="20241125 10:52:43.888"/>
</break>
<status status="NOT RUN" starttime="20241125 10:52:43.887" endtime="20241125 10:52:43.888"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.887" endtime="20241125 10:52:43.888"/>
</if>
<try>
<branch type="TRY">
<kw name="execute-test-case">
<arg>${json}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Data=&gt; ${input}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:43.889" endtime="20241125 10:52:43.896"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_type_exists}</var>
<arg>${input}</arg>
<arg>type</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:43.899" endtime="20241125 10:52:43.899"/>
</kw>
<msg timestamp="20241125 10:52:43.900" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.899" endtime="20241125 10:52:43.900"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.904" level="INFO">${values} = START_RUN</msg>
<status status="PASS" starttime="20241125 10:52:43.904" endtime="20241125 10:52:43.904"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.905" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.905" endtime="20241125 10:52:43.905"/>
</kw>
<status status="PASS" starttime="20241125 10:52:43.905" endtime="20241125 10:52:43.905"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:43.905" endtime="20241125 10:52:43.906"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:43.905" endtime="20241125 10:52:43.906"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.904" endtime="20241125 10:52:43.906"/>
</if>
<status status="PASS" starttime="20241125 10:52:43.903" endtime="20241125 10:52:43.906"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.900" endtime="20241125 10:52:43.906"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:43.906" endtime="20241125 10:52:43.906"/>
</return>
<msg timestamp="20241125 10:52:43.906" level="INFO">${is_type_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.898" endtime="20241125 10:52:43.906"/>
</kw>
<if>
<branch type="IF" condition="$is_type_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Type not exists in the input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:43.907" endtime="20241125 10:52:43.907"/>
</kw>
<return>
<status status="NOT RUN" starttime="20241125 10:52:43.908" endtime="20241125 10:52:43.908"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:43.907" endtime="20241125 10:52:43.908"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.906" endtime="20241125 10:52:43.908"/>
</if>
<if>
<branch type="IF" condition="'${input}[type]' == '${COMMAND_TYPE_START_RUN}'">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCase</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:43.914" endtime="20241125 10:52:43.914"/>
</kw>
<msg timestamp="20241125 10:52:43.915" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.913" endtime="20241125 10:52:43.915"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.916" level="INFO">${values} = {'id': '2', 'name': 'Check profile information', 'projectId': '1', 'createdAt': '2024-11-25T05:22:01.491Z', 'updatedAt': '2024-11-25T05:22:01.491Z', 'testCaseFlowSequences': [{'id': '4', 'testCaseId':...</msg>
<status status="PASS" starttime="20241125 10:52:43.916" endtime="20241125 10:52:43.916"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.918" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.917" endtime="20241125 10:52:43.918"/>
</kw>
<status status="PASS" starttime="20241125 10:52:43.917" endtime="20241125 10:52:43.918"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:43.918" endtime="20241125 10:52:43.918"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:43.918" endtime="20241125 10:52:43.918"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.917" endtime="20241125 10:52:43.919"/>
</if>
<status status="PASS" starttime="20241125 10:52:43.915" endtime="20241125 10:52:43.919"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.915" endtime="20241125 10:52:43.919"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:43.919" endtime="20241125 10:52:43.919"/>
</return>
<msg timestamp="20241125 10:52:43.919" level="INFO">${is_test_case_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.912" endtime="20241125 10:52:43.919"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_run_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCaseRun</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:43.923" endtime="20241125 10:52:43.924"/>
</kw>
<msg timestamp="20241125 10:52:43.924" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.923" endtime="20241125 10:52:43.924"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.926" level="INFO">${values} = {'id': '22', 'testCaseId': '2', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-25T05:22:43.516Z', 'createdAt': '2024-11-25T05:22:43.516Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241125 10:52:43.926" endtime="20241125 10:52:43.926"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.927" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.927" endtime="20241125 10:52:43.927"/>
</kw>
<status status="PASS" starttime="20241125 10:52:43.927" endtime="20241125 10:52:43.927"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:43.928" endtime="20241125 10:52:43.928"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:43.928" endtime="20241125 10:52:43.928"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.926" endtime="20241125 10:52:43.928"/>
</if>
<status status="PASS" starttime="20241125 10:52:43.925" endtime="20241125 10:52:43.928"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.925" endtime="20241125 10:52:43.928"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:43.928" endtime="20241125 10:52:43.928"/>
</return>
<msg timestamp="20241125 10:52:43.928" level="INFO">${is_test_case_run_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.922" endtime="20241125 10:52:43.928"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_exists == $False or $is_test_case_run_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Testcase or TestCaseRun data not available in input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:43.929" endtime="20241125 10:52:43.929"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:43.929" endtime="20241125 10:52:43.929"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.929" endtime="20241125 10:52:43.929"/>
</if>
<kw name="Set Variable" library="BuiltIn">
<var>${testCase}</var>
<arg>${input}[payload][testCase]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.930" level="INFO">${testCase} = {'id': '2', 'name': 'Check profile information', 'projectId': '1', 'createdAt': '2024-11-25T05:22:01.491Z', 'updatedAt': '2024-11-25T05:22:01.491Z', 'testCaseFlowSequences': [{'id': '4', 'testCaseId':...</msg>
<status status="PASS" starttime="20241125 10:52:43.929" endtime="20241125 10:52:43.930"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${testCaseRun}</var>
<arg>${input}[payload][testCaseRun]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.930" level="INFO">${testCaseRun} = {'id': '22', 'testCaseId': '2', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-25T05:22:43.516Z', 'createdAt': '2024-11-25T05:22:43.516Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241125 10:52:43.930" endtime="20241125 10:52:43.930"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${assertions}</var>
<arg>${testCase}[assertions]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.931" level="INFO">${assertions} = []</msg>
<status status="PASS" starttime="20241125 10:52:43.930" endtime="20241125 10:52:43.931"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Name: ${testCase}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:43.931" endtime="20241125 10:52:43.931"/>
</kw>
<try>
<branch type="TRY">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_flow_sequences_exists}</var>
<arg>${testCase}</arg>
<arg>testCaseFlowSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:43.935" endtime="20241125 10:52:43.935"/>
</kw>
<msg timestamp="20241125 10:52:43.936" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.935" endtime="20241125 10:52:43.936"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.936" level="INFO">${values} = [{'id': '4', 'testCaseId': '2', 'flowId': '1', 'order': 0, 'createdAt': '2024-11-25T05:22:01.703Z', 'updatedAt': '2024-11-25T05:22:01.703Z', 'flow': {'id': '1', 'name': 'Login', 'projectId': '1', 'cre...</msg>
<status status="PASS" starttime="20241125 10:52:43.936" endtime="20241125 10:52:43.936"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.937" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.937" endtime="20241125 10:52:43.937"/>
</kw>
<status status="PASS" starttime="20241125 10:52:43.937" endtime="20241125 10:52:43.937"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:43.937" endtime="20241125 10:52:43.937"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:43.937" endtime="20241125 10:52:43.938"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.936" endtime="20241125 10:52:43.938"/>
</if>
<status status="PASS" starttime="20241125 10:52:43.936" endtime="20241125 10:52:43.938"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.936" endtime="20241125 10:52:43.938"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:43.938" endtime="20241125 10:52:43.938"/>
</return>
<msg timestamp="20241125 10:52:43.938" level="INFO">${is_test_case_flow_sequences_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.935" endtime="20241125 10:52:43.938"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${test_case_run_response_message}</var>
<arg>testCaseRunId=${testCaseRun}[id]</arg>
<arg>status=STARTED</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:43.939" level="INFO">${test_case_run_response_message} = {'testCaseRunId': '22', 'status': 'STARTED'}</msg>
<status status="PASS" starttime="20241125 10:52:43.938" endtime="20241125 10:52:43.939"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${test_case_run_response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:52:43.940" level="INFO">${json_response} = {"testCaseRunId": "22", "status": "STARTED"}</msg>
<status status="PASS" starttime="20241125 10:52:43.939" endtime="20241125 10:52:43.940"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:52:43.948" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:52:43.948" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:52:43.941" endtime="20241125 10:52:43.948"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:43.949" endtime="20241125 10:52:43.949"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:52:43.950" endtime="20241125 10:52:43.950"/>
</return>
<status status="PASS" starttime="20241125 10:52:43.939" endtime="20241125 10:52:43.950"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_flow_sequences_exists">
<kw name="Create Dictionary" library="BuiltIn">
<var>${ACCUMULATION}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:43.951" level="INFO">${ACCUMULATION} = {}</msg>
<status status="PASS" starttime="20241125 10:52:43.950" endtime="20241125 10:52:43.951"/>
</kw>
<for flavor="IN">
<var>${testCaseFlowSequence}</var>
<value>@{testCase}[testCaseFlowSequences]</value>
<iter>
<var name="${testCaseFlowSequence}">{'id': '4', 'testCaseId': '2', 'flowId': '1', 'order': 0, 'createdAt': '2024-11-25T05:22:01.703Z', 'updatedAt': '2024-11-25T05:22:01.703Z', 'flow': {'id': '1', 'name': 'Login', 'projectId': '1', 'crea...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.952" level="INFO">${flow} = {'id': '1', 'name': 'Login', 'projectId': '1', 'createdAt': '2024-11-24T16:52:08.694Z', 'updatedAt': '2024-11-24T17:34:15.823Z', 'flowActionSequences': [{'id': '8', 'actionId': '9', 'flowId': '1', 'or...</msg>
<status status="PASS" starttime="20241125 10:52:43.952" endtime="20241125 10:52:43.952"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:43.952" endtime="20241125 10:52:43.953"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:43.958" endtime="20241125 10:52:43.959"/>
</kw>
<msg timestamp="20241125 10:52:43.959" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.956" endtime="20241125 10:52:43.959"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.961" level="INFO">${values} = [{'id': '8', 'actionId': '9', 'flowId': '1', 'order': 0, 'createdAt': '2024-11-24T17:32:34.803Z', 'updatedAt': '2024-11-24T17:34:15.591Z', 'action': {'id': '9', 'name': 'Launch browser', 'type': 'LAUN...</msg>
<status status="PASS" starttime="20241125 10:52:43.960" endtime="20241125 10:52:43.961"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.962" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.962" endtime="20241125 10:52:43.962"/>
</kw>
<status status="PASS" starttime="20241125 10:52:43.961" endtime="20241125 10:52:43.962"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:43.962" endtime="20241125 10:52:43.963"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:43.962" endtime="20241125 10:52:43.963"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.961" endtime="20241125 10:52:43.963"/>
</if>
<status status="PASS" starttime="20241125 10:52:43.960" endtime="20241125 10:52:43.963"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.960" endtime="20241125 10:52:43.963"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:43.963" endtime="20241125 10:52:43.963"/>
</return>
<msg timestamp="20241125 10:52:43.963" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:43.955" endtime="20241125 10:52:43.963"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '8', 'actionId': '9', 'flowId': '1', 'order': 0, 'createdAt': '2024-11-24T17:32:34.803Z', 'updatedAt': '2024-11-24T17:34:15.591Z', 'action': {'id': '9', 'name': 'Launch browser', 'type': 'LAUNC...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.965" level="INFO">${action} = {'id': '9', 'name': 'Launch browser', 'type': 'LAUNCH_BROWSER', 'selectorI': None, 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T17:32:06.229Z', 'updatedAt': '2024-11-24T17:32:06.229Z', ...</msg>
<status status="PASS" starttime="20241125 10:52:43.964" endtime="20241125 10:52:43.965"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:43.969" endtime="20241125 10:52:43.970"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:52:43.971" level="INFO">${input} = {'id': '9', 'actionId': '9', 'name': 'Input 01', 'value': 'https://iassistant.ideas2it.com/login', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T17:32:06.579Z', 'updatedAt': '202...</msg>
<status status="PASS" starttime="20241125 10:52:43.971" endtime="20241125 10:52:43.971"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:43.972" endtime="20241125 10:52:43.972"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:43.972" endtime="20241125 10:52:43.972"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:43.972" endtime="20241125 10:52:43.973"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.971" endtime="20241125 10:52:43.973"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:43.978" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241125 10:52:43.978" endtime="20241125 10:52:43.978"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>${url}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241125 10:52:46.327" level="INFO">Successfully initialized new page object and opened url: https://iassistant.ideas2it.com/login</msg>
<msg timestamp="20241125 10:52:46.327" level="INFO">${page_id} = {'page_id': 'page=b4a370be-88c0-458b-b334-96028496753b', 'video_path': ''}</msg>
<status status="PASS" starttime="20241125 10:52:43.979" endtime="20241125 10:52:46.327"/>
</kw>
<kw name="Switch Page" library="RPA.Browser.Playwright">
<arg>${page_id}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Switches the active browser page to another open page by ``id`` or ``NEW``.</doc>
<msg timestamp="20241125 10:52:46.328" level="INFO">Switching to page {'page_id': 'page=b4a370be-88c0-458b-b334-96028496753b', 'video_path': ''},context CURRENT, browser CURRENT</msg>
<msg timestamp="20241125 10:52:46.347" level="INFO">[
  {
    "type": "chromium",
    "id": "browser=c9e09cab-8935-43da-8711-4d5eb240f212",
    "contexts": [
      {
        "type": "context",
        "id": "context=8235911a-0f92-4ec2-96ed-72cb0fbc7184",
        "activePage": "page=b4a370be-88c0-458b-b334-96028496753b",
        "pages": [
          {
            "type": "page",
            "title": "Google",
            "url": "https://www.google.com/",
            "id": "page=e30bfac3-7642-4389-8b16-45e82cec6e4c",
            "timestamp": 1732512077.636
          },
          {
            "type": "page",
            "title": "iAssistant",
            "url": "https://iassistant.ideas2it.com/login",
            "id": "page=b4a370be-88c0-458b-b334-96028496753b",
            "timestamp": 1732512164.029
          }
        ]
      }
    ],
    "activeContext": "context=8235911a-0f92-4ec2-96ed-72cb0fbc7184",
    "activeBrowser": true
  }
]</msg>
<msg timestamp="20241125 10:52:46.355" level="INFO">Successfully changed active page</msg>
<status status="PASS" starttime="20241125 10:52:46.327" endtime="20241125 10:52:46.355"/>
</kw>
<status status="PASS" starttime="20241125 10:52:43.979" endtime="20241125 10:52:46.356"/>
</kw>
<status status="PASS" starttime="20241125 10:52:43.978" endtime="20241125 10:52:46.356"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:46.356" endtime="20241125 10:52:46.356"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.356" endtime="20241125 10:52:46.356"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.359" endtime="20241125 10:52:46.359"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.357" endtime="20241125 10:52:46.359"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.361" endtime="20241125 10:52:46.361"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.362" endtime="20241125 10:52:46.363"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.359" endtime="20241125 10:52:46.363"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.364" endtime="20241125 10:52:46.364"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.363" endtime="20241125 10:52:46.364"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.366" endtime="20241125 10:52:46.366"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.364" endtime="20241125 10:52:46.366"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.368" endtime="20241125 10:52:46.368"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.366" endtime="20241125 10:52:46.368"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.369" endtime="20241125 10:52:46.369"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.368" endtime="20241125 10:52:46.369"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.370" endtime="20241125 10:52:46.370"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.370" endtime="20241125 10:52:46.370"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.370" endtime="20241125 10:52:46.370"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.371" endtime="20241125 10:52:46.371"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.371" endtime="20241125 10:52:46.371"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.370" endtime="20241125 10:52:46.371"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.369" endtime="20241125 10:52:46.371"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:46.376" endtime="20241125 10:52:46.376"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.379" endtime="20241125 10:52:46.380"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.372" endtime="20241125 10:52:46.380"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.381" endtime="20241125 10:52:46.381"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.382" endtime="20241125 10:52:46.382"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.381" endtime="20241125 10:52:46.382"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.382" endtime="20241125 10:52:46.382"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.382" endtime="20241125 10:52:46.382"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.381" endtime="20241125 10:52:46.382"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.380" endtime="20241125 10:52:46.382"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:46.389" endtime="20241125 10:52:46.389"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.393" endtime="20241125 10:52:46.393"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.383" endtime="20241125 10:52:46.393"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.395" endtime="20241125 10:52:46.395"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.395" endtime="20241125 10:52:46.395"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.395" endtime="20241125 10:52:46.395"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.396" endtime="20241125 10:52:46.396"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.395" endtime="20241125 10:52:46.396"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.395" endtime="20241125 10:52:46.396"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.393" endtime="20241125 10:52:46.396"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.398" endtime="20241125 10:52:46.398"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.396" endtime="20241125 10:52:46.398"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:52:46.404" endtime="20241125 10:52:46.405"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.405" endtime="20241125 10:52:46.405"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.399" endtime="20241125 10:52:46.405"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.978" endtime="20241125 10:52:46.405"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:46.405" endtime="20241125 10:52:46.406"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:52:46.407" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:52:46.406" endtime="20241125 10:52:46.407"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:52:46.407" endtime="20241125 10:52:46.407"/>
</return>
<msg timestamp="20241125 10:52:46.408" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241125 10:52:43.976" endtime="20241125 10:52:46.408"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:46.409" level="INFO">${key} = testCaseFlowSequenceId:4::flowActionSequenceId:8</msg>
<status status="PASS" starttime="20241125 10:52:46.409" endtime="20241125 10:52:46.409"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}"/>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.410" endtime="20241125 10:52:46.410"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.410" endtime="20241125 10:52:46.410"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.410" endtime="20241125 10:52:46.410"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.410" endtime="20241125 10:52:46.410"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.410" endtime="20241125 10:52:46.410"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.411" endtime="20241125 10:52:46.411"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.411" endtime="20241125 10:52:46.411"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.411" endtime="20241125 10:52:46.411"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.412" endtime="20241125 10:52:46.412"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.414" endtime="20241125 10:52:46.414"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:46.414" endtime="20241125 10:52:46.414"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.414" endtime="20241125 10:52:46.414"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.414" endtime="20241125 10:52:46.415"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.415" endtime="20241125 10:52:46.415"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.415" endtime="20241125 10:52:46.415"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.415" endtime="20241125 10:52:46.415"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.416" endtime="20241125 10:52:46.416"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.416" endtime="20241125 10:52:46.416"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.415" endtime="20241125 10:52:46.416"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.415" endtime="20241125 10:52:46.416"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.415" endtime="20241125 10:52:46.416"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.415" endtime="20241125 10:52:46.416"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.417" endtime="20241125 10:52:46.417"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:46.417" endtime="20241125 10:52:46.417"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.416" endtime="20241125 10:52:46.417"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.417" endtime="20241125 10:52:46.417"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:46.417" endtime="20241125 10:52:46.417"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.417" endtime="20241125 10:52:46.417"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.416" endtime="20241125 10:52:46.417"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.416" endtime="20241125 10:52:46.417"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.416" endtime="20241125 10:52:46.418"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.414" endtime="20241125 10:52:46.418"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.414" endtime="20241125 10:52:46.418"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:46.418" endtime="20241125 10:52:46.418"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.418" endtime="20241125 10:52:46.418"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.418" endtime="20241125 10:52:46.418"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.418" endtime="20241125 10:52:46.418"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.418" endtime="20241125 10:52:46.419"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.418" endtime="20241125 10:52:46.419"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.419" endtime="20241125 10:52:46.419"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:46.419" endtime="20241125 10:52:46.419"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.419" endtime="20241125 10:52:46.419"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.419" endtime="20241125 10:52:46.419"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:46.419" endtime="20241125 10:52:46.420"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.419" endtime="20241125 10:52:46.420"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.419" endtime="20241125 10:52:46.420"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.419" endtime="20241125 10:52:46.420"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.419" endtime="20241125 10:52:46.420"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.418" endtime="20241125 10:52:46.420"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.418" endtime="20241125 10:52:46.420"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.409" endtime="20241125 10:52:46.420"/>
</iter>
<status status="NOT RUN" starttime="20241125 10:52:46.409" endtime="20241125 10:52:46.420"/>
</for>
<msg timestamp="20241125 10:52:46.420" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:52:46.408" endtime="20241125 10:52:46.420"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:46.420" endtime="20241125 10:52:46.421"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:52:46.427" level="FAIL">Dictionary does not contain key 'selector'.</msg>
<status status="FAIL" starttime="20241125 10:52:46.426" endtime="20241125 10:52:46.427"/>
</kw>
<msg timestamp="20241125 10:52:46.427" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:52:46.426" endtime="20241125 10:52:46.427"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.427" endtime="20241125 10:52:46.427"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.428" endtime="20241125 10:52:46.428"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.427" endtime="20241125 10:52:46.428"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.428" endtime="20241125 10:52:46.428"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.428" endtime="20241125 10:52:46.429"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.427" endtime="20241125 10:52:46.429"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.427" endtime="20241125 10:52:46.429"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.427" endtime="20241125 10:52:46.429"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:46.429" endtime="20241125 10:52:46.429"/>
</return>
<msg timestamp="20241125 10:52:46.429" level="INFO">${is_selector_exists} = False</msg>
<status status="PASS" starttime="20241125 10:52:46.425" endtime="20241125 10:52:46.429"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.429" endtime="20241125 10:52:46.429"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.429" endtime="20241125 10:52:46.429"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:46.430" level="INFO">${xpath} = </msg>
<status status="PASS" starttime="20241125 10:52:46.430" endtime="20241125 10:52:46.430"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.430" endtime="20241125 10:52:46.430"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.429" endtime="20241125 10:52:46.430"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:46.431" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '114', 'status': 'COMPLETED', 'actionName': 'Launch browser', 'actionType': 'LAUNCH_BROWSER', 'actionXpath': '', 'inputValue': 'https://iassistant.ideas2it.com/login', ...</msg>
<status status="PASS" starttime="20241125 10:52:46.431" endtime="20241125 10:52:46.431"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:52:46.432" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "114", "status": "COMPLETED", "actionName": "Launch browser", "actionType": "LAUNCH_BROWSER", "actionXpath": "", "inputValue": "https://iassistant.ideas2it.com/login", ...</msg>
<status status="PASS" starttime="20241125 10:52:46.432" endtime="20241125 10:52:46.432"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:52:46.461" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:52:46.461" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:52:46.433" endtime="20241125 10:52:46.461"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:46.462" endtime="20241125 10:52:46.463"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:52:46.463" endtime="20241125 10:52:46.463"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.431" endtime="20241125 10:52:46.463"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.421" endtime="20241125 10:52:46.464"/>
</kw>
<status status="PASS" starttime="20241125 10:52:43.964" endtime="20241125 10:52:46.464"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.465" endtime="20241125 10:52:46.465"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:52:46.465" endtime="20241125 10:52:46.465"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.465" endtime="20241125 10:52:46.466"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.464" endtime="20241125 10:52:46.466"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.964" endtime="20241125 10:52:46.466"/>
</try>
<status status="PASS" starttime="20241125 10:52:43.964" endtime="20241125 10:52:46.466"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '2', 'actionId': '2', 'flowId': '1', 'order': 1, 'createdAt': '2024-11-24T16:52:08.810Z', 'updatedAt': '2024-11-24T17:34:15.602Z', 'action': {'id': '2', 'name': 'Set username', 'type': 'TYPE_TE...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:46.467" level="INFO">${action} = {'id': '2', 'name': 'Set username', 'type': 'TYPE_TEXT', 'selectorI': '1', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:43:45.668Z', 'updatedAt': '2024-11-24T16:43:45.668Z', 'selecto...</msg>
<status status="PASS" starttime="20241125 10:52:46.466" endtime="20241125 10:52:46.467"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:46.467" endtime="20241125 10:52:46.467"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:52:46.468" level="INFO">${input} = {'id': '2', 'actionId': '2', 'name': 'Bharani', 'value': 'bharani@ideas2it.com', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:43:45.923Z', 'updatedAt': '2024-11-24T16:44:01.1...</msg>
<status status="PASS" starttime="20241125 10:52:46.467" endtime="20241125 10:52:46.468"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.468" endtime="20241125 10:52:46.468"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.469" endtime="20241125 10:52:46.469"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.468" endtime="20241125 10:52:46.469"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.468" endtime="20241125 10:52:46.469"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:46.470" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:52:46.469" endtime="20241125 10:52:46.470"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:46.470" endtime="20241125 10:52:46.470"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.470" endtime="20241125 10:52:46.470"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:46.471" endtime="20241125 10:52:46.471"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.471" endtime="20241125 10:52:46.472"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.474" endtime="20241125 10:52:46.474"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.472" endtime="20241125 10:52:46.475"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.477" endtime="20241125 10:52:46.477"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.478" endtime="20241125 10:52:46.479"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.475" endtime="20241125 10:52:46.479"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.480" endtime="20241125 10:52:46.480"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.479" endtime="20241125 10:52:46.480"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.482" endtime="20241125 10:52:46.482"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.480" endtime="20241125 10:52:46.482"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>selector::${selector}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:46.484" endtime="20241125 10:52:46.485"/>
</kw>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="username"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.518" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:52:46.491" endtime="20241125 10:52:46.518"/>
</kw>
<msg timestamp="20241125 10:52:46.518" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.490" endtime="20241125 10:52:46.518"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.518" endtime="20241125 10:52:46.519"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.490" endtime="20241125 10:52:46.519"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.519" endtime="20241125 10:52:46.520"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.520" endtime="20241125 10:52:46.520"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.519" endtime="20241125 10:52:46.520"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.490" endtime="20241125 10:52:46.520"/>
</try>
<msg timestamp="20241125 10:52:46.521" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.489" endtime="20241125 10:52:46.521"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.521" endtime="20241125 10:52:46.521"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.488" endtime="20241125 10:52:46.521"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.522" endtime="20241125 10:52:46.522"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.522" endtime="20241125 10:52:46.522"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.488" endtime="20241125 10:52:46.522"/>
</try>
<msg timestamp="20241125 10:52:46.523" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.487" endtime="20241125 10:52:46.523"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.527" endtime="20241125 10:52:46.527"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.527" endtime="20241125 10:52:46.527"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.526" endtime="20241125 10:52:46.527"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.526" endtime="20241125 10:52:46.528"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.525" endtime="20241125 10:52:46.528"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.487" endtime="20241125 10:52:46.528"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.546" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:52:46.540" endtime="20241125 10:52:46.546"/>
</kw>
<msg timestamp="20241125 10:52:46.546" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.539" endtime="20241125 10:52:46.546"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.546" endtime="20241125 10:52:46.546"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.539" endtime="20241125 10:52:46.547"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.547" endtime="20241125 10:52:46.547"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.547" endtime="20241125 10:52:46.547"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.547" endtime="20241125 10:52:46.547"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.539" endtime="20241125 10:52:46.547"/>
</try>
<msg timestamp="20241125 10:52:46.547" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.538" endtime="20241125 10:52:46.547"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.548" endtime="20241125 10:52:46.548"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.537" endtime="20241125 10:52:46.548"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.548" endtime="20241125 10:52:46.548"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.548" endtime="20241125 10:52:46.548"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.537" endtime="20241125 10:52:46.548"/>
</try>
<msg timestamp="20241125 10:52:46.548" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.536" endtime="20241125 10:52:46.548"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.550" endtime="20241125 10:52:46.550"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.550" endtime="20241125 10:52:46.551"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.550" endtime="20241125 10:52:46.551"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.550" endtime="20241125 10:52:46.551"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.549" endtime="20241125 10:52:46.551"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.536" endtime="20241125 10:52:46.551"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:52:46.572" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241125 10:52:46.573" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241125 10:52:46.552" endtime="20241125 10:52:46.573"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:52:46.573" endtime="20241125 10:52:46.573"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.551" endtime="20241125 10:52:46.573"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.574" endtime="20241125 10:52:46.574"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.574" endtime="20241125 10:52:46.574"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.573" endtime="20241125 10:52:46.574"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.551" endtime="20241125 10:52:46.574"/>
</try>
<msg timestamp="20241125 10:52:46.575" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241125 10:52:46.534" endtime="20241125 10:52:46.575"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.577" endtime="20241125 10:52:46.577"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.577" endtime="20241125 10:52:46.577"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.577" endtime="20241125 10:52:46.577"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.577" endtime="20241125 10:52:46.577"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.576" endtime="20241125 10:52:46.577"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.532" endtime="20241125 10:52:46.577"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.578" endtime="20241125 10:52:46.578"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.578" endtime="20241125 10:52:46.578"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.532" endtime="20241125 10:52:46.578"/>
</try>
<status status="PASS" starttime="20241125 10:52:46.531" endtime="20241125 10:52:46.578"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.587" level="INFO">Waited for Element with selector //input[@id="username"] at state visible</msg>
<status status="PASS" starttime="20241125 10:52:46.582" endtime="20241125 10:52:46.587"/>
</kw>
<msg timestamp="20241125 10:52:46.588" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.582" endtime="20241125 10:52:46.588"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.588" endtime="20241125 10:52:46.588"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.581" endtime="20241125 10:52:46.588"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.588" endtime="20241125 10:52:46.589"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.589" endtime="20241125 10:52:46.589"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.588" endtime="20241125 10:52:46.589"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.581" endtime="20241125 10:52:46.589"/>
</try>
<msg timestamp="20241125 10:52:46.589" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.581" endtime="20241125 10:52:46.589"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.590" endtime="20241125 10:52:46.590"/>
</return>
<msg timestamp="20241125 10:52:46.590" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.580" endtime="20241125 10:52:46.590"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.592" endtime="20241125 10:52:46.592"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.592" endtime="20241125 10:52:46.592"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.592" endtime="20241125 10:52:46.592"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.592" endtime="20241125 10:52:46.593"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.591" endtime="20241125 10:52:46.593"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.580" endtime="20241125 10:52:46.593"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.485" endtime="20241125 10:52:46.593"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.611" level="INFO">Waited for Element with selector //input[@id="username"] at state editable</msg>
<status status="PASS" starttime="20241125 10:52:46.597" endtime="20241125 10:52:46.611"/>
</kw>
<msg timestamp="20241125 10:52:46.611" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.597" endtime="20241125 10:52:46.611"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.611" endtime="20241125 10:52:46.612"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.597" endtime="20241125 10:52:46.612"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.612" endtime="20241125 10:52:46.612"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.612" endtime="20241125 10:52:46.612"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.612" endtime="20241125 10:52:46.612"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.597" endtime="20241125 10:52:46.612"/>
</try>
<msg timestamp="20241125 10:52:46.613" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.596" endtime="20241125 10:52:46.613"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.613" endtime="20241125 10:52:46.613"/>
</return>
<msg timestamp="20241125 10:52:46.613" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.595" endtime="20241125 10:52:46.613"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.615" endtime="20241125 10:52:46.615"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.616" endtime="20241125 10:52:46.616"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.615" endtime="20241125 10:52:46.616"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.615" endtime="20241125 10:52:46.616"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.614" endtime="20241125 10:52:46.616"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.595" endtime="20241125 10:52:46.616"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:46.617" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:52:46.616" endtime="20241125 10:52:46.617"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="username"]: string</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.618" endtime="20241125 10:52:46.619"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.621" endtime="20241125 10:52:46.621"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.618" endtime="20241125 10:52:46.621"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:46.621" endtime="20241125 10:52:46.622"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.621" endtime="20241125 10:52:46.622"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.618" endtime="20241125 10:52:46.622"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241125 10:52:46.622" level="INFO">Fills the text 'bharani@ideas2it.com' in the given field.</msg>
<status status="PASS" starttime="20241125 10:52:46.622" endtime="20241125 10:52:46.651"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.622" endtime="20241125 10:52:46.651"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.652" endtime="20241125 10:52:46.652"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.652" endtime="20241125 10:52:46.652"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.652" endtime="20241125 10:52:46.652"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.622" endtime="20241125 10:52:46.652"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="username"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.668" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:52:46.662" endtime="20241125 10:52:46.668"/>
</kw>
<msg timestamp="20241125 10:52:46.668" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.661" endtime="20241125 10:52:46.668"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.668" endtime="20241125 10:52:46.668"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.661" endtime="20241125 10:52:46.668"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.669" endtime="20241125 10:52:46.669"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.669" endtime="20241125 10:52:46.669"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.668" endtime="20241125 10:52:46.669"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.661" endtime="20241125 10:52:46.669"/>
</try>
<msg timestamp="20241125 10:52:46.669" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.660" endtime="20241125 10:52:46.669"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.669" endtime="20241125 10:52:46.669"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.659" endtime="20241125 10:52:46.669"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.670" endtime="20241125 10:52:46.670"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.670" endtime="20241125 10:52:46.670"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.659" endtime="20241125 10:52:46.670"/>
</try>
<msg timestamp="20241125 10:52:46.670" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.659" endtime="20241125 10:52:46.670"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.674" endtime="20241125 10:52:46.674"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.674" endtime="20241125 10:52:46.674"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.673" endtime="20241125 10:52:46.674"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.673" endtime="20241125 10:52:46.674"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.672" endtime="20241125 10:52:46.675"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.658" endtime="20241125 10:52:46.675"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.689" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:52:46.682" endtime="20241125 10:52:46.689"/>
</kw>
<msg timestamp="20241125 10:52:46.689" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.682" endtime="20241125 10:52:46.689"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.689" endtime="20241125 10:52:46.690"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.682" endtime="20241125 10:52:46.690"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.690" endtime="20241125 10:52:46.690"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.690" endtime="20241125 10:52:46.690"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.690" endtime="20241125 10:52:46.690"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.682" endtime="20241125 10:52:46.690"/>
</try>
<msg timestamp="20241125 10:52:46.691" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.682" endtime="20241125 10:52:46.691"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.691" endtime="20241125 10:52:46.691"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.681" endtime="20241125 10:52:46.691"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.691" endtime="20241125 10:52:46.691"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.691" endtime="20241125 10:52:46.691"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.681" endtime="20241125 10:52:46.691"/>
</try>
<msg timestamp="20241125 10:52:46.691" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.680" endtime="20241125 10:52:46.691"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.693" endtime="20241125 10:52:46.693"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.693" endtime="20241125 10:52:46.694"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.693" endtime="20241125 10:52:46.694"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.693" endtime="20241125 10:52:46.694"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.692" endtime="20241125 10:52:46.694"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.680" endtime="20241125 10:52:46.694"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:52:46.703" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241125 10:52:46.703" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241125 10:52:46.694" endtime="20241125 10:52:46.703"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:52:46.703" endtime="20241125 10:52:46.703"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.694" endtime="20241125 10:52:46.703"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.704" endtime="20241125 10:52:46.704"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.704" endtime="20241125 10:52:46.704"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.703" endtime="20241125 10:52:46.704"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.694" endtime="20241125 10:52:46.704"/>
</try>
<msg timestamp="20241125 10:52:46.704" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241125 10:52:46.678" endtime="20241125 10:52:46.704"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.707" endtime="20241125 10:52:46.707"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.707" endtime="20241125 10:52:46.707"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.706" endtime="20241125 10:52:46.707"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.706" endtime="20241125 10:52:46.707"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.705" endtime="20241125 10:52:46.707"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.677" endtime="20241125 10:52:46.707"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.707" endtime="20241125 10:52:46.707"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.707" endtime="20241125 10:52:46.708"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.677" endtime="20241125 10:52:46.708"/>
</try>
<status status="PASS" starttime="20241125 10:52:46.677" endtime="20241125 10:52:46.708"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.717" level="INFO">Waited for Element with selector //input[@id="username"] at state visible</msg>
<status status="PASS" starttime="20241125 10:52:46.711" endtime="20241125 10:52:46.718"/>
</kw>
<msg timestamp="20241125 10:52:46.718" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.711" endtime="20241125 10:52:46.718"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.718" endtime="20241125 10:52:46.718"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.711" endtime="20241125 10:52:46.718"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.718" endtime="20241125 10:52:46.719"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.719" endtime="20241125 10:52:46.719"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.718" endtime="20241125 10:52:46.719"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.711" endtime="20241125 10:52:46.719"/>
</try>
<msg timestamp="20241125 10:52:46.719" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.711" endtime="20241125 10:52:46.719"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.719" endtime="20241125 10:52:46.719"/>
</return>
<msg timestamp="20241125 10:52:46.720" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.710" endtime="20241125 10:52:46.720"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.722" endtime="20241125 10:52:46.722"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.722" endtime="20241125 10:52:46.722"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.722" endtime="20241125 10:52:46.722"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.722" endtime="20241125 10:52:46.722"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.720" endtime="20241125 10:52:46.722"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.709" endtime="20241125 10:52:46.723"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.654" endtime="20241125 10:52:46.723"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.733" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:52:46.728" endtime="20241125 10:52:46.733"/>
</kw>
<msg timestamp="20241125 10:52:46.733" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.727" endtime="20241125 10:52:46.733"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.733" endtime="20241125 10:52:46.733"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.727" endtime="20241125 10:52:46.733"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.734" endtime="20241125 10:52:46.734"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.734" endtime="20241125 10:52:46.734"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.733" endtime="20241125 10:52:46.734"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.727" endtime="20241125 10:52:46.734"/>
</try>
<msg timestamp="20241125 10:52:46.734" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.727" endtime="20241125 10:52:46.734"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.734" endtime="20241125 10:52:46.734"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.726" endtime="20241125 10:52:46.735"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.735" endtime="20241125 10:52:46.735"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.735" endtime="20241125 10:52:46.735"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.726" endtime="20241125 10:52:46.735"/>
</try>
<msg timestamp="20241125 10:52:46.735" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.726" endtime="20241125 10:52:46.735"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.737" endtime="20241125 10:52:46.737"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.737" endtime="20241125 10:52:46.737"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.737" endtime="20241125 10:52:46.738"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.737" endtime="20241125 10:52:46.738"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.736" endtime="20241125 10:52:46.738"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.725" endtime="20241125 10:52:46.738"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:52:46.746" level="INFO">Property: 'bharani@ideas2it.com'</msg>
<msg timestamp="20241125 10:52:46.746" level="INFO">${property} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:52:46.738" endtime="20241125 10:52:46.746"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:52:46.747" endtime="20241125 10:52:46.747"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.738" endtime="20241125 10:52:46.747"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.747" endtime="20241125 10:52:46.747"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.747" endtime="20241125 10:52:46.747"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.747" endtime="20241125 10:52:46.747"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.738" endtime="20241125 10:52:46.747"/>
</try>
<msg timestamp="20241125 10:52:46.748" level="INFO">${fieldTextValue} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:52:46.724" endtime="20241125 10:52:46.748"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241125 10:52:46.748" endtime="20241125 10:52:46.748"/>
</return>
<msg timestamp="20241125 10:52:46.748" level="INFO">${populated_value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:52:46.653" endtime="20241125 10:52:46.748"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241125 10:52:46.754" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.750" endtime="20241125 10:52:46.754"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.754" endtime="20241125 10:52:46.755"/>
</return>
<msg timestamp="20241125 10:52:46.755" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.750" endtime="20241125 10:52:46.755"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.758" endtime="20241125 10:52:46.758"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.758" endtime="20241125 10:52:46.758"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.758" endtime="20241125 10:52:46.758"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.758" endtime="20241125 10:52:46.758"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.757" endtime="20241125 10:52:46.759"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.653" endtime="20241125 10:52:46.759"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.617" endtime="20241125 10:52:46.759"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.617" endtime="20241125 10:52:46.759"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.617" endtime="20241125 10:52:46.759"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.759" endtime="20241125 10:52:46.759"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.759" endtime="20241125 10:52:46.759"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.617" endtime="20241125 10:52:46.759"/>
</try>
<status status="PASS" starttime="20241125 10:52:46.484" endtime="20241125 10:52:46.759"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.482" endtime="20241125 10:52:46.759"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.760" endtime="20241125 10:52:46.760"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.759" endtime="20241125 10:52:46.760"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.761" endtime="20241125 10:52:46.761"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.762" endtime="20241125 10:52:46.762"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.761" endtime="20241125 10:52:46.762"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.762" endtime="20241125 10:52:46.762"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.762" endtime="20241125 10:52:46.762"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.761" endtime="20241125 10:52:46.762"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.760" endtime="20241125 10:52:46.762"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:46.766" endtime="20241125 10:52:46.766"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.768" endtime="20241125 10:52:46.769"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.762" endtime="20241125 10:52:46.769"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.769" endtime="20241125 10:52:46.770"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.770" endtime="20241125 10:52:46.770"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.770" endtime="20241125 10:52:46.770"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.770" endtime="20241125 10:52:46.770"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.770" endtime="20241125 10:52:46.770"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.770" endtime="20241125 10:52:46.770"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.769" endtime="20241125 10:52:46.771"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:46.775" endtime="20241125 10:52:46.775"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.778" endtime="20241125 10:52:46.778"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.771" endtime="20241125 10:52:46.778"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.779" endtime="20241125 10:52:46.779"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.779" endtime="20241125 10:52:46.779"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.779" endtime="20241125 10:52:46.779"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.779" endtime="20241125 10:52:46.780"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.779" endtime="20241125 10:52:46.780"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.779" endtime="20241125 10:52:46.780"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.778" endtime="20241125 10:52:46.780"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.782" endtime="20241125 10:52:46.782"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.780" endtime="20241125 10:52:46.782"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:52:46.787" endtime="20241125 10:52:46.787"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.787" endtime="20241125 10:52:46.788"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.782" endtime="20241125 10:52:46.788"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.470" endtime="20241125 10:52:46.788"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:46.788" endtime="20241125 10:52:46.789"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:52:46.789" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:52:46.789" endtime="20241125 10:52:46.789"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:52:46.789" endtime="20241125 10:52:46.789"/>
</return>
<msg timestamp="20241125 10:52:46.790" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:52:46.469" endtime="20241125 10:52:46.790"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:46.791" level="INFO">${key} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:52:46.790" endtime="20241125 10:52:46.791"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}"/>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.791" endtime="20241125 10:52:46.791"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.791" endtime="20241125 10:52:46.791"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.791" endtime="20241125 10:52:46.791"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.792" endtime="20241125 10:52:46.792"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.792" endtime="20241125 10:52:46.792"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.792" endtime="20241125 10:52:46.792"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.792" endtime="20241125 10:52:46.792"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.792" endtime="20241125 10:52:46.792"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.793" endtime="20241125 10:52:46.793"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.794" endtime="20241125 10:52:46.794"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:46.795" endtime="20241125 10:52:46.795"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.794" endtime="20241125 10:52:46.795"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.794" endtime="20241125 10:52:46.795"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.795" endtime="20241125 10:52:46.795"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.795" endtime="20241125 10:52:46.795"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.795" endtime="20241125 10:52:46.795"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.795" endtime="20241125 10:52:46.795"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.796" endtime="20241125 10:52:46.796"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.795" endtime="20241125 10:52:46.796"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.795" endtime="20241125 10:52:46.796"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.795" endtime="20241125 10:52:46.796"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.795" endtime="20241125 10:52:46.796"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.796" endtime="20241125 10:52:46.796"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:46.796" endtime="20241125 10:52:46.796"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.796" endtime="20241125 10:52:46.796"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.796" endtime="20241125 10:52:46.797"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:46.797" endtime="20241125 10:52:46.797"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.796" endtime="20241125 10:52:46.797"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.796" endtime="20241125 10:52:46.797"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.796" endtime="20241125 10:52:46.797"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.796" endtime="20241125 10:52:46.797"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.794" endtime="20241125 10:52:46.798"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.794" endtime="20241125 10:52:46.798"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:46.798" endtime="20241125 10:52:46.798"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.798" endtime="20241125 10:52:46.798"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.798" endtime="20241125 10:52:46.798"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.799" endtime="20241125 10:52:46.799"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.799" endtime="20241125 10:52:46.799"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.799" endtime="20241125 10:52:46.799"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.800" endtime="20241125 10:52:46.800"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:46.800" endtime="20241125 10:52:46.800"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.800" endtime="20241125 10:52:46.800"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.801" endtime="20241125 10:52:46.801"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:46.801" endtime="20241125 10:52:46.801"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.800" endtime="20241125 10:52:46.801"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.799" endtime="20241125 10:52:46.801"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.799" endtime="20241125 10:52:46.801"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.799" endtime="20241125 10:52:46.801"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.798" endtime="20241125 10:52:46.801"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:46.798" endtime="20241125 10:52:46.801"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:46.791" endtime="20241125 10:52:46.801"/>
</iter>
<status status="NOT RUN" starttime="20241125 10:52:46.791" endtime="20241125 10:52:46.801"/>
</for>
<msg timestamp="20241125 10:52:46.802" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:52:46.790" endtime="20241125 10:52:46.802"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:46.802" endtime="20241125 10:52:46.802"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:46.807" endtime="20241125 10:52:46.808"/>
</kw>
<msg timestamp="20241125 10:52:46.808" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.807" endtime="20241125 10:52:46.808"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:46.809" level="INFO">${values} = {'id': '1', 'name': 'Username', 'xpath': '//input[@id="username"]', 'pageId': '1', 'createdAt': '2024-11-24T15:18:09.149Z', 'updatedAt': '2024-11-24T17:22:57.715Z'}</msg>
<status status="PASS" starttime="20241125 10:52:46.808" endtime="20241125 10:52:46.809"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:46.810" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.809" endtime="20241125 10:52:46.810"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.809" endtime="20241125 10:52:46.810"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.810" endtime="20241125 10:52:46.810"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.810" endtime="20241125 10:52:46.811"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.809" endtime="20241125 10:52:46.811"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.808" endtime="20241125 10:52:46.811"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.808" endtime="20241125 10:52:46.811"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:46.811" endtime="20241125 10:52:46.811"/>
</return>
<msg timestamp="20241125 10:52:46.811" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.806" endtime="20241125 10:52:46.811"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:46.814" level="INFO">${xpath} = //input[@id="username"]</msg>
<status status="PASS" starttime="20241125 10:52:46.813" endtime="20241125 10:52:46.814"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.812" endtime="20241125 10:52:46.814"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.814" endtime="20241125 10:52:46.814"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.814" endtime="20241125 10:52:46.814"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.812" endtime="20241125 10:52:46.815"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:46.817" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '115', 'status': 'COMPLETED', 'actionName': 'Set username', 'actionType': 'TYPE_TEXT', 'actionXpath': '//input[@id="username"]', 'inputValue': 'bharani@ideas2it.com', '...</msg>
<status status="PASS" starttime="20241125 10:52:46.815" endtime="20241125 10:52:46.817"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:52:46.818" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "115", "status": "COMPLETED", "actionName": "Set username", "actionType": "TYPE_TEXT", "actionXpath": "//input[@id=\"username\"]", "inputValue": "bharani@ideas2it.com",...</msg>
<status status="PASS" starttime="20241125 10:52:46.818" endtime="20241125 10:52:46.818"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:52:46.824" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:52:46.824" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:52:46.819" endtime="20241125 10:52:46.824"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:46.824" endtime="20241125 10:52:46.825"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:52:46.825" endtime="20241125 10:52:46.825"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.817" endtime="20241125 10:52:46.826"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.803" endtime="20241125 10:52:46.826"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.466" endtime="20241125 10:52:46.826"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.826" endtime="20241125 10:52:46.826"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:52:46.826" endtime="20241125 10:52:46.826"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.827" endtime="20241125 10:52:46.827"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.826" endtime="20241125 10:52:46.827"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.466" endtime="20241125 10:52:46.827"/>
</try>
<status status="PASS" starttime="20241125 10:52:46.466" endtime="20241125 10:52:46.827"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '3', 'actionId': '3', 'flowId': '1', 'order': 2, 'createdAt': '2024-11-24T16:52:08.811Z', 'updatedAt': '2024-11-24T17:34:15.617Z', 'action': {'id': '3', 'name': 'Set password', 'type': 'TYPE_TE...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:46.828" level="INFO">${action} = {'id': '3', 'name': 'Set password', 'type': 'TYPE_TEXT', 'selectorI': '2', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:44:31.460Z', 'updatedAt': '2024-11-24T16:44:31.460Z', 'selecto...</msg>
<status status="PASS" starttime="20241125 10:52:46.828" endtime="20241125 10:52:46.828"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:46.828" endtime="20241125 10:52:46.829"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:52:46.829" level="INFO">${input} = {'id': '3', 'actionId': '3', 'name': 'Bharani', 'value': 'vijaybharani', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:44:31.712Z', 'updatedAt': '2024-11-24T16:46:16.462Z'}</msg>
<status status="PASS" starttime="20241125 10:52:46.829" endtime="20241125 10:52:46.829"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.830" endtime="20241125 10:52:46.830"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.830" endtime="20241125 10:52:46.830"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.830" endtime="20241125 10:52:46.830"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.830" endtime="20241125 10:52:46.831"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:46.831" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:52:46.831" endtime="20241125 10:52:46.831"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:46.832" endtime="20241125 10:52:46.832"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.832" endtime="20241125 10:52:46.832"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:46.832" endtime="20241125 10:52:46.832"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.832" endtime="20241125 10:52:46.832"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.834" endtime="20241125 10:52:46.834"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.833" endtime="20241125 10:52:46.834"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.836" endtime="20241125 10:52:46.836"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.838" endtime="20241125 10:52:46.838"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.835" endtime="20241125 10:52:46.838"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.840" endtime="20241125 10:52:46.840"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.839" endtime="20241125 10:52:46.840"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.843" endtime="20241125 10:52:46.843"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.840" endtime="20241125 10:52:46.843"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>selector::${selector}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:46.847" endtime="20241125 10:52:46.848"/>
</kw>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=password: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.861" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:52:46.852" endtime="20241125 10:52:46.861"/>
</kw>
<msg timestamp="20241125 10:52:46.861" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.852" endtime="20241125 10:52:46.861"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.861" endtime="20241125 10:52:46.862"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.852" endtime="20241125 10:52:46.862"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.862" endtime="20241125 10:52:46.862"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.863" endtime="20241125 10:52:46.863"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.862" endtime="20241125 10:52:46.863"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.852" endtime="20241125 10:52:46.863"/>
</try>
<msg timestamp="20241125 10:52:46.863" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.851" endtime="20241125 10:52:46.863"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.863" endtime="20241125 10:52:46.863"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.850" endtime="20241125 10:52:46.864"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.864" endtime="20241125 10:52:46.864"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.864" endtime="20241125 10:52:46.864"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.850" endtime="20241125 10:52:46.864"/>
</try>
<msg timestamp="20241125 10:52:46.864" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.850" endtime="20241125 10:52:46.864"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.866" endtime="20241125 10:52:46.867"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.867" endtime="20241125 10:52:46.867"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.866" endtime="20241125 10:52:46.867"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.866" endtime="20241125 10:52:46.867"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.865" endtime="20241125 10:52:46.867"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.850" endtime="20241125 10:52:46.867"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.880" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:52:46.875" endtime="20241125 10:52:46.880"/>
</kw>
<msg timestamp="20241125 10:52:46.880" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.874" endtime="20241125 10:52:46.880"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.880" endtime="20241125 10:52:46.880"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.874" endtime="20241125 10:52:46.880"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.881" endtime="20241125 10:52:46.881"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.881" endtime="20241125 10:52:46.881"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.880" endtime="20241125 10:52:46.881"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.874" endtime="20241125 10:52:46.881"/>
</try>
<msg timestamp="20241125 10:52:46.881" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.874" endtime="20241125 10:52:46.881"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.881" endtime="20241125 10:52:46.881"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.873" endtime="20241125 10:52:46.882"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.882" endtime="20241125 10:52:46.882"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.882" endtime="20241125 10:52:46.882"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.873" endtime="20241125 10:52:46.882"/>
</try>
<msg timestamp="20241125 10:52:46.882" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.873" endtime="20241125 10:52:46.882"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.884" endtime="20241125 10:52:46.884"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.884" endtime="20241125 10:52:46.884"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.884" endtime="20241125 10:52:46.884"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.884" endtime="20241125 10:52:46.884"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.883" endtime="20241125 10:52:46.885"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.872" endtime="20241125 10:52:46.885"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:52:46.895" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241125 10:52:46.896" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241125 10:52:46.885" endtime="20241125 10:52:46.896"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:52:46.896" endtime="20241125 10:52:46.896"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.885" endtime="20241125 10:52:46.896"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.896" endtime="20241125 10:52:46.896"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.896" endtime="20241125 10:52:46.896"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.896" endtime="20241125 10:52:46.896"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.885" endtime="20241125 10:52:46.897"/>
</try>
<msg timestamp="20241125 10:52:46.897" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241125 10:52:46.870" endtime="20241125 10:52:46.897"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.899" endtime="20241125 10:52:46.899"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.899" endtime="20241125 10:52:46.899"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.899" endtime="20241125 10:52:46.899"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.898" endtime="20241125 10:52:46.899"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.898" endtime="20241125 10:52:46.899"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.869" endtime="20241125 10:52:46.899"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.900" endtime="20241125 10:52:46.900"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.899" endtime="20241125 10:52:46.900"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.869" endtime="20241125 10:52:46.900"/>
</try>
<status status="PASS" starttime="20241125 10:52:46.869" endtime="20241125 10:52:46.900"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.910" level="INFO">Waited for Element with selector id=password at state visible</msg>
<status status="PASS" starttime="20241125 10:52:46.904" endtime="20241125 10:52:46.910"/>
</kw>
<msg timestamp="20241125 10:52:46.910" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.903" endtime="20241125 10:52:46.910"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.910" endtime="20241125 10:52:46.911"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.903" endtime="20241125 10:52:46.911"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.911" endtime="20241125 10:52:46.911"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.911" endtime="20241125 10:52:46.911"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.911" endtime="20241125 10:52:46.911"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.903" endtime="20241125 10:52:46.911"/>
</try>
<msg timestamp="20241125 10:52:46.912" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.903" endtime="20241125 10:52:46.912"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.912" endtime="20241125 10:52:46.912"/>
</return>
<msg timestamp="20241125 10:52:46.912" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.902" endtime="20241125 10:52:46.912"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.914" endtime="20241125 10:52:46.914"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.914" endtime="20241125 10:52:46.914"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.914" endtime="20241125 10:52:46.914"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.914" endtime="20241125 10:52:46.914"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.913" endtime="20241125 10:52:46.914"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.901" endtime="20241125 10:52:46.915"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.848" endtime="20241125 10:52:46.915"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.931" level="INFO">Waited for Element with selector id=password at state editable</msg>
<status status="PASS" starttime="20241125 10:52:46.918" endtime="20241125 10:52:46.931"/>
</kw>
<msg timestamp="20241125 10:52:46.931" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.918" endtime="20241125 10:52:46.931"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.931" endtime="20241125 10:52:46.932"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.918" endtime="20241125 10:52:46.932"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.932" endtime="20241125 10:52:46.932"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.932" endtime="20241125 10:52:46.932"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.932" endtime="20241125 10:52:46.932"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.918" endtime="20241125 10:52:46.932"/>
</try>
<msg timestamp="20241125 10:52:46.933" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.917" endtime="20241125 10:52:46.933"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.933" endtime="20241125 10:52:46.933"/>
</return>
<msg timestamp="20241125 10:52:46.933" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.917" endtime="20241125 10:52:46.933"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.935" endtime="20241125 10:52:46.935"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.935" endtime="20241125 10:52:46.935"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.935" endtime="20241125 10:52:46.935"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.935" endtime="20241125 10:52:46.935"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.934" endtime="20241125 10:52:46.935"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.916" endtime="20241125 10:52:46.936"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:46.936" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:52:46.936" endtime="20241125 10:52:46.936"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=password: string</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.938" endtime="20241125 10:52:46.938"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.940" endtime="20241125 10:52:46.940"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.938" endtime="20241125 10:52:46.940"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:46.940" endtime="20241125 10:52:46.940"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.940" endtime="20241125 10:52:46.940"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.938" endtime="20241125 10:52:46.940"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241125 10:52:46.941" level="INFO">Fills the text 'vijaybharani' in the given field.</msg>
<status status="PASS" starttime="20241125 10:52:46.941" endtime="20241125 10:52:46.958"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.940" endtime="20241125 10:52:46.958"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.958" endtime="20241125 10:52:46.959"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.959" endtime="20241125 10:52:46.959"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.958" endtime="20241125 10:52:46.959"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.940" endtime="20241125 10:52:46.959"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=password: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.969" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:52:46.964" endtime="20241125 10:52:46.969"/>
</kw>
<msg timestamp="20241125 10:52:46.969" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.964" endtime="20241125 10:52:46.969"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.969" endtime="20241125 10:52:46.969"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.964" endtime="20241125 10:52:46.969"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.970" endtime="20241125 10:52:46.970"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.970" endtime="20241125 10:52:46.970"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.970" endtime="20241125 10:52:46.970"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.964" endtime="20241125 10:52:46.970"/>
</try>
<msg timestamp="20241125 10:52:46.971" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.963" endtime="20241125 10:52:46.971"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.971" endtime="20241125 10:52:46.971"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.962" endtime="20241125 10:52:46.971"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.971" endtime="20241125 10:52:46.971"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.971" endtime="20241125 10:52:46.971"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.962" endtime="20241125 10:52:46.971"/>
</try>
<msg timestamp="20241125 10:52:46.971" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.962" endtime="20241125 10:52:46.971"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.973" endtime="20241125 10:52:46.973"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.974" endtime="20241125 10:52:46.974"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.973" endtime="20241125 10:52:46.974"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.973" endtime="20241125 10:52:46.974"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.972" endtime="20241125 10:52:46.974"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.962" endtime="20241125 10:52:46.974"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:46.985" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:52:46.981" endtime="20241125 10:52:46.985"/>
</kw>
<msg timestamp="20241125 10:52:46.985" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.981" endtime="20241125 10:52:46.985"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.985" endtime="20241125 10:52:46.986"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.981" endtime="20241125 10:52:46.986"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.986" endtime="20241125 10:52:46.986"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.986" endtime="20241125 10:52:46.986"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.986" endtime="20241125 10:52:46.986"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.980" endtime="20241125 10:52:46.986"/>
</try>
<msg timestamp="20241125 10:52:46.987" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.980" endtime="20241125 10:52:46.987"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:46.987" endtime="20241125 10:52:46.987"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.979" endtime="20241125 10:52:46.987"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:46.987" endtime="20241125 10:52:46.987"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:46.987" endtime="20241125 10:52:46.987"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.979" endtime="20241125 10:52:46.987"/>
</try>
<msg timestamp="20241125 10:52:46.988" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:46.979" endtime="20241125 10:52:46.988"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.991" endtime="20241125 10:52:46.991"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:46.991" endtime="20241125 10:52:46.991"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:46.990" endtime="20241125 10:52:46.991"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.990" endtime="20241125 10:52:46.991"/>
</if>
<status status="PASS" starttime="20241125 10:52:46.989" endtime="20241125 10:52:46.991"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.978" endtime="20241125 10:52:46.991"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:52:46.999" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241125 10:52:47.000" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241125 10:52:46.992" endtime="20241125 10:52:47.000"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:52:47.000" endtime="20241125 10:52:47.000"/>
</return>
<status status="PASS" starttime="20241125 10:52:46.991" endtime="20241125 10:52:47.000"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.000" endtime="20241125 10:52:47.000"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.000" endtime="20241125 10:52:47.001"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.000" endtime="20241125 10:52:47.001"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.991" endtime="20241125 10:52:47.001"/>
</try>
<msg timestamp="20241125 10:52:47.001" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241125 10:52:46.977" endtime="20241125 10:52:47.001"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.003" endtime="20241125 10:52:47.003"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.004" endtime="20241125 10:52:47.004"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.003" endtime="20241125 10:52:47.004"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.003" endtime="20241125 10:52:47.004"/>
</if>
<status status="PASS" starttime="20241125 10:52:47.002" endtime="20241125 10:52:47.004"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.976" endtime="20241125 10:52:47.004"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.004" endtime="20241125 10:52:47.004"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.004" endtime="20241125 10:52:47.004"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.976" endtime="20241125 10:52:47.005"/>
</try>
<status status="PASS" starttime="20241125 10:52:46.975" endtime="20241125 10:52:47.005"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:47.014" level="INFO">Waited for Element with selector id=password at state visible</msg>
<status status="PASS" starttime="20241125 10:52:47.009" endtime="20241125 10:52:47.014"/>
</kw>
<msg timestamp="20241125 10:52:47.015" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.009" endtime="20241125 10:52:47.015"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.015" endtime="20241125 10:52:47.015"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.008" endtime="20241125 10:52:47.015"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.015" endtime="20241125 10:52:47.015"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.015" endtime="20241125 10:52:47.016"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.015" endtime="20241125 10:52:47.016"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.008" endtime="20241125 10:52:47.016"/>
</try>
<msg timestamp="20241125 10:52:47.016" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.008" endtime="20241125 10:52:47.016"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.016" endtime="20241125 10:52:47.016"/>
</return>
<msg timestamp="20241125 10:52:47.016" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.007" endtime="20241125 10:52:47.016"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.018" endtime="20241125 10:52:47.018"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.019" endtime="20241125 10:52:47.019"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.018" endtime="20241125 10:52:47.019"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.018" endtime="20241125 10:52:47.019"/>
</if>
<status status="PASS" starttime="20241125 10:52:47.017" endtime="20241125 10:52:47.019"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.006" endtime="20241125 10:52:47.019"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.960" endtime="20241125 10:52:47.019"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:47.033" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:52:47.026" endtime="20241125 10:52:47.033"/>
</kw>
<msg timestamp="20241125 10:52:47.033" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.025" endtime="20241125 10:52:47.033"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.033" endtime="20241125 10:52:47.034"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.025" endtime="20241125 10:52:47.034"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.034" endtime="20241125 10:52:47.034"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.034" endtime="20241125 10:52:47.034"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.034" endtime="20241125 10:52:47.034"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.025" endtime="20241125 10:52:47.034"/>
</try>
<msg timestamp="20241125 10:52:47.035" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.025" endtime="20241125 10:52:47.035"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.035" endtime="20241125 10:52:47.035"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.023" endtime="20241125 10:52:47.035"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:47.035" endtime="20241125 10:52:47.035"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.035" endtime="20241125 10:52:47.035"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.023" endtime="20241125 10:52:47.035"/>
</try>
<msg timestamp="20241125 10:52:47.036" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.023" endtime="20241125 10:52:47.036"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.039" endtime="20241125 10:52:47.039"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.039" endtime="20241125 10:52:47.040"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.039" endtime="20241125 10:52:47.040"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.038" endtime="20241125 10:52:47.040"/>
</if>
<status status="PASS" starttime="20241125 10:52:47.037" endtime="20241125 10:52:47.040"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.022" endtime="20241125 10:52:47.040"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:52:47.049" level="INFO">Property: 'vijaybharani'</msg>
<msg timestamp="20241125 10:52:47.049" level="INFO">${property} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:52:47.040" endtime="20241125 10:52:47.049"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:52:47.050" endtime="20241125 10:52:47.050"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.040" endtime="20241125 10:52:47.050"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.050" endtime="20241125 10:52:47.050"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.050" endtime="20241125 10:52:47.050"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.050" endtime="20241125 10:52:47.050"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.040" endtime="20241125 10:52:47.050"/>
</try>
<msg timestamp="20241125 10:52:47.051" level="INFO">${fieldTextValue} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:52:47.020" endtime="20241125 10:52:47.051"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241125 10:52:47.051" endtime="20241125 10:52:47.051"/>
</return>
<msg timestamp="20241125 10:52:47.051" level="INFO">${populated_value} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:52:46.960" endtime="20241125 10:52:47.051"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241125 10:52:47.058" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.053" endtime="20241125 10:52:47.058"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.059" endtime="20241125 10:52:47.059"/>
</return>
<msg timestamp="20241125 10:52:47.059" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.052" endtime="20241125 10:52:47.059"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.062" endtime="20241125 10:52:47.062"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.062" endtime="20241125 10:52:47.062"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.062" endtime="20241125 10:52:47.063"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.062" endtime="20241125 10:52:47.063"/>
</if>
<status status="PASS" starttime="20241125 10:52:47.061" endtime="20241125 10:52:47.063"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.959" endtime="20241125 10:52:47.063"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.937" endtime="20241125 10:52:47.063"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.936" endtime="20241125 10:52:47.063"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.936" endtime="20241125 10:52:47.063"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.063" endtime="20241125 10:52:47.063"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.063" endtime="20241125 10:52:47.064"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.936" endtime="20241125 10:52:47.064"/>
</try>
<status status="PASS" starttime="20241125 10:52:46.847" endtime="20241125 10:52:47.064"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.844" endtime="20241125 10:52:47.064"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.065" endtime="20241125 10:52:47.065"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.064" endtime="20241125 10:52:47.065"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.066" endtime="20241125 10:52:47.066"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.066" endtime="20241125 10:52:47.066"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.066" endtime="20241125 10:52:47.066"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.066" endtime="20241125 10:52:47.066"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.066" endtime="20241125 10:52:47.066"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.066" endtime="20241125 10:52:47.067"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.065" endtime="20241125 10:52:47.067"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:47.072" endtime="20241125 10:52:47.072"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.075" endtime="20241125 10:52:47.075"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.067" endtime="20241125 10:52:47.075"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.076" endtime="20241125 10:52:47.076"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.076" endtime="20241125 10:52:47.076"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.076" endtime="20241125 10:52:47.076"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.076" endtime="20241125 10:52:47.077"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.076" endtime="20241125 10:52:47.077"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.076" endtime="20241125 10:52:47.077"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.075" endtime="20241125 10:52:47.077"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:47.082" endtime="20241125 10:52:47.082"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.084" endtime="20241125 10:52:47.084"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.077" endtime="20241125 10:52:47.084"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.085" endtime="20241125 10:52:47.085"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.086" endtime="20241125 10:52:47.086"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.085" endtime="20241125 10:52:47.086"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.086" endtime="20241125 10:52:47.086"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.086" endtime="20241125 10:52:47.086"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.085" endtime="20241125 10:52:47.086"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.084" endtime="20241125 10:52:47.086"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.090" endtime="20241125 10:52:47.090"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.086" endtime="20241125 10:52:47.090"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:52:47.095" endtime="20241125 10:52:47.095"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.095" endtime="20241125 10:52:47.095"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.090" endtime="20241125 10:52:47.096"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.832" endtime="20241125 10:52:47.096"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:47.096" endtime="20241125 10:52:47.096"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:52:47.097" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:52:47.096" endtime="20241125 10:52:47.097"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:52:47.097" endtime="20241125 10:52:47.097"/>
</return>
<msg timestamp="20241125 10:52:47.097" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:52:46.831" endtime="20241125 10:52:47.097"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.098" level="INFO">${key} = testCaseFlowSequenceId:4::flowActionSequenceId:3</msg>
<status status="PASS" starttime="20241125 10:52:47.098" endtime="20241125 10:52:47.098"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}"/>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.098" endtime="20241125 10:52:47.099"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.099" endtime="20241125 10:52:47.099"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.099" endtime="20241125 10:52:47.099"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.099" endtime="20241125 10:52:47.099"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.099" endtime="20241125 10:52:47.099"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.099" endtime="20241125 10:52:47.099"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.100" endtime="20241125 10:52:47.100"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.100" endtime="20241125 10:52:47.100"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.101" endtime="20241125 10:52:47.101"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.102" endtime="20241125 10:52:47.102"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:47.102" endtime="20241125 10:52:47.102"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.102" endtime="20241125 10:52:47.102"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.102" endtime="20241125 10:52:47.102"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.103" endtime="20241125 10:52:47.103"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:47.103" endtime="20241125 10:52:47.103"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.103" endtime="20241125 10:52:47.103"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.104" endtime="20241125 10:52:47.104"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:47.104" endtime="20241125 10:52:47.104"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.103" endtime="20241125 10:52:47.104"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.103" endtime="20241125 10:52:47.104"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.103" endtime="20241125 10:52:47.104"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.102" endtime="20241125 10:52:47.104"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.105" endtime="20241125 10:52:47.105"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:47.105" endtime="20241125 10:52:47.105"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.104" endtime="20241125 10:52:47.105"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.105" endtime="20241125 10:52:47.106"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:47.106" endtime="20241125 10:52:47.106"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.105" endtime="20241125 10:52:47.106"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.104" endtime="20241125 10:52:47.106"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.104" endtime="20241125 10:52:47.106"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.104" endtime="20241125 10:52:47.106"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.102" endtime="20241125 10:52:47.106"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.102" endtime="20241125 10:52:47.106"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:47.107" endtime="20241125 10:52:47.107"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.107" endtime="20241125 10:52:47.107"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.107" endtime="20241125 10:52:47.107"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.107" endtime="20241125 10:52:47.107"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.107" endtime="20241125 10:52:47.107"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.107" endtime="20241125 10:52:47.107"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.108" endtime="20241125 10:52:47.108"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:47.108" endtime="20241125 10:52:47.108"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.108" endtime="20241125 10:52:47.108"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.108" endtime="20241125 10:52:47.108"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:47.108" endtime="20241125 10:52:47.108"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.108" endtime="20241125 10:52:47.109"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.108" endtime="20241125 10:52:47.109"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.108" endtime="20241125 10:52:47.109"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.108" endtime="20241125 10:52:47.109"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.107" endtime="20241125 10:52:47.109"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.106" endtime="20241125 10:52:47.109"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.098" endtime="20241125 10:52:47.109"/>
</iter>
<status status="NOT RUN" starttime="20241125 10:52:47.098" endtime="20241125 10:52:47.110"/>
</for>
<msg timestamp="20241125 10:52:47.110" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:52:47.097" endtime="20241125 10:52:47.110"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:47.110" endtime="20241125 10:52:47.111"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:47.115" endtime="20241125 10:52:47.115"/>
</kw>
<msg timestamp="20241125 10:52:47.115" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.114" endtime="20241125 10:52:47.115"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.116" level="INFO">${values} = {'id': '2', 'name': 'Password', 'xpath': 'id=password', 'pageId': '1', 'createdAt': '2024-11-24T16:43:05.032Z', 'updatedAt': '2024-11-24T17:01:06.183Z'}</msg>
<status status="PASS" starttime="20241125 10:52:47.115" endtime="20241125 10:52:47.116"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.116" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.116" endtime="20241125 10:52:47.116"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.116" endtime="20241125 10:52:47.116"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.117" endtime="20241125 10:52:47.117"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.116" endtime="20241125 10:52:47.117"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.116" endtime="20241125 10:52:47.117"/>
</if>
<status status="PASS" starttime="20241125 10:52:47.115" endtime="20241125 10:52:47.117"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.115" endtime="20241125 10:52:47.117"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:47.117" endtime="20241125 10:52:47.117"/>
</return>
<msg timestamp="20241125 10:52:47.117" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.114" endtime="20241125 10:52:47.117"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.118" level="INFO">${xpath} = id=password</msg>
<status status="PASS" starttime="20241125 10:52:47.118" endtime="20241125 10:52:47.118"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.117" endtime="20241125 10:52:47.118"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.118" endtime="20241125 10:52:47.118"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.118" endtime="20241125 10:52:47.118"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.117" endtime="20241125 10:52:47.118"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:47.119" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '116', 'status': 'COMPLETED', 'actionName': 'Set password', 'actionType': 'TYPE_TEXT', 'actionXpath': 'id=password', 'inputValue': 'vijaybharani', 'errorMessage': '', '...</msg>
<status status="PASS" starttime="20241125 10:52:47.118" endtime="20241125 10:52:47.119"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:52:47.121" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "116", "status": "COMPLETED", "actionName": "Set password", "actionType": "TYPE_TEXT", "actionXpath": "id=password", "inputValue": "vijaybharani", "errorMessage": "", "...</msg>
<status status="PASS" starttime="20241125 10:52:47.120" endtime="20241125 10:52:47.121"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:52:47.129" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:52:47.129" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:52:47.121" endtime="20241125 10:52:47.129"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:47.129" endtime="20241125 10:52:47.130"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:52:47.130" endtime="20241125 10:52:47.130"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.119" endtime="20241125 10:52:47.130"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.111" endtime="20241125 10:52:47.130"/>
</kw>
<status status="PASS" starttime="20241125 10:52:46.827" endtime="20241125 10:52:47.130"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.131" endtime="20241125 10:52:47.131"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:52:47.131" endtime="20241125 10:52:47.131"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.131" endtime="20241125 10:52:47.131"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.130" endtime="20241125 10:52:47.131"/>
</branch>
<status status="PASS" starttime="20241125 10:52:46.827" endtime="20241125 10:52:47.131"/>
</try>
<status status="PASS" starttime="20241125 10:52:46.827" endtime="20241125 10:52:47.131"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '4', 'actionId': '4', 'flowId': '1', 'order': 3, 'createdAt': '2024-11-24T16:52:08.811Z', 'updatedAt': '2024-11-24T17:34:15.605Z', 'action': {'id': '4', 'name': 'Click login button', 'type': 'C...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.132" level="INFO">${action} = {'id': '4', 'name': 'Click login button', 'type': 'CLICK', 'selectorI': '3', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:50:52.555Z', 'updatedAt': '2024-11-24T16:50:52.555Z', 'selec...</msg>
<status status="PASS" starttime="20241125 10:52:47.132" endtime="20241125 10:52:47.132"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:47.132" endtime="20241125 10:52:47.133"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:52:47.134" level="INFO">${input} = {'id': '4', 'actionId': '4', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:50:52.715Z', 'updatedAt': '2024-11-24T16:50:52.715Z'}</msg>
<status status="PASS" starttime="20241125 10:52:47.133" endtime="20241125 10:52:47.134"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.134" endtime="20241125 10:52:47.134"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.135" endtime="20241125 10:52:47.135"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.134" endtime="20241125 10:52:47.135"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.134" endtime="20241125 10:52:47.135"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.136" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:52:47.135" endtime="20241125 10:52:47.136"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:47.136" endtime="20241125 10:52:47.136"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.136" endtime="20241125 10:52:47.136"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:47.137" endtime="20241125 10:52:47.137"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.136" endtime="20241125 10:52:47.137"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:47.152" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state attached</msg>
<status status="PASS" starttime="20241125 10:52:47.147" endtime="20241125 10:52:47.152"/>
</kw>
<msg timestamp="20241125 10:52:47.152" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.146" endtime="20241125 10:52:47.152"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.152" endtime="20241125 10:52:47.153"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.146" endtime="20241125 10:52:47.153"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.153" endtime="20241125 10:52:47.153"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.153" endtime="20241125 10:52:47.153"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.153" endtime="20241125 10:52:47.154"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.146" endtime="20241125 10:52:47.154"/>
</try>
<msg timestamp="20241125 10:52:47.154" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.146" endtime="20241125 10:52:47.154"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.154" endtime="20241125 10:52:47.154"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.145" endtime="20241125 10:52:47.155"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:47.156" endtime="20241125 10:52:47.156"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.155" endtime="20241125 10:52:47.156"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.145" endtime="20241125 10:52:47.156"/>
</try>
<msg timestamp="20241125 10:52:47.157" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.145" endtime="20241125 10:52:47.158"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.161" endtime="20241125 10:52:47.161"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.161" endtime="20241125 10:52:47.161"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.161" endtime="20241125 10:52:47.161"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.160" endtime="20241125 10:52:47.161"/>
</if>
<status status="PASS" starttime="20241125 10:52:47.159" endtime="20241125 10:52:47.162"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.144" endtime="20241125 10:52:47.162"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:47.172" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state visible</msg>
<status status="PASS" starttime="20241125 10:52:47.166" endtime="20241125 10:52:47.172"/>
</kw>
<msg timestamp="20241125 10:52:47.172" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.165" endtime="20241125 10:52:47.173"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.173" endtime="20241125 10:52:47.173"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.165" endtime="20241125 10:52:47.173"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.174" endtime="20241125 10:52:47.174"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.174" endtime="20241125 10:52:47.174"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.173" endtime="20241125 10:52:47.174"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.165" endtime="20241125 10:52:47.174"/>
</try>
<msg timestamp="20241125 10:52:47.174" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.165" endtime="20241125 10:52:47.175"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.175" endtime="20241125 10:52:47.175"/>
</return>
<msg timestamp="20241125 10:52:47.175" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.164" endtime="20241125 10:52:47.175"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.177" endtime="20241125 10:52:47.177"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.177" endtime="20241125 10:52:47.177"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.177" endtime="20241125 10:52:47.177"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.177" endtime="20241125 10:52:47.177"/>
</if>
<status status="PASS" starttime="20241125 10:52:47.176" endtime="20241125 10:52:47.177"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.163" endtime="20241125 10:52:47.178"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:47.195" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state enabled</msg>
<status status="PASS" starttime="20241125 10:52:47.181" endtime="20241125 10:52:47.195"/>
</kw>
<msg timestamp="20241125 10:52:47.196" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.181" endtime="20241125 10:52:47.196"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.196" endtime="20241125 10:52:47.196"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.181" endtime="20241125 10:52:47.196"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.196" endtime="20241125 10:52:47.196"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.196" endtime="20241125 10:52:47.196"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.196" endtime="20241125 10:52:47.197"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.181" endtime="20241125 10:52:47.197"/>
</try>
<msg timestamp="20241125 10:52:47.197" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.180" endtime="20241125 10:52:47.197"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.197" endtime="20241125 10:52:47.197"/>
</return>
<msg timestamp="20241125 10:52:47.197" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.179" endtime="20241125 10:52:47.197"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.199" endtime="20241125 10:52:47.199"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.199" endtime="20241125 10:52:47.199"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.199" endtime="20241125 10:52:47.199"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.199" endtime="20241125 10:52:47.200"/>
</if>
<status status="PASS" starttime="20241125 10:52:47.198" endtime="20241125 10:52:47.200"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.179" endtime="20241125 10:52:47.200"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.143" endtime="20241125 10:52:47.200"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:47.200" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:52:47.200" endtime="20241125 10:52:47.200"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.202" endtime="20241125 10:52:47.203"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.202" endtime="20241125 10:52:47.203"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:47.203" endtime="20241125 10:52:47.203"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.203" endtime="20241125 10:52:47.203"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.202" endtime="20241125 10:52:47.203"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241125 10:52:47.204" endtime="20241125 10:52:47.245"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.203" endtime="20241125 10:52:47.245"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.246" endtime="20241125 10:52:47.246"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.246" endtime="20241125 10:52:47.246"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.246" endtime="20241125 10:52:47.246"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.203" endtime="20241125 10:52:47.246"/>
</try>
<status status="PASS" starttime="20241125 10:52:47.202" endtime="20241125 10:52:47.246"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.201" endtime="20241125 10:52:47.246"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.200" endtime="20241125 10:52:47.246"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.247" endtime="20241125 10:52:47.247"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.246" endtime="20241125 10:52:47.247"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.200" endtime="20241125 10:52:47.247"/>
</try>
<status status="PASS" starttime="20241125 10:52:47.140" endtime="20241125 10:52:47.247"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.137" endtime="20241125 10:52:47.247"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.249" endtime="20241125 10:52:47.249"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.250" endtime="20241125 10:52:47.250"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.247" endtime="20241125 10:52:47.250"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.251" endtime="20241125 10:52:47.251"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.250" endtime="20241125 10:52:47.251"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.254" endtime="20241125 10:52:47.254"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.251" endtime="20241125 10:52:47.254"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.256" endtime="20241125 10:52:47.256"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.254" endtime="20241125 10:52:47.256"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.257" endtime="20241125 10:52:47.258"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.257" endtime="20241125 10:52:47.258"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.259" endtime="20241125 10:52:47.259"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.259" endtime="20241125 10:52:47.259"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.259" endtime="20241125 10:52:47.259"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.260" endtime="20241125 10:52:47.260"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.259" endtime="20241125 10:52:47.260"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.259" endtime="20241125 10:52:47.260"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.258" endtime="20241125 10:52:47.260"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:47.264" endtime="20241125 10:52:47.264"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.266" endtime="20241125 10:52:47.267"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.260" endtime="20241125 10:52:47.267"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.268" endtime="20241125 10:52:47.268"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.268" endtime="20241125 10:52:47.268"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.268" endtime="20241125 10:52:47.268"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.268" endtime="20241125 10:52:47.268"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.268" endtime="20241125 10:52:47.268"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.268" endtime="20241125 10:52:47.268"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.267" endtime="20241125 10:52:47.269"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:47.274" endtime="20241125 10:52:47.275"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.277" endtime="20241125 10:52:47.277"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.269" endtime="20241125 10:52:47.277"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.278" endtime="20241125 10:52:47.278"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.278" endtime="20241125 10:52:47.278"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.278" endtime="20241125 10:52:47.278"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.278" endtime="20241125 10:52:47.279"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.278" endtime="20241125 10:52:47.279"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.278" endtime="20241125 10:52:47.279"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.277" endtime="20241125 10:52:47.279"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.280" endtime="20241125 10:52:47.280"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.279" endtime="20241125 10:52:47.280"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:52:47.285" endtime="20241125 10:52:47.285"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.285" endtime="20241125 10:52:47.285"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.280" endtime="20241125 10:52:47.285"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.136" endtime="20241125 10:52:47.286"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:47.286" endtime="20241125 10:52:47.286"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:52:47.286" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:52:47.286" endtime="20241125 10:52:47.287"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:52:47.287" endtime="20241125 10:52:47.287"/>
</return>
<msg timestamp="20241125 10:52:47.287" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:52:47.135" endtime="20241125 10:52:47.287"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.288" level="INFO">${key} = testCaseFlowSequenceId:4::flowActionSequenceId:4</msg>
<status status="PASS" starttime="20241125 10:52:47.288" endtime="20241125 10:52:47.288"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}"/>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.289" endtime="20241125 10:52:47.289"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.289" endtime="20241125 10:52:47.289"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.290" endtime="20241125 10:52:47.290"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.290" endtime="20241125 10:52:47.290"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.290" endtime="20241125 10:52:47.290"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.290" endtime="20241125 10:52:47.290"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.290" endtime="20241125 10:52:47.291"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.291" endtime="20241125 10:52:47.291"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.292" endtime="20241125 10:52:47.292"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.293" endtime="20241125 10:52:47.293"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:47.294" endtime="20241125 10:52:47.294"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.294" endtime="20241125 10:52:47.294"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.294" endtime="20241125 10:52:47.294"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.295" endtime="20241125 10:52:47.295"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:47.295" endtime="20241125 10:52:47.295"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.294" endtime="20241125 10:52:47.295"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.295" endtime="20241125 10:52:47.296"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:47.296" endtime="20241125 10:52:47.296"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.295" endtime="20241125 10:52:47.296"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.294" endtime="20241125 10:52:47.296"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.294" endtime="20241125 10:52:47.296"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.294" endtime="20241125 10:52:47.296"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.297" endtime="20241125 10:52:47.297"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:47.297" endtime="20241125 10:52:47.297"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.296" endtime="20241125 10:52:47.297"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.297" endtime="20241125 10:52:47.297"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:47.298" endtime="20241125 10:52:47.298"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.297" endtime="20241125 10:52:47.298"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.296" endtime="20241125 10:52:47.298"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.296" endtime="20241125 10:52:47.298"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.296" endtime="20241125 10:52:47.298"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.293" endtime="20241125 10:52:47.298"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.293" endtime="20241125 10:52:47.298"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:47.299" endtime="20241125 10:52:47.299"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.299" endtime="20241125 10:52:47.299"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.299" endtime="20241125 10:52:47.299"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.299" endtime="20241125 10:52:47.300"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.299" endtime="20241125 10:52:47.300"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.299" endtime="20241125 10:52:47.300"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.300" endtime="20241125 10:52:47.300"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:47.300" endtime="20241125 10:52:47.300"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.300" endtime="20241125 10:52:47.300"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.300" endtime="20241125 10:52:47.300"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:47.301" endtime="20241125 10:52:47.301"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.300" endtime="20241125 10:52:47.301"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.300" endtime="20241125 10:52:47.301"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.300" endtime="20241125 10:52:47.301"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.300" endtime="20241125 10:52:47.301"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.299" endtime="20241125 10:52:47.301"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:47.299" endtime="20241125 10:52:47.301"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:47.289" endtime="20241125 10:52:47.301"/>
</iter>
<status status="NOT RUN" starttime="20241125 10:52:47.289" endtime="20241125 10:52:47.301"/>
</for>
<msg timestamp="20241125 10:52:47.301" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:52:47.287" endtime="20241125 10:52:47.301"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:47.301" endtime="20241125 10:52:47.302"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:47.307" endtime="20241125 10:52:47.307"/>
</kw>
<msg timestamp="20241125 10:52:47.307" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.306" endtime="20241125 10:52:47.307"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.308" level="INFO">${values} = {'id': '3', 'name': 'Login button', 'xpath': '//button[@type="submit" and text()="Login"]', 'pageId': '1', 'createdAt': '2024-11-24T16:47:28.991Z', 'updatedAt': '2024-11-24T16:47:28.991Z'}</msg>
<status status="PASS" starttime="20241125 10:52:47.308" endtime="20241125 10:52:47.308"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.309" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.309" endtime="20241125 10:52:47.309"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.308" endtime="20241125 10:52:47.309"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.309" endtime="20241125 10:52:47.309"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.309" endtime="20241125 10:52:47.309"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.308" endtime="20241125 10:52:47.310"/>
</if>
<status status="PASS" starttime="20241125 10:52:47.308" endtime="20241125 10:52:47.310"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.307" endtime="20241125 10:52:47.310"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:47.310" endtime="20241125 10:52:47.310"/>
</return>
<msg timestamp="20241125 10:52:47.310" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.305" endtime="20241125 10:52:47.310"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.311" level="INFO">${xpath} = //button[@type="submit" and text()="Login"]</msg>
<status status="PASS" starttime="20241125 10:52:47.311" endtime="20241125 10:52:47.311"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.311" endtime="20241125 10:52:47.311"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.312" endtime="20241125 10:52:47.312"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.311" endtime="20241125 10:52:47.312"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.310" endtime="20241125 10:52:47.312"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:47.313" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '117', 'status': 'COMPLETED', 'actionName': 'Click login button', 'actionType': 'CLICK', 'actionXpath': '//button[@type="submit" and text()="Login"]', 'inputValue': '',...</msg>
<status status="PASS" starttime="20241125 10:52:47.312" endtime="20241125 10:52:47.313"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:52:47.314" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "117", "status": "COMPLETED", "actionName": "Click login button", "actionType": "CLICK", "actionXpath": "//button[@type=\"submit\" and text()=\"Login\"]", "inputValue":...</msg>
<status status="PASS" starttime="20241125 10:52:47.314" endtime="20241125 10:52:47.314"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:52:47.323" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:52:47.324" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:52:47.315" endtime="20241125 10:52:47.324"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:47.325" endtime="20241125 10:52:47.327"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:52:47.327" endtime="20241125 10:52:47.327"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.313" endtime="20241125 10:52:47.327"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.302" endtime="20241125 10:52:47.327"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.132" endtime="20241125 10:52:47.328"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.328" endtime="20241125 10:52:47.328"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:52:47.328" endtime="20241125 10:52:47.329"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.329" endtime="20241125 10:52:47.329"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.328" endtime="20241125 10:52:47.329"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.132" endtime="20241125 10:52:47.329"/>
</try>
<status status="PASS" starttime="20241125 10:52:47.131" endtime="20241125 10:52:47.331"/>
</iter>
<status status="PASS" starttime="20241125 10:52:43.964" endtime="20241125 10:52:47.331"/>
</for>
<status status="PASS" starttime="20241125 10:52:43.964" endtime="20241125 10:52:47.331"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.963" endtime="20241125 10:52:47.332"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:47.335" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '58', 'status': 'COMPLETED', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241125 10:52:47.334" endtime="20241125 10:52:47.335"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:52:47.337" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "58", "status": "COMPLETED", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241125 10:52:47.336" endtime="20241125 10:52:47.337"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:52:47.344" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:52:47.345" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:52:47.338" endtime="20241125 10:52:47.345"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:47.345" endtime="20241125 10:52:47.346"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:52:47.346" endtime="20241125 10:52:47.347"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.336" endtime="20241125 10:52:47.347"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.332" endtime="20241125 10:52:47.347"/>
</kw>
<status status="PASS" starttime="20241125 10:52:43.952" endtime="20241125 10:52:47.348"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.348" endtime="20241125 10:52:47.348"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:52:47.348" endtime="20241125 10:52:47.349"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.349" endtime="20241125 10:52:47.349"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.348" endtime="20241125 10:52:47.349"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.951" endtime="20241125 10:52:47.349"/>
</try>
<status status="PASS" starttime="20241125 10:52:43.951" endtime="20241125 10:52:47.349"/>
</iter>
<iter>
<var name="${testCaseFlowSequence}">{'id': '5', 'testCaseId': '2', 'flowId': '2', 'order': 1, 'createdAt': '2024-11-25T05:22:01.703Z', 'updatedAt': '2024-11-25T05:22:01.703Z', 'flow': {'id': '2', 'name': 'Navigate to profile', 'projectI...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.351" level="INFO">${flow} = {'id': '2', 'name': 'Navigate to profile', 'projectId': '1', 'createdAt': '2024-11-24T16:52:30.660Z', 'updatedAt': '2024-11-24T16:52:30.660Z', 'flowActionSequences': [{'id': '5', 'actionId': '5', 'flo...</msg>
<status status="PASS" starttime="20241125 10:52:47.350" endtime="20241125 10:52:47.351"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:47.351" endtime="20241125 10:52:47.351"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:47.355" endtime="20241125 10:52:47.356"/>
</kw>
<msg timestamp="20241125 10:52:47.356" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.355" endtime="20241125 10:52:47.356"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.357" level="INFO">${values} = [{'id': '5', 'actionId': '5', 'flowId': '2', 'order': 0, 'createdAt': '2024-11-24T16:52:30.906Z', 'updatedAt': '2024-11-24T16:52:30.906Z', 'action': {'id': '5', 'name': 'Click profile header icon', 't...</msg>
<status status="PASS" starttime="20241125 10:52:47.357" endtime="20241125 10:52:47.357"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.358" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.358" endtime="20241125 10:52:47.358"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.357" endtime="20241125 10:52:47.358"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.358" endtime="20241125 10:52:47.358"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.358" endtime="20241125 10:52:47.358"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.357" endtime="20241125 10:52:47.358"/>
</if>
<status status="PASS" starttime="20241125 10:52:47.356" endtime="20241125 10:52:47.359"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.356" endtime="20241125 10:52:47.359"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:47.359" endtime="20241125 10:52:47.359"/>
</return>
<msg timestamp="20241125 10:52:47.359" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.354" endtime="20241125 10:52:47.359"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '5', 'actionId': '5', 'flowId': '2', 'order': 0, 'createdAt': '2024-11-24T16:52:30.906Z', 'updatedAt': '2024-11-24T16:52:30.906Z', 'action': {'id': '5', 'name': 'Click profile header icon', 'ty...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.361" level="INFO">${action} = {'id': '5', 'name': 'Click profile header icon', 'type': 'CLICK', 'selectorI': '4', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:51:14.954Z', 'updatedAt': '2024-11-24T16:51:14.954Z',...</msg>
<status status="PASS" starttime="20241125 10:52:47.361" endtime="20241125 10:52:47.361"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:47.362" endtime="20241125 10:52:47.362"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:52:47.362" level="INFO">${input} = {'id': '5', 'actionId': '5', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:51:15.169Z', 'updatedAt': '2024-11-24T16:51:15.169Z'}</msg>
<status status="PASS" starttime="20241125 10:52:47.362" endtime="20241125 10:52:47.362"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.363" endtime="20241125 10:52:47.363"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.363" endtime="20241125 10:52:47.363"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.363" endtime="20241125 10:52:47.363"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.362" endtime="20241125 10:52:47.363"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:47.364" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:52:47.364" endtime="20241125 10:52:47.364"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:47.365" endtime="20241125 10:52:47.365"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.364" endtime="20241125 10:52:47.365"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:47.365" endtime="20241125 10:52:47.365"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.365" endtime="20241125 10:52:47.365"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:47.962" level="INFO">Waited for Element with selector id=headerProfileImage at state attached</msg>
<status status="PASS" starttime="20241125 10:52:47.374" endtime="20241125 10:52:47.962"/>
</kw>
<msg timestamp="20241125 10:52:47.963" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.374" endtime="20241125 10:52:47.963"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.963" endtime="20241125 10:52:47.963"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.373" endtime="20241125 10:52:47.963"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.964" endtime="20241125 10:52:47.964"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.965" endtime="20241125 10:52:47.965"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.964" endtime="20241125 10:52:47.965"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.373" endtime="20241125 10:52:47.965"/>
</try>
<msg timestamp="20241125 10:52:47.966" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.373" endtime="20241125 10:52:47.966"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:47.966" endtime="20241125 10:52:47.966"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.371" endtime="20241125 10:52:47.966"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:47.967" endtime="20241125 10:52:47.967"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:47.967" endtime="20241125 10:52:47.967"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.371" endtime="20241125 10:52:47.967"/>
</try>
<msg timestamp="20241125 10:52:47.968" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.370" endtime="20241125 10:52:47.968"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.976" endtime="20241125 10:52:47.976"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:47.976" endtime="20241125 10:52:47.978"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:47.976" endtime="20241125 10:52:47.979"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.976" endtime="20241125 10:52:47.979"/>
</if>
<status status="PASS" starttime="20241125 10:52:47.971" endtime="20241125 10:52:47.979"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.369" endtime="20241125 10:52:47.979"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:48.192" level="INFO">Waited for Element with selector id=headerProfileImage at state visible</msg>
<status status="PASS" starttime="20241125 10:52:47.997" endtime="20241125 10:52:48.192"/>
</kw>
<msg timestamp="20241125 10:52:48.193" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.996" endtime="20241125 10:52:48.193"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:48.193" endtime="20241125 10:52:48.193"/>
</return>
<status status="PASS" starttime="20241125 10:52:47.996" endtime="20241125 10:52:48.193"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.194" endtime="20241125 10:52:48.194"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.195" endtime="20241125 10:52:48.195"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.194" endtime="20241125 10:52:48.195"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.996" endtime="20241125 10:52:48.195"/>
</try>
<msg timestamp="20241125 10:52:48.196" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.994" endtime="20241125 10:52:48.196"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:48.196" endtime="20241125 10:52:48.196"/>
</return>
<msg timestamp="20241125 10:52:48.197" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:52:47.991" endtime="20241125 10:52:48.197"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.204" endtime="20241125 10:52:48.204"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.204" endtime="20241125 10:52:48.204"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.203" endtime="20241125 10:52:48.205"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.202" endtime="20241125 10:52:48.205"/>
</if>
<status status="PASS" starttime="20241125 10:52:48.200" endtime="20241125 10:52:48.205"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.989" endtime="20241125 10:52:48.206"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:48.391" level="INFO">Waited for Element with selector id=headerProfileImage at state enabled</msg>
<status status="PASS" starttime="20241125 10:52:48.216" endtime="20241125 10:52:48.391"/>
</kw>
<msg timestamp="20241125 10:52:48.392" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.215" endtime="20241125 10:52:48.392"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:48.392" endtime="20241125 10:52:48.392"/>
</return>
<status status="PASS" starttime="20241125 10:52:48.214" endtime="20241125 10:52:48.392"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.392" endtime="20241125 10:52:48.393"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.393" endtime="20241125 10:52:48.393"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.392" endtime="20241125 10:52:48.393"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.214" endtime="20241125 10:52:48.393"/>
</try>
<msg timestamp="20241125 10:52:48.394" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.213" endtime="20241125 10:52:48.394"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:48.394" endtime="20241125 10:52:48.394"/>
</return>
<msg timestamp="20241125 10:52:48.394" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.210" endtime="20241125 10:52:48.394"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.397" endtime="20241125 10:52:48.397"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.397" endtime="20241125 10:52:48.397"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.397" endtime="20241125 10:52:48.397"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.396" endtime="20241125 10:52:48.397"/>
</if>
<status status="PASS" starttime="20241125 10:52:48.395" endtime="20241125 10:52:48.398"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.209" endtime="20241125 10:52:48.398"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.368" endtime="20241125 10:52:48.398"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:48.398" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:52:48.398" endtime="20241125 10:52:48.398"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.400" endtime="20241125 10:52:48.400"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.400" endtime="20241125 10:52:48.400"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:48.400" endtime="20241125 10:52:48.401"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.400" endtime="20241125 10:52:48.401"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.400" endtime="20241125 10:52:48.401"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241125 10:52:48.401" endtime="20241125 10:52:48.490"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.401" endtime="20241125 10:52:48.490"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.491" endtime="20241125 10:52:48.491"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.492" endtime="20241125 10:52:48.492"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.491" endtime="20241125 10:52:48.492"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.401" endtime="20241125 10:52:48.492"/>
</try>
<status status="PASS" starttime="20241125 10:52:48.399" endtime="20241125 10:52:48.493"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.399" endtime="20241125 10:52:48.493"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.399" endtime="20241125 10:52:48.493"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.494" endtime="20241125 10:52:48.494"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.493" endtime="20241125 10:52:48.494"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.398" endtime="20241125 10:52:48.494"/>
</try>
<status status="PASS" starttime="20241125 10:52:47.367" endtime="20241125 10:52:48.494"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.365" endtime="20241125 10:52:48.494"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.498" endtime="20241125 10:52:48.498"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.502" endtime="20241125 10:52:48.502"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.495" endtime="20241125 10:52:48.503"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.505" endtime="20241125 10:52:48.506"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.503" endtime="20241125 10:52:48.506"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.511" endtime="20241125 10:52:48.512"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.506" endtime="20241125 10:52:48.512"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.516" endtime="20241125 10:52:48.516"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.512" endtime="20241125 10:52:48.516"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.518" endtime="20241125 10:52:48.519"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.516" endtime="20241125 10:52:48.519"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.522" endtime="20241125 10:52:48.523"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.524" endtime="20241125 10:52:48.524"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.523" endtime="20241125 10:52:48.524"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.525" endtime="20241125 10:52:48.525"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.524" endtime="20241125 10:52:48.525"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.523" endtime="20241125 10:52:48.525"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:48.519" endtime="20241125 10:52:48.525"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:48.534" endtime="20241125 10:52:48.535"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.542" endtime="20241125 10:52:48.542"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.525" endtime="20241125 10:52:48.542"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.545" endtime="20241125 10:52:48.545"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.546" endtime="20241125 10:52:48.546"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.545" endtime="20241125 10:52:48.546"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.547" endtime="20241125 10:52:48.547"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.546" endtime="20241125 10:52:48.547"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.545" endtime="20241125 10:52:48.547"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:48.543" endtime="20241125 10:52:48.547"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:48.559" endtime="20241125 10:52:48.560"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.563" endtime="20241125 10:52:48.563"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.547" endtime="20241125 10:52:48.563"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.565" endtime="20241125 10:52:48.565"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.565" endtime="20241125 10:52:48.565"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.565" endtime="20241125 10:52:48.566"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.566" endtime="20241125 10:52:48.566"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.566" endtime="20241125 10:52:48.566"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.565" endtime="20241125 10:52:48.566"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:48.563" endtime="20241125 10:52:48.566"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.569" endtime="20241125 10:52:48.571"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.566" endtime="20241125 10:52:48.571"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:52:48.581" endtime="20241125 10:52:48.582"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.582" endtime="20241125 10:52:48.582"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.571" endtime="20241125 10:52:48.582"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.364" endtime="20241125 10:52:48.583"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:48.583" endtime="20241125 10:52:48.584"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:52:48.585" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:52:48.584" endtime="20241125 10:52:48.585"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:52:48.585" endtime="20241125 10:52:48.587"/>
</return>
<msg timestamp="20241125 10:52:48.587" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:52:47.363" endtime="20241125 10:52:48.587"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:48.589" level="INFO">${key} = testCaseFlowSequenceId:5::flowActionSequenceId:5</msg>
<status status="PASS" starttime="20241125 10:52:48.588" endtime="20241125 10:52:48.589"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}"/>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.589" endtime="20241125 10:52:48.589"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.589" endtime="20241125 10:52:48.590"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.590" endtime="20241125 10:52:48.590"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.590" endtime="20241125 10:52:48.590"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.590" endtime="20241125 10:52:48.590"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.591" endtime="20241125 10:52:48.591"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.591" endtime="20241125 10:52:48.591"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.591" endtime="20241125 10:52:48.591"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.592" endtime="20241125 10:52:48.592"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.594" endtime="20241125 10:52:48.594"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:48.594" endtime="20241125 10:52:48.594"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:48.594" endtime="20241125 10:52:48.594"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.594" endtime="20241125 10:52:48.594"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.595" endtime="20241125 10:52:48.595"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:48.595" endtime="20241125 10:52:48.595"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:48.595" endtime="20241125 10:52:48.595"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.595" endtime="20241125 10:52:48.595"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:48.595" endtime="20241125 10:52:48.596"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:48.595" endtime="20241125 10:52:48.596"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.595" endtime="20241125 10:52:48.596"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:48.594" endtime="20241125 10:52:48.596"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.594" endtime="20241125 10:52:48.596"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.596" endtime="20241125 10:52:48.596"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:48.596" endtime="20241125 10:52:48.596"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:48.596" endtime="20241125 10:52:48.597"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.597" endtime="20241125 10:52:48.597"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:48.597" endtime="20241125 10:52:48.597"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:48.597" endtime="20241125 10:52:48.597"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.596" endtime="20241125 10:52:48.597"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:48.596" endtime="20241125 10:52:48.597"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.596" endtime="20241125 10:52:48.597"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:48.594" endtime="20241125 10:52:48.597"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.594" endtime="20241125 10:52:48.597"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:48.598" endtime="20241125 10:52:48.598"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:48.598" endtime="20241125 10:52:48.598"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.598" endtime="20241125 10:52:48.598"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.598" endtime="20241125 10:52:48.598"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.598" endtime="20241125 10:52:48.598"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.598" endtime="20241125 10:52:48.598"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.599" endtime="20241125 10:52:48.599"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:48.599" endtime="20241125 10:52:48.599"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:48.599" endtime="20241125 10:52:48.599"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.600" endtime="20241125 10:52:48.600"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:48.600" endtime="20241125 10:52:48.600"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:48.600" endtime="20241125 10:52:48.600"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.599" endtime="20241125 10:52:48.600"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:48.599" endtime="20241125 10:52:48.600"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.599" endtime="20241125 10:52:48.600"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:48.598" endtime="20241125 10:52:48.600"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:48.597" endtime="20241125 10:52:48.600"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:48.589" endtime="20241125 10:52:48.600"/>
</iter>
<status status="NOT RUN" starttime="20241125 10:52:48.589" endtime="20241125 10:52:48.600"/>
</for>
<msg timestamp="20241125 10:52:48.601" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:52:48.588" endtime="20241125 10:52:48.601"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:48.601" endtime="20241125 10:52:48.601"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:48.609" endtime="20241125 10:52:48.610"/>
</kw>
<msg timestamp="20241125 10:52:48.610" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.609" endtime="20241125 10:52:48.611"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:48.612" level="INFO">${values} = {'id': '4', 'name': 'Profile icon', 'xpath': 'id=headerProfileImage', 'pageId': '2', 'createdAt': '2024-11-24T16:48:09.826Z', 'updatedAt': '2024-11-24T17:36:27.753Z'}</msg>
<status status="PASS" starttime="20241125 10:52:48.611" endtime="20241125 10:52:48.612"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:48.614" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.613" endtime="20241125 10:52:48.614"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.613" endtime="20241125 10:52:48.615"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.616" endtime="20241125 10:52:48.616"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.615" endtime="20241125 10:52:48.616"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.612" endtime="20241125 10:52:48.616"/>
</if>
<status status="PASS" starttime="20241125 10:52:48.611" endtime="20241125 10:52:48.617"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.611" endtime="20241125 10:52:48.617"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:48.617" endtime="20241125 10:52:48.617"/>
</return>
<msg timestamp="20241125 10:52:48.618" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.608" endtime="20241125 10:52:48.619"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:48.623" level="INFO">${xpath} = id=headerProfileImage</msg>
<status status="PASS" starttime="20241125 10:52:48.622" endtime="20241125 10:52:48.623"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.622" endtime="20241125 10:52:48.623"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.624" endtime="20241125 10:52:48.624"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.623" endtime="20241125 10:52:48.624"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.621" endtime="20241125 10:52:48.624"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:48.626" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '118', 'status': 'COMPLETED', 'actionName': 'Click profile header icon', 'actionType': 'CLICK', 'actionXpath': 'id=headerProfileImage', 'inputValue': '', 'errorMessage'...</msg>
<status status="PASS" starttime="20241125 10:52:48.624" endtime="20241125 10:52:48.626"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:52:48.628" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "118", "status": "COMPLETED", "actionName": "Click profile header icon", "actionType": "CLICK", "actionXpath": "id=headerProfileImage", "inputValue": "", "errorMessage"...</msg>
<status status="PASS" starttime="20241125 10:52:48.627" endtime="20241125 10:52:48.628"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:52:48.646" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:52:48.647" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:52:48.628" endtime="20241125 10:52:48.647"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:48.648" endtime="20241125 10:52:48.650"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:52:48.651" endtime="20241125 10:52:48.651"/>
</return>
<status status="PASS" starttime="20241125 10:52:48.626" endtime="20241125 10:52:48.652"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.602" endtime="20241125 10:52:48.655"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.360" endtime="20241125 10:52:48.656"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.658" endtime="20241125 10:52:48.658"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:52:48.658" endtime="20241125 10:52:48.659"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.659" endtime="20241125 10:52:48.659"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.657" endtime="20241125 10:52:48.659"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.360" endtime="20241125 10:52:48.660"/>
</try>
<status status="PASS" starttime="20241125 10:52:47.360" endtime="20241125 10:52:48.660"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '6', 'actionId': '6', 'flowId': '2', 'order': 1, 'createdAt': '2024-11-24T16:52:30.906Z', 'updatedAt': '2024-11-24T16:52:30.906Z', 'action': {'id': '6', 'name': 'Click profile menu icon', 'type...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:48.662" level="INFO">${action} = {'id': '6', 'name': 'Click profile menu icon', 'type': 'CLICK', 'selectorI': '5', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:51:31.795Z', 'updatedAt': '2024-11-24T16:51:31.795Z', '...</msg>
<status status="PASS" starttime="20241125 10:52:48.661" endtime="20241125 10:52:48.662"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:48.663" endtime="20241125 10:52:48.665"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:52:48.666" level="INFO">${input} = {'id': '6', 'actionId': '6', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:51:31.968Z', 'updatedAt': '2024-11-24T16:51:31.968Z'}</msg>
<status status="PASS" starttime="20241125 10:52:48.666" endtime="20241125 10:52:48.666"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.667" endtime="20241125 10:52:48.667"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.668" endtime="20241125 10:52:48.668"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.667" endtime="20241125 10:52:48.669"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.666" endtime="20241125 10:52:48.670"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:48.675" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:52:48.673" endtime="20241125 10:52:48.675"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:48.677" endtime="20241125 10:52:48.677"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.676" endtime="20241125 10:52:48.677"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:48.678" endtime="20241125 10:52:48.678"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.678" endtime="20241125 10:52:48.679"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:48.823" level="INFO">Waited for Element with selector //p[text()="Profile"] at state attached</msg>
<status status="PASS" starttime="20241125 10:52:48.755" endtime="20241125 10:52:48.823"/>
</kw>
<msg timestamp="20241125 10:52:48.824" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.753" endtime="20241125 10:52:48.824"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:48.824" endtime="20241125 10:52:48.824"/>
</return>
<status status="PASS" starttime="20241125 10:52:48.751" endtime="20241125 10:52:48.824"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.825" endtime="20241125 10:52:48.825"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.825" endtime="20241125 10:52:48.825"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.824" endtime="20241125 10:52:48.825"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.751" endtime="20241125 10:52:48.826"/>
</try>
<msg timestamp="20241125 10:52:48.826" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.749" endtime="20241125 10:52:48.826"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:48.826" endtime="20241125 10:52:48.826"/>
</return>
<status status="PASS" starttime="20241125 10:52:48.702" endtime="20241125 10:52:48.827"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:48.827" endtime="20241125 10:52:48.827"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:48.827" endtime="20241125 10:52:48.827"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.702" endtime="20241125 10:52:48.827"/>
</try>
<msg timestamp="20241125 10:52:48.828" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.701" endtime="20241125 10:52:48.828"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.831" endtime="20241125 10:52:48.831"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.831" endtime="20241125 10:52:48.831"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.831" endtime="20241125 10:52:48.832"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.831" endtime="20241125 10:52:48.832"/>
</if>
<status status="PASS" starttime="20241125 10:52:48.829" endtime="20241125 10:52:48.832"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.698" endtime="20241125 10:52:48.832"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:48.843" level="INFO">Waited for Element with selector //p[text()="Profile"] at state visible</msg>
<status status="PASS" starttime="20241125 10:52:48.839" endtime="20241125 10:52:48.844"/>
</kw>
<msg timestamp="20241125 10:52:48.844" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.838" endtime="20241125 10:52:48.844"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:48.844" endtime="20241125 10:52:48.844"/>
</return>
<status status="PASS" starttime="20241125 10:52:48.838" endtime="20241125 10:52:48.845"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.845" endtime="20241125 10:52:48.845"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.846" endtime="20241125 10:52:48.846"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.845" endtime="20241125 10:52:48.846"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.838" endtime="20241125 10:52:48.846"/>
</try>
<msg timestamp="20241125 10:52:48.846" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.838" endtime="20241125 10:52:48.847"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:48.847" endtime="20241125 10:52:48.847"/>
</return>
<msg timestamp="20241125 10:52:48.847" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.836" endtime="20241125 10:52:48.847"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.851" endtime="20241125 10:52:48.851"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.852" endtime="20241125 10:52:48.852"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.851" endtime="20241125 10:52:48.852"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.851" endtime="20241125 10:52:48.853"/>
</if>
<status status="PASS" starttime="20241125 10:52:48.849" endtime="20241125 10:52:48.853"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.835" endtime="20241125 10:52:48.853"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:48.876" level="INFO">Waited for Element with selector //p[text()="Profile"] at state enabled</msg>
<status status="PASS" starttime="20241125 10:52:48.859" endtime="20241125 10:52:48.876"/>
</kw>
<msg timestamp="20241125 10:52:48.876" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.858" endtime="20241125 10:52:48.876"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:48.876" endtime="20241125 10:52:48.877"/>
</return>
<status status="PASS" starttime="20241125 10:52:48.858" endtime="20241125 10:52:48.877"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.877" endtime="20241125 10:52:48.877"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.878" endtime="20241125 10:52:48.878"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.877" endtime="20241125 10:52:48.878"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.858" endtime="20241125 10:52:48.878"/>
</try>
<msg timestamp="20241125 10:52:48.878" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.857" endtime="20241125 10:52:48.878"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:48.878" endtime="20241125 10:52:48.879"/>
</return>
<msg timestamp="20241125 10:52:48.879" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241125 10:52:48.856" endtime="20241125 10:52:48.879"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.881" endtime="20241125 10:52:48.881"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.882" endtime="20241125 10:52:48.882"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.881" endtime="20241125 10:52:48.882"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.881" endtime="20241125 10:52:48.882"/>
</if>
<status status="PASS" starttime="20241125 10:52:48.880" endtime="20241125 10:52:48.882"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.855" endtime="20241125 10:52:48.882"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.685" endtime="20241125 10:52:48.882"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:48.883" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:52:48.883" endtime="20241125 10:52:48.883"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241125 10:52:48.885" endtime="20241125 10:52:48.885"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:48.884" endtime="20241125 10:52:48.885"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:48.885" endtime="20241125 10:52:48.886"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.885" endtime="20241125 10:52:48.886"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.884" endtime="20241125 10:52:48.886"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241125 10:52:48.887" endtime="20241125 10:52:49.045"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.886" endtime="20241125 10:52:49.046"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.046" endtime="20241125 10:52:49.047"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.047" endtime="20241125 10:52:49.047"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.046" endtime="20241125 10:52:49.047"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.886" endtime="20241125 10:52:49.047"/>
</try>
<status status="PASS" starttime="20241125 10:52:48.884" endtime="20241125 10:52:49.048"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.883" endtime="20241125 10:52:49.048"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.883" endtime="20241125 10:52:49.048"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.049" endtime="20241125 10:52:49.049"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.048" endtime="20241125 10:52:49.049"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.883" endtime="20241125 10:52:49.049"/>
</try>
<status status="PASS" starttime="20241125 10:52:48.683" endtime="20241125 10:52:49.050"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.679" endtime="20241125 10:52:49.050"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.054" endtime="20241125 10:52:49.054"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.058" endtime="20241125 10:52:49.058"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.050" endtime="20241125 10:52:49.058"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.059" endtime="20241125 10:52:49.059"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.058" endtime="20241125 10:52:49.059"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.062" endtime="20241125 10:52:49.062"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.060" endtime="20241125 10:52:49.062"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.064" endtime="20241125 10:52:49.064"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.063" endtime="20241125 10:52:49.065"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.066" endtime="20241125 10:52:49.066"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.065" endtime="20241125 10:52:49.066"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.067" endtime="20241125 10:52:49.067"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.067" endtime="20241125 10:52:49.068"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.067" endtime="20241125 10:52:49.068"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.068" endtime="20241125 10:52:49.068"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.068" endtime="20241125 10:52:49.068"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.067" endtime="20241125 10:52:49.068"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.066" endtime="20241125 10:52:49.068"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:49.073" endtime="20241125 10:52:49.074"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.078" endtime="20241125 10:52:49.078"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.068" endtime="20241125 10:52:49.078"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.079" endtime="20241125 10:52:49.080"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.080" endtime="20241125 10:52:49.080"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.080" endtime="20241125 10:52:49.080"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.080" endtime="20241125 10:52:49.080"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.080" endtime="20241125 10:52:49.080"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.080" endtime="20241125 10:52:49.081"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.078" endtime="20241125 10:52:49.081"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:49.085" endtime="20241125 10:52:49.085"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.089" endtime="20241125 10:52:49.089"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.081" endtime="20241125 10:52:49.089"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.090" endtime="20241125 10:52:49.090"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.090" endtime="20241125 10:52:49.091"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.090" endtime="20241125 10:52:49.091"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.091" endtime="20241125 10:52:49.091"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.091" endtime="20241125 10:52:49.091"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.090" endtime="20241125 10:52:49.091"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.089" endtime="20241125 10:52:49.091"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.093" endtime="20241125 10:52:49.093"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.091" endtime="20241125 10:52:49.093"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:52:49.097" endtime="20241125 10:52:49.097"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.097" endtime="20241125 10:52:49.097"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.093" endtime="20241125 10:52:49.097"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.675" endtime="20241125 10:52:49.097"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:49.097" endtime="20241125 10:52:49.097"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:52:49.097" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:52:49.097" endtime="20241125 10:52:49.097"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:52:49.097" endtime="20241125 10:52:49.097"/>
</return>
<msg timestamp="20241125 10:52:49.098" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:52:48.671" endtime="20241125 10:52:49.098"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.099" level="INFO">${key} = testCaseFlowSequenceId:5::flowActionSequenceId:6</msg>
<status status="PASS" starttime="20241125 10:52:49.098" endtime="20241125 10:52:49.099"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}"/>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.099" endtime="20241125 10:52:49.099"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.099" endtime="20241125 10:52:49.099"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.099" endtime="20241125 10:52:49.099"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.100" endtime="20241125 10:52:49.100"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.100" endtime="20241125 10:52:49.100"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.100" endtime="20241125 10:52:49.100"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.100" endtime="20241125 10:52:49.100"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.100" endtime="20241125 10:52:49.100"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.102" endtime="20241125 10:52:49.102"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.105"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.105"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.105"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.105"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.105"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.105"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.105"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.106" endtime="20241125 10:52:49.106"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:49.106" endtime="20241125 10:52:49.106"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.106"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.106"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.106"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.106"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.106" endtime="20241125 10:52:49.106"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:49.107" endtime="20241125 10:52:49.107"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.106" endtime="20241125 10:52:49.107"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.107" endtime="20241125 10:52:49.107"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:49.107" endtime="20241125 10:52:49.107"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.107" endtime="20241125 10:52:49.107"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.106" endtime="20241125 10:52:49.107"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.106" endtime="20241125 10:52:49.107"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.106" endtime="20241125 10:52:49.107"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.107"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.105" endtime="20241125 10:52:49.107"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:49.108" endtime="20241125 10:52:49.108"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.108" endtime="20241125 10:52:49.108"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.108" endtime="20241125 10:52:49.108"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.108" endtime="20241125 10:52:49.108"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.108" endtime="20241125 10:52:49.108"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.108" endtime="20241125 10:52:49.108"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.109" endtime="20241125 10:52:49.109"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:49.109" endtime="20241125 10:52:49.109"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.109" endtime="20241125 10:52:49.109"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.109" endtime="20241125 10:52:49.109"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:49.109" endtime="20241125 10:52:49.109"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.109" endtime="20241125 10:52:49.109"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.109" endtime="20241125 10:52:49.110"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.109" endtime="20241125 10:52:49.110"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.108" endtime="20241125 10:52:49.110"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.108" endtime="20241125 10:52:49.110"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.108" endtime="20241125 10:52:49.110"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.099" endtime="20241125 10:52:49.110"/>
</iter>
<status status="NOT RUN" starttime="20241125 10:52:49.099" endtime="20241125 10:52:49.110"/>
</for>
<msg timestamp="20241125 10:52:49.110" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:52:49.098" endtime="20241125 10:52:49.110"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:49.110" endtime="20241125 10:52:49.111"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:49.114" endtime="20241125 10:52:49.115"/>
</kw>
<msg timestamp="20241125 10:52:49.115" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:49.114" endtime="20241125 10:52:49.115"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.116" level="INFO">${values} = {'id': '5', 'name': 'Profile menu icon', 'xpath': '//p[text()="Profile"]', 'pageId': '2', 'createdAt': '2024-11-24T16:49:21.505Z', 'updatedAt': '2024-11-24T16:49:21.505Z'}</msg>
<status status="PASS" starttime="20241125 10:52:49.116" endtime="20241125 10:52:49.116"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.116" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:49.116" endtime="20241125 10:52:49.116"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.116" endtime="20241125 10:52:49.117"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.117" endtime="20241125 10:52:49.117"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.117" endtime="20241125 10:52:49.117"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.116" endtime="20241125 10:52:49.117"/>
</if>
<status status="PASS" starttime="20241125 10:52:49.115" endtime="20241125 10:52:49.117"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.115" endtime="20241125 10:52:49.117"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:49.117" endtime="20241125 10:52:49.117"/>
</return>
<msg timestamp="20241125 10:52:49.117" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:49.114" endtime="20241125 10:52:49.117"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.120" level="INFO">${xpath} = //p[text()="Profile"]</msg>
<status status="PASS" starttime="20241125 10:52:49.120" endtime="20241125 10:52:49.121"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.119" endtime="20241125 10:52:49.121"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.121" endtime="20241125 10:52:49.122"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.121" endtime="20241125 10:52:49.122"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.118" endtime="20241125 10:52:49.122"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:49.123" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '119', 'status': 'COMPLETED', 'actionName': 'Click profile menu icon', 'actionType': 'CLICK', 'actionXpath': '//p[text()="Profile"]', 'inputValue': '', 'errorMessage': ...</msg>
<status status="PASS" starttime="20241125 10:52:49.123" endtime="20241125 10:52:49.123"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:52:49.124" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "119", "status": "COMPLETED", "actionName": "Click profile menu icon", "actionType": "CLICK", "actionXpath": "//p[text()=\"Profile\"]", "inputValue": "", "errorMessage"...</msg>
<status status="PASS" starttime="20241125 10:52:49.124" endtime="20241125 10:52:49.124"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:52:49.128" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:52:49.128" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:52:49.125" endtime="20241125 10:52:49.129"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:49.129" endtime="20241125 10:52:49.129"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:52:49.129" endtime="20241125 10:52:49.129"/>
</return>
<status status="PASS" starttime="20241125 10:52:49.124" endtime="20241125 10:52:49.130"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.111" endtime="20241125 10:52:49.130"/>
</kw>
<status status="PASS" starttime="20241125 10:52:48.661" endtime="20241125 10:52:49.130"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.131" endtime="20241125 10:52:49.131"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:52:49.131" endtime="20241125 10:52:49.131"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.131" endtime="20241125 10:52:49.131"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.130" endtime="20241125 10:52:49.131"/>
</branch>
<status status="PASS" starttime="20241125 10:52:48.661" endtime="20241125 10:52:49.131"/>
</try>
<status status="PASS" starttime="20241125 10:52:48.660" endtime="20241125 10:52:49.131"/>
</iter>
<status status="PASS" starttime="20241125 10:52:47.360" endtime="20241125 10:52:49.131"/>
</for>
<status status="PASS" starttime="20241125 10:52:47.359" endtime="20241125 10:52:49.132"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.359" endtime="20241125 10:52:49.132"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:49.133" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '59', 'status': 'COMPLETED', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241125 10:52:49.133" endtime="20241125 10:52:49.133"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:52:49.134" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "59", "status": "COMPLETED", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241125 10:52:49.134" endtime="20241125 10:52:49.134"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:52:49.143" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:52:49.143" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:52:49.134" endtime="20241125 10:52:49.143"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:49.143" endtime="20241125 10:52:49.144"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:52:49.144" endtime="20241125 10:52:49.144"/>
</return>
<status status="PASS" starttime="20241125 10:52:49.133" endtime="20241125 10:52:49.144"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.132" endtime="20241125 10:52:49.145"/>
</kw>
<status status="PASS" starttime="20241125 10:52:47.350" endtime="20241125 10:52:49.145"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.145" endtime="20241125 10:52:49.145"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:52:49.146" endtime="20241125 10:52:49.146"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.146" endtime="20241125 10:52:49.146"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.145" endtime="20241125 10:52:49.146"/>
</branch>
<status status="PASS" starttime="20241125 10:52:47.350" endtime="20241125 10:52:49.146"/>
</try>
<status status="PASS" starttime="20241125 10:52:47.350" endtime="20241125 10:52:49.146"/>
</iter>
<iter>
<var name="${testCaseFlowSequence}">{'id': '6', 'testCaseId': '2', 'flowId': '3', 'order': 2, 'createdAt': '2024-11-25T05:22:01.703Z', 'updatedAt': '2024-11-25T05:22:01.703Z', 'flow': {'id': '3', 'name': 'Get Profile information', 'proj...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.147" level="INFO">${flow} = {'id': '3', 'name': 'Get Profile information', 'projectId': '1', 'createdAt': '2024-11-24T16:52:52.554Z', 'updatedAt': '2024-11-24T16:52:52.554Z', 'flowActionSequences': [{'id': '7', 'actionId': '7', ...</msg>
<status status="PASS" starttime="20241125 10:52:49.147" endtime="20241125 10:52:49.147"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:49.147" endtime="20241125 10:52:49.148"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:49.150" endtime="20241125 10:52:49.151"/>
</kw>
<msg timestamp="20241125 10:52:49.151" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:49.150" endtime="20241125 10:52:49.151"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.153" level="INFO">${values} = [{'id': '7', 'actionId': '7', 'flowId': '3', 'order': 0, 'createdAt': '2024-11-24T16:52:52.808Z', 'updatedAt': '2024-11-24T16:52:52.808Z', 'action': {'id': '7', 'name': 'Get profile email', 'type': 'G...</msg>
<status status="PASS" starttime="20241125 10:52:49.152" endtime="20241125 10:52:49.153"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.155" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:49.155" endtime="20241125 10:52:49.156"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.154" endtime="20241125 10:52:49.156"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.157" endtime="20241125 10:52:49.157"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.156" endtime="20241125 10:52:49.157"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.154" endtime="20241125 10:52:49.157"/>
</if>
<status status="PASS" starttime="20241125 10:52:49.151" endtime="20241125 10:52:49.157"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.151" endtime="20241125 10:52:49.157"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:49.157" endtime="20241125 10:52:49.157"/>
</return>
<msg timestamp="20241125 10:52:49.158" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:49.150" endtime="20241125 10:52:49.158"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '7', 'actionId': '7', 'flowId': '3', 'order': 0, 'createdAt': '2024-11-24T16:52:52.808Z', 'updatedAt': '2024-11-24T16:52:52.808Z', 'action': {'id': '7', 'name': 'Get profile email', 'type': 'GE...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.159" level="INFO">${action} = {'id': '7', 'name': 'Get profile email', 'type': 'GET_TEXT', 'selectorI': '6', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:51:50.748Z', 'updatedAt': '2024-11-24T16:51:50.748Z', 'sel...</msg>
<status status="PASS" starttime="20241125 10:52:49.159" endtime="20241125 10:52:49.159"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:49.159" endtime="20241125 10:52:49.160"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:52:49.160" level="INFO">${input} = {'id': '7', 'actionId': '7', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:51:50.920Z', 'updatedAt': '2024-11-24T16:51:50.920Z'}</msg>
<status status="PASS" starttime="20241125 10:52:49.160" endtime="20241125 10:52:49.160"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.160" endtime="20241125 10:52:49.161"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.161" endtime="20241125 10:52:49.161"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.160" endtime="20241125 10:52:49.161"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.160" endtime="20241125 10:52:49.161"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.162" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:52:49.161" endtime="20241125 10:52:49.162"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:49.162" endtime="20241125 10:52:49.162"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.162" endtime="20241125 10:52:49.162"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:52:49.163" endtime="20241125 10:52:49.163"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.163" endtime="20241125 10:52:49.163"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.164" endtime="20241125 10:52:49.165"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.163" endtime="20241125 10:52:49.165"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.166" endtime="20241125 10:52:49.166"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.168" endtime="20241125 10:52:49.168"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.165" endtime="20241125 10:52:49.170"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.173" endtime="20241125 10:52:49.173"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.171" endtime="20241125 10:52:49.173"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.176" endtime="20241125 10:52:49.176"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.173" endtime="20241125 10:52:49.176"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.178" endtime="20241125 10:52:49.179"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.177" endtime="20241125 10:52:49.179"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.180" endtime="20241125 10:52:49.180"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.179" endtime="20241125 10:52:49.180"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.181" endtime="20241125 10:52:49.181"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.182" endtime="20241125 10:52:49.182"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.182" endtime="20241125 10:52:49.182"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.182" endtime="20241125 10:52:49.182"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.182" endtime="20241125 10:52:49.182"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.181" endtime="20241125 10:52:49.182"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.180" endtime="20241125 10:52:49.182"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:49.191" endtime="20241125 10:52:49.191"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.194" endtime="20241125 10:52:49.194"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.183" endtime="20241125 10:52:49.194"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.195" endtime="20241125 10:52:49.196"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.196" endtime="20241125 10:52:49.196"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.196" endtime="20241125 10:52:49.196"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.196" endtime="20241125 10:52:49.196"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.196" endtime="20241125 10:52:49.196"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.196" endtime="20241125 10:52:49.196"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.194" endtime="20241125 10:52:49.196"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:52:49.202" endtime="20241125 10:52:49.203"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.207" endtime="20241125 10:52:49.207"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.197" endtime="20241125 10:52:49.207"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.209" endtime="20241125 10:52:49.209"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.209" endtime="20241125 10:52:49.209"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.209" endtime="20241125 10:52:49.209"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.209" endtime="20241125 10:52:49.209"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.209" endtime="20241125 10:52:49.209"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.209" endtime="20241125 10:52:49.210"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.208" endtime="20241125 10:52:49.210"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:52:49.225" level="INFO">Waited for Element with selector //p[text()="EMAIL"]/following-sibling::p at state attached</msg>
<status status="PASS" starttime="20241125 10:52:49.216" endtime="20241125 10:52:49.225"/>
</kw>
<msg timestamp="20241125 10:52:49.225" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:49.215" endtime="20241125 10:52:49.225"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:49.225" endtime="20241125 10:52:49.226"/>
</return>
<status status="PASS" starttime="20241125 10:52:49.215" endtime="20241125 10:52:49.226"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.226" endtime="20241125 10:52:49.226"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.226" endtime="20241125 10:52:49.226"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.226" endtime="20241125 10:52:49.226"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.215" endtime="20241125 10:52:49.226"/>
</try>
<msg timestamp="20241125 10:52:49.227" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:52:49.215" endtime="20241125 10:52:49.227"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:52:49.227" endtime="20241125 10:52:49.227"/>
</return>
<status status="PASS" starttime="20241125 10:52:49.214" endtime="20241125 10:52:49.227"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:52:49.227" endtime="20241125 10:52:49.227"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.227" endtime="20241125 10:52:49.227"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.214" endtime="20241125 10:52:49.227"/>
</try>
<msg timestamp="20241125 10:52:49.227" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:52:49.214" endtime="20241125 10:52:49.227"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.229" endtime="20241125 10:52:49.229"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.229" endtime="20241125 10:52:49.229"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.229" endtime="20241125 10:52:49.230"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.229" endtime="20241125 10:52:49.230"/>
</if>
<status status="PASS" starttime="20241125 10:52:49.228" endtime="20241125 10:52:49.230"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.213" endtime="20241125 10:52:49.230"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:52:49.243" level="INFO">Property: ''</msg>
<msg timestamp="20241125 10:52:49.243" level="INFO">${property} = </msg>
<status status="PASS" starttime="20241125 10:52:49.230" endtime="20241125 10:52:49.243"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:52:49.243" endtime="20241125 10:52:49.243"/>
</return>
<status status="PASS" starttime="20241125 10:52:49.230" endtime="20241125 10:52:49.243"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.243" endtime="20241125 10:52:49.243"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.244" endtime="20241125 10:52:49.244"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.243" endtime="20241125 10:52:49.244"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.230" endtime="20241125 10:52:49.244"/>
</try>
<msg timestamp="20241125 10:52:49.244" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:52:49.211" endtime="20241125 10:52:49.244"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.210" endtime="20241125 10:52:49.244"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:52:49.249" endtime="20241125 10:52:49.249"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.250" endtime="20241125 10:52:49.250"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.244" endtime="20241125 10:52:49.250"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.162" endtime="20241125 10:52:49.250"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:49.250" endtime="20241125 10:52:49.250"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:52:49.251" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:52:49.250" endtime="20241125 10:52:49.251"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:52:49.251" endtime="20241125 10:52:49.251"/>
</return>
<msg timestamp="20241125 10:52:49.251" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:52:49.161" endtime="20241125 10:52:49.251"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.253" level="INFO">${key} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:52:49.253" endtime="20241125 10:52:49.254"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}"/>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.254" endtime="20241125 10:52:49.254"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.254" endtime="20241125 10:52:49.254"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.254" endtime="20241125 10:52:49.254"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.255" endtime="20241125 10:52:49.255"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.255" endtime="20241125 10:52:49.255"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.255" endtime="20241125 10:52:49.255"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.255" endtime="20241125 10:52:49.255"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.255" endtime="20241125 10:52:49.255"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.256" endtime="20241125 10:52:49.257"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.257" endtime="20241125 10:52:49.258"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:49.258" endtime="20241125 10:52:49.258"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.258" endtime="20241125 10:52:49.258"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.258" endtime="20241125 10:52:49.258"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.258" endtime="20241125 10:52:49.258"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:49.258" endtime="20241125 10:52:49.259"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.258" endtime="20241125 10:52:49.259"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.259" endtime="20241125 10:52:49.259"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:52:49.259" endtime="20241125 10:52:49.259"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.259" endtime="20241125 10:52:49.259"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.258" endtime="20241125 10:52:49.259"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.258" endtime="20241125 10:52:49.259"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.258" endtime="20241125 10:52:49.259"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.260" endtime="20241125 10:52:49.260"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:49.260" endtime="20241125 10:52:49.260"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.259" endtime="20241125 10:52:49.260"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.260" endtime="20241125 10:52:49.260"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:52:49.260" endtime="20241125 10:52:49.260"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.260" endtime="20241125 10:52:49.260"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.259" endtime="20241125 10:52:49.260"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.259" endtime="20241125 10:52:49.260"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.259" endtime="20241125 10:52:49.260"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.258" endtime="20241125 10:52:49.260"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.258" endtime="20241125 10:52:49.260"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:52:49.261" endtime="20241125 10:52:49.261"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.261" endtime="20241125 10:52:49.261"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.261" endtime="20241125 10:52:49.261"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.261" endtime="20241125 10:52:49.261"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.261" endtime="20241125 10:52:49.261"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.261" endtime="20241125 10:52:49.261"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.262" endtime="20241125 10:52:49.262"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:49.262" endtime="20241125 10:52:49.262"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.262" endtime="20241125 10:52:49.262"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.262" endtime="20241125 10:52:49.262"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:52:49.262" endtime="20241125 10:52:49.262"/>
</return>
<status status="NOT RUN" starttime="20241125 10:52:49.262" endtime="20241125 10:52:49.262"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.261" endtime="20241125 10:52:49.262"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.261" endtime="20241125 10:52:49.262"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.261" endtime="20241125 10:52:49.263"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.261" endtime="20241125 10:52:49.263"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:52:49.261" endtime="20241125 10:52:49.263"/>
</if>
<status status="NOT RUN" starttime="20241125 10:52:49.254" endtime="20241125 10:52:49.263"/>
</iter>
<status status="NOT RUN" starttime="20241125 10:52:49.254" endtime="20241125 10:52:49.263"/>
</for>
<msg timestamp="20241125 10:52:49.263" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:52:49.251" endtime="20241125 10:52:49.263"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:49.263" endtime="20241125 10:52:49.264"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:52:49.267" endtime="20241125 10:52:49.267"/>
</kw>
<msg timestamp="20241125 10:52:49.267" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:49.267" endtime="20241125 10:52:49.267"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.269" level="INFO">${values} = {'id': '6', 'name': 'Email', 'xpath': '//p[text()="EMAIL"]/following-sibling::p', 'pageId': '2', 'createdAt': '2024-11-24T16:50:29.634Z', 'updatedAt': '2024-11-24T16:50:29.634Z'}</msg>
<status status="PASS" starttime="20241125 10:52:49.268" endtime="20241125 10:52:49.269"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.271" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:49.271" endtime="20241125 10:52:49.271"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.270" endtime="20241125 10:52:49.271"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.271" endtime="20241125 10:52:49.271"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.271" endtime="20241125 10:52:49.272"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.270" endtime="20241125 10:52:49.272"/>
</if>
<status status="PASS" starttime="20241125 10:52:49.268" endtime="20241125 10:52:49.272"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.267" endtime="20241125 10:52:49.272"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:52:49.272" endtime="20241125 10:52:49.272"/>
</return>
<msg timestamp="20241125 10:52:49.272" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:52:49.267" endtime="20241125 10:52:49.272"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:52:49.273" level="INFO">${xpath} = //p[text()="EMAIL"]/following-sibling::p</msg>
<status status="PASS" starttime="20241125 10:52:49.273" endtime="20241125 10:52:49.273"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.272" endtime="20241125 10:52:49.273"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.273" endtime="20241125 10:52:49.273"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.273" endtime="20241125 10:52:49.273"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.272" endtime="20241125 10:52:49.273"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:49.274" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '120', 'status': 'COMPLETED', 'actionName': 'Get profile email', 'actionType': 'GET_TEXT', 'actionXpath': '//p[text()="EMAIL"]/following-sibling::p', 'inputValue': '', ...</msg>
<status status="PASS" starttime="20241125 10:52:49.273" endtime="20241125 10:52:49.274"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:52:49.275" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "120", "status": "COMPLETED", "actionName": "Get profile email", "actionType": "GET_TEXT", "actionXpath": "//p[text()=\"EMAIL\"]/following-sibling::p", "inputValue": ""...</msg>
<status status="PASS" starttime="20241125 10:52:49.275" endtime="20241125 10:52:49.275"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:52:49.280" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:52:49.280" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:52:49.275" endtime="20241125 10:52:49.280"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:49.280" endtime="20241125 10:52:49.281"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:52:49.281" endtime="20241125 10:52:49.281"/>
</return>
<status status="PASS" starttime="20241125 10:52:49.274" endtime="20241125 10:52:49.281"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.264" endtime="20241125 10:52:49.282"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.158" endtime="20241125 10:52:49.282"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.282" endtime="20241125 10:52:49.282"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:52:49.283" endtime="20241125 10:52:49.283"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.283" endtime="20241125 10:52:49.283"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.282" endtime="20241125 10:52:49.283"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.158" endtime="20241125 10:52:49.283"/>
</try>
<status status="PASS" starttime="20241125 10:52:49.158" endtime="20241125 10:52:49.284"/>
</iter>
<status status="PASS" starttime="20241125 10:52:49.158" endtime="20241125 10:52:49.284"/>
</for>
<status status="PASS" starttime="20241125 10:52:49.158" endtime="20241125 10:52:49.284"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.158" endtime="20241125 10:52:49.284"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:49.289" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '60', 'status': 'COMPLETED', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241125 10:52:49.287" endtime="20241125 10:52:49.289"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:52:49.291" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "60", "status": "COMPLETED", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241125 10:52:49.290" endtime="20241125 10:52:49.291"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:52:49.313" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:52:49.313" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:52:49.292" endtime="20241125 10:52:49.314"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:49.314" endtime="20241125 10:52:49.314"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:52:49.314" endtime="20241125 10:52:49.314"/>
</return>
<status status="PASS" starttime="20241125 10:52:49.289" endtime="20241125 10:52:49.315"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.284" endtime="20241125 10:52:49.315"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.147" endtime="20241125 10:52:49.315"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.315" endtime="20241125 10:52:49.315"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:52:49.315" endtime="20241125 10:52:49.315"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.316" endtime="20241125 10:52:49.316"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.315" endtime="20241125 10:52:49.316"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.146" endtime="20241125 10:52:49.316"/>
</try>
<status status="PASS" starttime="20241125 10:52:49.146" endtime="20241125 10:52:49.316"/>
</iter>
<status status="PASS" starttime="20241125 10:52:43.951" endtime="20241125 10:52:49.316"/>
</for>
<status status="PASS" starttime="20241125 10:52:43.950" endtime="20241125 10:52:49.316"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.950" endtime="20241125 10:52:49.316"/>
</if>
<kw name="send-test-case-run-message">
<arg>${testCaseRun}[id]</arg>
<arg>PASS</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseRunId=${testCaseRunId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:52:49.321" level="INFO">${response_message} = {'testCaseRunId': '22', 'status': 'PASS', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241125 10:52:49.319" endtime="20241125 10:52:49.321"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:52:49.323" level="INFO">${json_response} = {"testCaseRunId": "22", "status": "PASS", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241125 10:52:49.322" endtime="20241125 10:52:49.323"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:52:49.346" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:52:49.346" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:52:49.323" endtime="20241125 10:52:49.346"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:49.346" endtime="20241125 10:52:49.347"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:52:49.347" endtime="20241125 10:52:49.347"/>
</return>
<status status="PASS" starttime="20241125 10:52:49.321" endtime="20241125 10:52:49.348"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.316" endtime="20241125 10:52:49.348"/>
</kw>
<status status="PASS" starttime="20241125 10:52:43.932" endtime="20241125 10:52:49.348"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.348" endtime="20241125 10:52:49.348"/>
</kw>
<kw name="send-test-case-run-message">
<arg>${testCaseRun}[id]</arg>
<arg>FAIL</arg>
<arg>errorMessage=${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:52:49.348" endtime="20241125 10:52:49.349"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.349" endtime="20241125 10:52:49.349"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.348" endtime="20241125 10:52:49.349"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.932" endtime="20241125 10:52:49.349"/>
</try>
<status status="PASS" starttime="20241125 10:52:43.909" endtime="20241125 10:52:49.349"/>
</branch>
<branch type="ELSE">
<kw name="Log To Console" library="BuiltIn">
<arg>Command type not developed</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.350" endtime="20241125 10:52:49.350"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.349" endtime="20241125 10:52:49.350"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.908" endtime="20241125 10:52:49.350"/>
</if>
<status status="PASS" starttime="20241125 10:52:43.888" endtime="20241125 10:52:49.350"/>
</kw>
<status status="PASS" starttime="20241125 10:52:43.888" endtime="20241125 10:52:49.350"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.351" endtime="20241125 10:52:49.351"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.350" endtime="20241125 10:52:49.351"/>
</branch>
<status status="PASS" starttime="20241125 10:52:43.888" endtime="20241125 10:52:49.351"/>
</try>
<kw name="close-browser" library="COMP_BrowserContext">
<try>
<branch type="TRY">
<kw name="Close Browser" library="RPA.Browser.Playwright">
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Closes the current browser.</doc>
<msg timestamp="20241125 10:52:49.688" level="INFO">Closed browser</msg>
<status status="PASS" starttime="20241125 10:52:49.353" endtime="20241125 10:52:49.689"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.352" endtime="20241125 10:52:49.689"/>
</branch>
<branch type="EXCEPT" variable="${err}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while closing browser: ${err}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:52:49.689" endtime="20241125 10:52:49.690"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:52:49.689" endtime="20241125 10:52:49.690"/>
</branch>
<status status="PASS" starttime="20241125 10:52:49.352" endtime="20241125 10:52:49.690"/>
</try>
<status status="PASS" starttime="20241125 10:52:49.351" endtime="20241125 10:52:49.690"/>
</kw>
<status status="PASS" starttime="20241125 10:51:16.018" endtime="20241125 10:52:49.690"/>
</iter>
<iter>
<kw name="launch-browser" library="COMP_BrowserContext">
<kw name="New Browser" library="RPA.Browser.Playwright">
<arg>chromium</arg>
<arg>headless=False</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new playwright Browser with specified options.</doc>
<msg timestamp="20241125 10:52:49.692" level="INFO">{"browser": "chromium", "headless": false, "devtools": false, "handleSIGHUP": true, "handleSIGINT": true, "handleSIGTERM": true, "slowMo": 0.0, "timeout": 30000.0, "deprecated_pos_args": [], "tracesDir": "C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\1d73d414-f13f-46ed-90f4-8f8081fb8b36"}</msg>
<msg timestamp="20241125 10:52:50.185" level="INFO">Successfully created browser with options: {"browser":"chromium","headless":false,"devtools":false,"handleSIGHUP":true,"handleSIGINT":true,"handleSIGTERM":true,"slowMo":0,"timeout":30000,"deprecated_pos_args":[],"tracesDir":"C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\1d73d414-f13f-46ed-90f4-8f8081fb8b36"}</msg>
<status status="PASS" starttime="20241125 10:52:49.692" endtime="20241125 10:52:50.185"/>
</kw>
<kw name="New Context" library="RPA.Browser.Playwright">
<arg>viewport={'width': 1280, 'height': 720}</arg>
<arg>acceptDownloads=True</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new BrowserContext with specified options.</doc>
<msg timestamp="20241125 10:52:50.187" level="INFO">{
  "acceptDownloads": true,
  "bypassCSP": false,
  "forcedColors": "none",
  "hideRfBrowser": false,
  "ignoreHTTPSErrors": false,
  "javaScriptEnabled": true,
  "offline": false,
  "reducedMotion": "no-preference",
  "viewport": {
    "width": 1280,
    "height": 720
  },
  "deprecated_pos_args": []
}</msg>
<msg timestamp="20241125 10:52:50.207" level="INFO">Successfully created context. </msg>
<msg timestamp="20241125 10:52:50.207" level="INFO">{'acceptDownloads': True, 'bypassCSP': False, 'forcedColors': 'none', 'hideRfBrowser': False, 'ignoreHTTPSErrors': False, 'javaScriptEnabled': True, 'offline': False, 'reducedMotion': 'no-preference', 'viewport': {'width': 1280, 'height': 720}, 'deprecated_pos_args': []}</msg>
<status status="PASS" starttime="20241125 10:52:50.186" endtime="20241125 10:52:50.207"/>
</kw>
<kw name="Set Browser Timeout" library="RPA.Browser.Playwright">
<arg>${browser_timeout}</arg>
<tag>Config</tag>
<tag>Setter</tag>
<doc>Sets the timeout used by most input and getter keywords.</doc>
<status status="PASS" starttime="20241125 10:52:50.208" endtime="20241125 10:52:50.209"/>
</kw>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>https://www.google.com/</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241125 10:52:51.899" level="INFO">Successfully initialized new page object and opened url: https://www.google.com/</msg>
<msg timestamp="20241125 10:52:51.900" level="INFO">${page_id} = {'page_id': 'page=d1073c39-1c17-455d-ad06-eb62c67bb91c', 'video_path': ''}</msg>
<status status="PASS" starttime="20241125 10:52:50.209" endtime="20241125 10:52:51.900"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.691" endtime="20241125 10:52:51.900"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Polling message===&gt;</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:52:51.901" endtime="20241125 10:52:51.901"/>
</kw>
<kw name="Get A Command" library="CommandConsumer">
<var>${json}</var>
<arg>${5}</arg>
<msg timestamp="20241125 10:53:59.730" level="INFO">${json} = {'type': 'START_RUN', 'payload': {'testCaseRun': {'id': '23', 'testCaseId': '2', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-25T05:23:59.641Z', 'createdAt': '2024-11-25T05:23:59.641Z', 'errorMes...</msg>
<status status="PASS" starttime="20241125 10:52:51.902" endtime="20241125 10:53:59.730"/>
</kw>
<if>
<branch type="IF" condition="'${json}[type]' == 'KILL'">
<break>
<status status="NOT RUN" starttime="20241125 10:53:59.730" endtime="20241125 10:53:59.730"/>
</break>
<status status="NOT RUN" starttime="20241125 10:53:59.730" endtime="20241125 10:53:59.730"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.730" endtime="20241125 10:53:59.731"/>
</if>
<try>
<branch type="TRY">
<kw name="execute-test-case">
<arg>${json}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Data=&gt; ${input}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:53:59.732" endtime="20241125 10:53:59.741"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_type_exists}</var>
<arg>${input}</arg>
<arg>type</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:53:59.747" endtime="20241125 10:53:59.747"/>
</kw>
<msg timestamp="20241125 10:53:59.748" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.746" endtime="20241125 10:53:59.748"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.751" level="INFO">${values} = START_RUN</msg>
<status status="PASS" starttime="20241125 10:53:59.749" endtime="20241125 10:53:59.751"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.753" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.751" endtime="20241125 10:53:59.753"/>
</kw>
<status status="PASS" starttime="20241125 10:53:59.751" endtime="20241125 10:53:59.753"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:53:59.754" endtime="20241125 10:53:59.754"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:53:59.753" endtime="20241125 10:53:59.754"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.751" endtime="20241125 10:53:59.754"/>
</if>
<status status="PASS" starttime="20241125 10:53:59.748" endtime="20241125 10:53:59.755"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.748" endtime="20241125 10:53:59.755"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:53:59.755" endtime="20241125 10:53:59.755"/>
</return>
<msg timestamp="20241125 10:53:59.756" level="INFO">${is_type_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.745" endtime="20241125 10:53:59.756"/>
</kw>
<if>
<branch type="IF" condition="$is_type_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Type not exists in the input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:53:59.757" endtime="20241125 10:53:59.757"/>
</kw>
<return>
<status status="NOT RUN" starttime="20241125 10:53:59.758" endtime="20241125 10:53:59.758"/>
</return>
<status status="NOT RUN" starttime="20241125 10:53:59.757" endtime="20241125 10:53:59.758"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.757" endtime="20241125 10:53:59.758"/>
</if>
<if>
<branch type="IF" condition="'${input}[type]' == '${COMMAND_TYPE_START_RUN}'">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCase</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:53:59.764" endtime="20241125 10:53:59.764"/>
</kw>
<msg timestamp="20241125 10:53:59.764" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.763" endtime="20241125 10:53:59.764"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.767" level="INFO">${values} = {'id': '2', 'name': 'Check profile information', 'projectId': '1', 'createdAt': '2024-11-25T05:22:01.491Z', 'updatedAt': '2024-11-25T05:23:56.268Z', 'testCaseFlowSequences': [{'id': '4', 'testCaseId':...</msg>
<status status="PASS" starttime="20241125 10:53:59.765" endtime="20241125 10:53:59.767"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.768" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.768" endtime="20241125 10:53:59.768"/>
</kw>
<status status="PASS" starttime="20241125 10:53:59.767" endtime="20241125 10:53:59.768"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:53:59.768" endtime="20241125 10:53:59.768"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:53:59.768" endtime="20241125 10:53:59.768"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.767" endtime="20241125 10:53:59.769"/>
</if>
<status status="PASS" starttime="20241125 10:53:59.765" endtime="20241125 10:53:59.769"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.765" endtime="20241125 10:53:59.769"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:53:59.770" endtime="20241125 10:53:59.770"/>
</return>
<msg timestamp="20241125 10:53:59.771" level="INFO">${is_test_case_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.762" endtime="20241125 10:53:59.771"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_run_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCaseRun</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:53:59.781" endtime="20241125 10:53:59.783"/>
</kw>
<msg timestamp="20241125 10:53:59.783" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.780" endtime="20241125 10:53:59.783"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.784" level="INFO">${values} = {'id': '23', 'testCaseId': '2', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-25T05:23:59.641Z', 'createdAt': '2024-11-25T05:23:59.641Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241125 10:53:59.784" endtime="20241125 10:53:59.784"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.785" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.785" endtime="20241125 10:53:59.786"/>
</kw>
<status status="PASS" starttime="20241125 10:53:59.785" endtime="20241125 10:53:59.786"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:53:59.787" endtime="20241125 10:53:59.787"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:53:59.786" endtime="20241125 10:53:59.787"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.784" endtime="20241125 10:53:59.787"/>
</if>
<status status="PASS" starttime="20241125 10:53:59.783" endtime="20241125 10:53:59.788"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.783" endtime="20241125 10:53:59.788"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:53:59.788" endtime="20241125 10:53:59.789"/>
</return>
<msg timestamp="20241125 10:53:59.790" level="INFO">${is_test_case_run_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.779" endtime="20241125 10:53:59.790"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_exists == $False or $is_test_case_run_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Testcase or TestCaseRun data not available in input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:53:59.791" endtime="20241125 10:53:59.792"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:53:59.791" endtime="20241125 10:53:59.792"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.790" endtime="20241125 10:53:59.792"/>
</if>
<kw name="Set Variable" library="BuiltIn">
<var>${testCase}</var>
<arg>${input}[payload][testCase]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.794" level="INFO">${testCase} = {'id': '2', 'name': 'Check profile information', 'projectId': '1', 'createdAt': '2024-11-25T05:22:01.491Z', 'updatedAt': '2024-11-25T05:23:56.268Z', 'testCaseFlowSequences': [{'id': '4', 'testCaseId':...</msg>
<status status="PASS" starttime="20241125 10:53:59.793" endtime="20241125 10:53:59.794"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${testCaseRun}</var>
<arg>${input}[payload][testCaseRun]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.795" level="INFO">${testCaseRun} = {'id': '23', 'testCaseId': '2', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-25T05:23:59.641Z', 'createdAt': '2024-11-25T05:23:59.641Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241125 10:53:59.794" endtime="20241125 10:53:59.795"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${assertions}</var>
<arg>${testCase}[assertions]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.796" level="INFO">${assertions} = [{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTar...</msg>
<status status="PASS" starttime="20241125 10:53:59.795" endtime="20241125 10:53:59.796"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Name: ${testCase}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:53:59.796" endtime="20241125 10:53:59.797"/>
</kw>
<try>
<branch type="TRY">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_flow_sequences_exists}</var>
<arg>${testCase}</arg>
<arg>testCaseFlowSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:53:59.800" endtime="20241125 10:53:59.800"/>
</kw>
<msg timestamp="20241125 10:53:59.800" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.800" endtime="20241125 10:53:59.800"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.801" level="INFO">${values} = [{'id': '4', 'testCaseId': '2', 'flowId': '1', 'order': 0, 'createdAt': '2024-11-25T05:22:01.703Z', 'updatedAt': '2024-11-25T05:23:56.306Z', 'flow': {'id': '1', 'name': 'Login', 'projectId': '1', 'cre...</msg>
<status status="PASS" starttime="20241125 10:53:59.801" endtime="20241125 10:53:59.801"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.803" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.802" endtime="20241125 10:53:59.803"/>
</kw>
<status status="PASS" starttime="20241125 10:53:59.802" endtime="20241125 10:53:59.803"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:53:59.803" endtime="20241125 10:53:59.803"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:53:59.803" endtime="20241125 10:53:59.804"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.801" endtime="20241125 10:53:59.804"/>
</if>
<status status="PASS" starttime="20241125 10:53:59.801" endtime="20241125 10:53:59.804"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.800" endtime="20241125 10:53:59.804"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:53:59.804" endtime="20241125 10:53:59.804"/>
</return>
<msg timestamp="20241125 10:53:59.805" level="INFO">${is_test_case_flow_sequences_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.799" endtime="20241125 10:53:59.805"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${test_case_run_response_message}</var>
<arg>testCaseRunId=${testCaseRun}[id]</arg>
<arg>status=STARTED</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:53:59.809" level="INFO">${test_case_run_response_message} = {'testCaseRunId': '23', 'status': 'STARTED'}</msg>
<status status="PASS" starttime="20241125 10:53:59.807" endtime="20241125 10:53:59.809"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${test_case_run_response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:53:59.810" level="INFO">${json_response} = {"testCaseRunId": "23", "status": "STARTED"}</msg>
<status status="PASS" starttime="20241125 10:53:59.810" endtime="20241125 10:53:59.810"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:53:59.815" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:53:59.815" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:53:59.811" endtime="20241125 10:53:59.815"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:53:59.815" endtime="20241125 10:53:59.816"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:53:59.817" endtime="20241125 10:53:59.817"/>
</return>
<status status="PASS" starttime="20241125 10:53:59.809" endtime="20241125 10:53:59.817"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_flow_sequences_exists">
<kw name="Create Dictionary" library="BuiltIn">
<var>${ACCUMULATION}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:53:59.819" level="INFO">${ACCUMULATION} = {}</msg>
<status status="PASS" starttime="20241125 10:53:59.818" endtime="20241125 10:53:59.819"/>
</kw>
<for flavor="IN">
<var>${testCaseFlowSequence}</var>
<value>@{testCase}[testCaseFlowSequences]</value>
<iter>
<var name="${testCaseFlowSequence}">{'id': '4', 'testCaseId': '2', 'flowId': '1', 'order': 0, 'createdAt': '2024-11-25T05:22:01.703Z', 'updatedAt': '2024-11-25T05:23:56.306Z', 'flow': {'id': '1', 'name': 'Login', 'projectId': '1', 'crea...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.827" level="INFO">${flow} = {'id': '1', 'name': 'Login', 'projectId': '1', 'createdAt': '2024-11-24T16:52:08.694Z', 'updatedAt': '2024-11-24T17:34:15.823Z', 'flowActionSequences': [{'id': '8', 'actionId': '9', 'flowId': '1', 'or...</msg>
<status status="PASS" starttime="20241125 10:53:59.826" endtime="20241125 10:53:59.827"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:53:59.827" endtime="20241125 10:53:59.828"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:53:59.831" endtime="20241125 10:53:59.831"/>
</kw>
<msg timestamp="20241125 10:53:59.831" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.830" endtime="20241125 10:53:59.831"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.832" level="INFO">${values} = [{'id': '8', 'actionId': '9', 'flowId': '1', 'order': 0, 'createdAt': '2024-11-24T17:32:34.803Z', 'updatedAt': '2024-11-24T17:34:15.591Z', 'action': {'id': '9', 'name': 'Launch browser', 'type': 'LAUN...</msg>
<status status="PASS" starttime="20241125 10:53:59.832" endtime="20241125 10:53:59.832"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.833" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.833" endtime="20241125 10:53:59.833"/>
</kw>
<status status="PASS" starttime="20241125 10:53:59.832" endtime="20241125 10:53:59.833"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:53:59.833" endtime="20241125 10:53:59.833"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:53:59.833" endtime="20241125 10:53:59.833"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.832" endtime="20241125 10:53:59.833"/>
</if>
<status status="PASS" starttime="20241125 10:53:59.832" endtime="20241125 10:53:59.834"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.831" endtime="20241125 10:53:59.834"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:53:59.834" endtime="20241125 10:53:59.834"/>
</return>
<msg timestamp="20241125 10:53:59.834" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241125 10:53:59.830" endtime="20241125 10:53:59.834"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '8', 'actionId': '9', 'flowId': '1', 'order': 0, 'createdAt': '2024-11-24T17:32:34.803Z', 'updatedAt': '2024-11-24T17:34:15.591Z', 'action': {'id': '9', 'name': 'Launch browser', 'type': 'LAUNC...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.836" level="INFO">${action} = {'id': '9', 'name': 'Launch browser', 'type': 'LAUNCH_BROWSER', 'selectorI': None, 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T17:32:06.229Z', 'updatedAt': '2024-11-24T17:32:06.229Z', ...</msg>
<status status="PASS" starttime="20241125 10:53:59.835" endtime="20241125 10:53:59.836"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:53:59.836" endtime="20241125 10:53:59.838"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:53:59.841" level="INFO">${input} = {'id': '9', 'actionId': '9', 'name': 'Input 01', 'value': 'https://iassistant.ideas2it.com/login', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T17:32:06.579Z', 'updatedAt': '202...</msg>
<status status="PASS" starttime="20241125 10:53:59.840" endtime="20241125 10:53:59.841"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:53:59.842" endtime="20241125 10:53:59.843"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:53:59.843" endtime="20241125 10:53:59.843"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:53:59.842" endtime="20241125 10:53:59.843"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.841" endtime="20241125 10:53:59.844"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:53:59.845" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241125 10:53:59.845" endtime="20241125 10:53:59.845"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>${url}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241125 10:54:02.178" level="INFO">Successfully initialized new page object and opened url: https://iassistant.ideas2it.com/login</msg>
<msg timestamp="20241125 10:54:02.179" level="INFO">${page_id} = {'page_id': 'page=3182b4e7-40f5-42b5-8c99-0763cc8bb38f', 'video_path': ''}</msg>
<status status="PASS" starttime="20241125 10:53:59.847" endtime="20241125 10:54:02.179"/>
</kw>
<kw name="Switch Page" library="RPA.Browser.Playwright">
<arg>${page_id}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Switches the active browser page to another open page by ``id`` or ``NEW``.</doc>
<msg timestamp="20241125 10:54:02.179" level="INFO">Switching to page {'page_id': 'page=3182b4e7-40f5-42b5-8c99-0763cc8bb38f', 'video_path': ''},context CURRENT, browser CURRENT</msg>
<msg timestamp="20241125 10:54:02.200" level="INFO">[
  {
    "type": "chromium",
    "id": "browser=86c98697-ece1-4ba4-a4ce-fdd9b5be2922",
    "contexts": [
      {
        "type": "context",
        "id": "context=1be178ac-cfe2-4349-9145-b6348889f6ff",
        "activePage": "page=3182b4e7-40f5-42b5-8c99-0763cc8bb38f",
        "pages": [
          {
            "type": "page",
            "title": "Google",
            "url": "https://www.google.com/",
            "id": "page=d1073c39-1c17-455d-ad06-eb62c67bb91c",
            "timestamp": 1732512170.412
          },
          {
            "type": "page",
            "title": "iAssistant",
            "url": "https://iassistant.ideas2it.com/login",
            "id": "page=3182b4e7-40f5-42b5-8c99-0763cc8bb38f",
            "timestamp": 1732512239.897
          }
        ]
      }
    ],
    "activeContext": "context=1be178ac-cfe2-4349-9145-b6348889f6ff",
    "activeBrowser": true
  }
]</msg>
<msg timestamp="20241125 10:54:02.205" level="INFO">Successfully changed active page</msg>
<status status="PASS" starttime="20241125 10:54:02.179" endtime="20241125 10:54:02.205"/>
</kw>
<status status="PASS" starttime="20241125 10:53:59.846" endtime="20241125 10:54:02.206"/>
</kw>
<status status="PASS" starttime="20241125 10:53:59.846" endtime="20241125 10:54:02.206"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:02.206" endtime="20241125 10:54:02.207"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.206" endtime="20241125 10:54:02.207"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.209" endtime="20241125 10:54:02.209"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.207" endtime="20241125 10:54:02.209"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.211" endtime="20241125 10:54:02.211"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.213" endtime="20241125 10:54:02.213"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.209" endtime="20241125 10:54:02.213"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.214" endtime="20241125 10:54:02.214"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.213" endtime="20241125 10:54:02.214"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.216" endtime="20241125 10:54:02.217"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.214" endtime="20241125 10:54:02.217"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.220" endtime="20241125 10:54:02.220"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.217" endtime="20241125 10:54:02.220"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.221" endtime="20241125 10:54:02.221"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.220" endtime="20241125 10:54:02.221"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.222" endtime="20241125 10:54:02.222"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.222" endtime="20241125 10:54:02.223"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.222" endtime="20241125 10:54:02.223"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.223" endtime="20241125 10:54:02.223"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.223" endtime="20241125 10:54:02.223"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.222" endtime="20241125 10:54:02.223"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.221" endtime="20241125 10:54:02.223"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:02.228" endtime="20241125 10:54:02.228"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.232" endtime="20241125 10:54:02.232"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.223" endtime="20241125 10:54:02.232"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.234" endtime="20241125 10:54:02.234"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.235" endtime="20241125 10:54:02.235"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.235" endtime="20241125 10:54:02.235"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.236" endtime="20241125 10:54:02.236"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.235" endtime="20241125 10:54:02.236"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.234" endtime="20241125 10:54:02.236"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.232" endtime="20241125 10:54:02.236"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:02.241" endtime="20241125 10:54:02.241"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.244" endtime="20241125 10:54:02.244"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.236" endtime="20241125 10:54:02.244"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.245" endtime="20241125 10:54:02.245"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.245" endtime="20241125 10:54:02.245"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.245" endtime="20241125 10:54:02.245"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.246" endtime="20241125 10:54:02.246"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.245" endtime="20241125 10:54:02.246"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.245" endtime="20241125 10:54:02.246"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.244" endtime="20241125 10:54:02.246"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.248" endtime="20241125 10:54:02.248"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.246" endtime="20241125 10:54:02.248"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:02.255" endtime="20241125 10:54:02.255"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.255" endtime="20241125 10:54:02.255"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.248" endtime="20241125 10:54:02.256"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.845" endtime="20241125 10:54:02.256"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:02.256" endtime="20241125 10:54:02.256"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:02.257" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:02.257" endtime="20241125 10:54:02.257"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:02.257" endtime="20241125 10:54:02.258"/>
</return>
<msg timestamp="20241125 10:54:02.258" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241125 10:53:59.844" endtime="20241125 10:54:02.258"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.260" level="INFO">${key} = testCaseFlowSequenceId:4::flowActionSequenceId:8</msg>
<status status="PASS" starttime="20241125 10:54:02.259" endtime="20241125 10:54:02.260"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.260" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:02.260" endtime="20241125 10:54:02.260"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.261" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:02.261" endtime="20241125 10:54:02.261"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.261" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.261" endtime="20241125 10:54:02.261"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.262" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:02.261" endtime="20241125 10:54:02.262"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.262" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.262" endtime="20241125 10:54:02.262"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.262" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241125 10:54:02.262" endtime="20241125 10:54:02.262"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.263" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:02.263" endtime="20241125 10:54:02.263"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:02.263" endtime="20241125 10:54:02.263"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:02.266" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:6::flowActionSequenceId:7'.</msg>
<status status="FAIL" starttime="20241125 10:54:02.265" endtime="20241125 10:54:02.266"/>
</kw>
<msg timestamp="20241125 10:54:02.266" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.265" endtime="20241125 10:54:02.266"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.267" endtime="20241125 10:54:02.267"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.267" endtime="20241125 10:54:02.267"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.267" endtime="20241125 10:54:02.267"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.268" endtime="20241125 10:54:02.268"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.267" endtime="20241125 10:54:02.268"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.267" endtime="20241125 10:54:02.268"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.266" endtime="20241125 10:54:02.268"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.266" endtime="20241125 10:54:02.268"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:02.268" endtime="20241125 10:54:02.268"/>
</return>
<msg timestamp="20241125 10:54:02.268" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.264" endtime="20241125 10:54:02.268"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:02.271" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:4::flowActionSequenceId:2'.</msg>
<status status="FAIL" starttime="20241125 10:54:02.270" endtime="20241125 10:54:02.271"/>
</kw>
<msg timestamp="20241125 10:54:02.271" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.270" endtime="20241125 10:54:02.271"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.271" endtime="20241125 10:54:02.271"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.272" endtime="20241125 10:54:02.272"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.272" endtime="20241125 10:54:02.272"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.272" endtime="20241125 10:54:02.272"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.272" endtime="20241125 10:54:02.272"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.272" endtime="20241125 10:54:02.273"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.271" endtime="20241125 10:54:02.273"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.271" endtime="20241125 10:54:02.273"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:02.273" endtime="20241125 10:54:02.273"/>
</return>
<msg timestamp="20241125 10:54:02.273" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.270" endtime="20241125 10:54:02.273"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:02.274" endtime="20241125 10:54:02.274"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.274" endtime="20241125 10:54:02.274"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.274" endtime="20241125 10:54:02.274"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.274" endtime="20241125 10:54:02.274"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.275" endtime="20241125 10:54:02.275"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.274" endtime="20241125 10:54:02.275"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.275" endtime="20241125 10:54:02.275"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.275" endtime="20241125 10:54:02.275"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.275" endtime="20241125 10:54:02.275"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.274" endtime="20241125 10:54:02.275"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.274" endtime="20241125 10:54:02.275"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.274" endtime="20241125 10:54:02.275"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.276" endtime="20241125 10:54:02.276"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:02.276" endtime="20241125 10:54:02.276"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.275" endtime="20241125 10:54:02.276"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.276" endtime="20241125 10:54:02.276"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:02.276" endtime="20241125 10:54:02.276"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.276" endtime="20241125 10:54:02.276"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.275" endtime="20241125 10:54:02.276"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.275" endtime="20241125 10:54:02.276"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.275" endtime="20241125 10:54:02.276"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.274" endtime="20241125 10:54:02.276"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.273" endtime="20241125 10:54:02.277"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:02.277" endtime="20241125 10:54:02.277"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.277" endtime="20241125 10:54:02.277"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.277" endtime="20241125 10:54:02.277"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.277" endtime="20241125 10:54:02.277"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.277" endtime="20241125 10:54:02.278"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.277" endtime="20241125 10:54:02.278"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.278" endtime="20241125 10:54:02.278"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:02.278" endtime="20241125 10:54:02.278"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.278" endtime="20241125 10:54:02.278"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.278" endtime="20241125 10:54:02.278"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:02.278" endtime="20241125 10:54:02.279"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.278" endtime="20241125 10:54:02.279"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.278" endtime="20241125 10:54:02.279"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.278" endtime="20241125 10:54:02.279"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.278" endtime="20241125 10:54:02.279"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.277" endtime="20241125 10:54:02.279"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.277" endtime="20241125 10:54:02.279"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.260" endtime="20241125 10:54:02.279"/>
</iter>
<status status="PASS" starttime="20241125 10:54:02.260" endtime="20241125 10:54:02.279"/>
</for>
<msg timestamp="20241125 10:54:02.279" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:54:02.258" endtime="20241125 10:54:02.279"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:02.279" endtime="20241125 10:54:02.280"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:02.285" level="FAIL">Dictionary does not contain key 'selector'.</msg>
<status status="FAIL" starttime="20241125 10:54:02.284" endtime="20241125 10:54:02.285"/>
</kw>
<msg timestamp="20241125 10:54:02.285" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.283" endtime="20241125 10:54:02.285"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.286" endtime="20241125 10:54:02.286"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.286" endtime="20241125 10:54:02.286"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.286" endtime="20241125 10:54:02.287"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.287" endtime="20241125 10:54:02.288"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.287" endtime="20241125 10:54:02.288"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.286" endtime="20241125 10:54:02.288"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.286" endtime="20241125 10:54:02.288"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.285" endtime="20241125 10:54:02.288"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:02.289" endtime="20241125 10:54:02.289"/>
</return>
<msg timestamp="20241125 10:54:02.289" level="INFO">${is_selector_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.283" endtime="20241125 10:54:02.289"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.289" endtime="20241125 10:54:02.290"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.289" endtime="20241125 10:54:02.290"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.290" level="INFO">${xpath} = </msg>
<status status="PASS" starttime="20241125 10:54:02.290" endtime="20241125 10:54:02.290"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.290" endtime="20241125 10:54:02.291"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.289" endtime="20241125 10:54:02.291"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:02.291" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '121', 'status': 'COMPLETED', 'actionName': 'Launch browser', 'actionType': 'LAUNCH_BROWSER', 'actionXpath': '', 'inputValue': 'https://iassistant.ideas2it.com/login', ...</msg>
<status status="PASS" starttime="20241125 10:54:02.291" endtime="20241125 10:54:02.291"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:02.292" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "121", "status": "COMPLETED", "actionName": "Launch browser", "actionType": "LAUNCH_BROWSER", "actionXpath": "", "inputValue": "https://iassistant.ideas2it.com/login", ...</msg>
<status status="PASS" starttime="20241125 10:54:02.292" endtime="20241125 10:54:02.292"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:02.320" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:02.320" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:02.292" endtime="20241125 10:54:02.320"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:02.321" endtime="20241125 10:54:02.321"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:02.321" endtime="20241125 10:54:02.321"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.292" endtime="20241125 10:54:02.322"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.280" endtime="20241125 10:54:02.322"/>
</kw>
<status status="PASS" starttime="20241125 10:53:59.835" endtime="20241125 10:54:02.322"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.322" endtime="20241125 10:54:02.322"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:02.322" endtime="20241125 10:54:02.322"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.323" endtime="20241125 10:54:02.323"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.322" endtime="20241125 10:54:02.323"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.835" endtime="20241125 10:54:02.323"/>
</try>
<status status="PASS" starttime="20241125 10:53:59.835" endtime="20241125 10:54:02.323"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '2', 'actionId': '2', 'flowId': '1', 'order': 1, 'createdAt': '2024-11-24T16:52:08.810Z', 'updatedAt': '2024-11-24T17:34:15.602Z', 'action': {'id': '2', 'name': 'Set username', 'type': 'TYPE_TE...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.324" level="INFO">${action} = {'id': '2', 'name': 'Set username', 'type': 'TYPE_TEXT', 'selectorI': '1', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:43:45.668Z', 'updatedAt': '2024-11-24T16:43:45.668Z', 'selecto...</msg>
<status status="PASS" starttime="20241125 10:54:02.324" endtime="20241125 10:54:02.324"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:02.324" endtime="20241125 10:54:02.325"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:02.325" level="INFO">${input} = {'id': '2', 'actionId': '2', 'name': 'Bharani', 'value': 'bharani@ideas2it.com', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:43:45.923Z', 'updatedAt': '2024-11-24T16:44:01.1...</msg>
<status status="PASS" starttime="20241125 10:54:02.325" endtime="20241125 10:54:02.325"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.326" endtime="20241125 10:54:02.326"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.326" endtime="20241125 10:54:02.326"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.326" endtime="20241125 10:54:02.326"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.325" endtime="20241125 10:54:02.326"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.328" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:02.327" endtime="20241125 10:54:02.328"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:02.328" endtime="20241125 10:54:02.328"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.328" endtime="20241125 10:54:02.328"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:02.329" endtime="20241125 10:54:02.329"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.328" endtime="20241125 10:54:02.329"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.331" endtime="20241125 10:54:02.331"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.329" endtime="20241125 10:54:02.331"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.333" endtime="20241125 10:54:02.334"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.336" endtime="20241125 10:54:02.337"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.331" endtime="20241125 10:54:02.337"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.338" endtime="20241125 10:54:02.338"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.337" endtime="20241125 10:54:02.338"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.341" endtime="20241125 10:54:02.341"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.338" endtime="20241125 10:54:02.341"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>selector::${selector}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:02.343" endtime="20241125 10:54:02.343"/>
</kw>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="username"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.369" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:02.348" endtime="20241125 10:54:02.370"/>
</kw>
<msg timestamp="20241125 10:54:02.370" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.348" endtime="20241125 10:54:02.370"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.370" endtime="20241125 10:54:02.370"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.348" endtime="20241125 10:54:02.370"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.371" endtime="20241125 10:54:02.371"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.371" endtime="20241125 10:54:02.371"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.370" endtime="20241125 10:54:02.371"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.348" endtime="20241125 10:54:02.372"/>
</try>
<msg timestamp="20241125 10:54:02.372" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.347" endtime="20241125 10:54:02.372"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.372" endtime="20241125 10:54:02.372"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.345" endtime="20241125 10:54:02.372"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.373" endtime="20241125 10:54:02.373"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.373" endtime="20241125 10:54:02.373"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.345" endtime="20241125 10:54:02.373"/>
</try>
<msg timestamp="20241125 10:54:02.374" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.345" endtime="20241125 10:54:02.374"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.378" endtime="20241125 10:54:02.378"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.378" endtime="20241125 10:54:02.378"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.378" endtime="20241125 10:54:02.379"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.378" endtime="20241125 10:54:02.379"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.376" endtime="20241125 10:54:02.379"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.345" endtime="20241125 10:54:02.379"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.400" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:02.394" endtime="20241125 10:54:02.401"/>
</kw>
<msg timestamp="20241125 10:54:02.401" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.394" endtime="20241125 10:54:02.401"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.401" endtime="20241125 10:54:02.401"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.393" endtime="20241125 10:54:02.401"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.401" endtime="20241125 10:54:02.401"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.402" endtime="20241125 10:54:02.402"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.401" endtime="20241125 10:54:02.402"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.393" endtime="20241125 10:54:02.402"/>
</try>
<msg timestamp="20241125 10:54:02.402" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.393" endtime="20241125 10:54:02.402"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.402" endtime="20241125 10:54:02.402"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.391" endtime="20241125 10:54:02.402"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.403" endtime="20241125 10:54:02.403"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.403" endtime="20241125 10:54:02.403"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.391" endtime="20241125 10:54:02.403"/>
</try>
<msg timestamp="20241125 10:54:02.403" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.391" endtime="20241125 10:54:02.403"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.406" endtime="20241125 10:54:02.406"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.406" endtime="20241125 10:54:02.406"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.405" endtime="20241125 10:54:02.406"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.405" endtime="20241125 10:54:02.406"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.404" endtime="20241125 10:54:02.406"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.390" endtime="20241125 10:54:02.406"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:02.423" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241125 10:54:02.423" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:02.407" endtime="20241125 10:54:02.423"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:02.423" endtime="20241125 10:54:02.423"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.406" endtime="20241125 10:54:02.423"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.424" endtime="20241125 10:54:02.424"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.424" endtime="20241125 10:54:02.424"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.423" endtime="20241125 10:54:02.424"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.406" endtime="20241125 10:54:02.424"/>
</try>
<msg timestamp="20241125 10:54:02.424" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:02.386" endtime="20241125 10:54:02.424"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.427" endtime="20241125 10:54:02.427"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.427" endtime="20241125 10:54:02.427"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.426" endtime="20241125 10:54:02.427"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.426" endtime="20241125 10:54:02.427"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.425" endtime="20241125 10:54:02.427"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.384" endtime="20241125 10:54:02.427"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.427" endtime="20241125 10:54:02.428"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.427" endtime="20241125 10:54:02.428"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.384" endtime="20241125 10:54:02.428"/>
</try>
<status status="PASS" starttime="20241125 10:54:02.382" endtime="20241125 10:54:02.428"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.438" level="INFO">Waited for Element with selector //input[@id="username"] at state visible</msg>
<status status="PASS" starttime="20241125 10:54:02.433" endtime="20241125 10:54:02.438"/>
</kw>
<msg timestamp="20241125 10:54:02.439" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.432" endtime="20241125 10:54:02.439"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.439" endtime="20241125 10:54:02.439"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.432" endtime="20241125 10:54:02.439"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.440" endtime="20241125 10:54:02.440"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.440" endtime="20241125 10:54:02.440"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.440" endtime="20241125 10:54:02.440"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.432" endtime="20241125 10:54:02.440"/>
</try>
<msg timestamp="20241125 10:54:02.440" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.432" endtime="20241125 10:54:02.440"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.441" endtime="20241125 10:54:02.441"/>
</return>
<msg timestamp="20241125 10:54:02.441" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.430" endtime="20241125 10:54:02.441"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.443" endtime="20241125 10:54:02.443"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.443" endtime="20241125 10:54:02.443"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.443" endtime="20241125 10:54:02.444"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.443" endtime="20241125 10:54:02.444"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.442" endtime="20241125 10:54:02.444"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.430" endtime="20241125 10:54:02.444"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.343" endtime="20241125 10:54:02.444"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.462" level="INFO">Waited for Element with selector //input[@id="username"] at state editable</msg>
<status status="PASS" starttime="20241125 10:54:02.448" endtime="20241125 10:54:02.463"/>
</kw>
<msg timestamp="20241125 10:54:02.463" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.448" endtime="20241125 10:54:02.463"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.463" endtime="20241125 10:54:02.463"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.447" endtime="20241125 10:54:02.463"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.463" endtime="20241125 10:54:02.463"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.464" endtime="20241125 10:54:02.464"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.463" endtime="20241125 10:54:02.464"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.447" endtime="20241125 10:54:02.464"/>
</try>
<msg timestamp="20241125 10:54:02.464" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.447" endtime="20241125 10:54:02.464"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.464" endtime="20241125 10:54:02.464"/>
</return>
<msg timestamp="20241125 10:54:02.464" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.446" endtime="20241125 10:54:02.464"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.467" endtime="20241125 10:54:02.467"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.467" endtime="20241125 10:54:02.467"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.467" endtime="20241125 10:54:02.467"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.466" endtime="20241125 10:54:02.467"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.465" endtime="20241125 10:54:02.468"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.446" endtime="20241125 10:54:02.468"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:02.469" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:54:02.468" endtime="20241125 10:54:02.469"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="username"]: string</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.470" endtime="20241125 10:54:02.470"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.472" endtime="20241125 10:54:02.472"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.470" endtime="20241125 10:54:02.472"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:02.472" endtime="20241125 10:54:02.473"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.472" endtime="20241125 10:54:02.473"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.470" endtime="20241125 10:54:02.473"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241125 10:54:02.473" level="INFO">Fills the text 'bharani@ideas2it.com' in the given field.</msg>
<status status="PASS" starttime="20241125 10:54:02.473" endtime="20241125 10:54:02.499"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.473" endtime="20241125 10:54:02.499"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.499" endtime="20241125 10:54:02.499"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.499" endtime="20241125 10:54:02.499"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.499" endtime="20241125 10:54:02.499"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.473" endtime="20241125 10:54:02.500"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="username"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.512" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:02.507" endtime="20241125 10:54:02.512"/>
</kw>
<msg timestamp="20241125 10:54:02.513" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.506" endtime="20241125 10:54:02.513"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.513" endtime="20241125 10:54:02.513"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.506" endtime="20241125 10:54:02.513"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.513" endtime="20241125 10:54:02.513"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.513" endtime="20241125 10:54:02.514"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.513" endtime="20241125 10:54:02.514"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.506" endtime="20241125 10:54:02.514"/>
</try>
<msg timestamp="20241125 10:54:02.514" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.506" endtime="20241125 10:54:02.514"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.514" endtime="20241125 10:54:02.514"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.505" endtime="20241125 10:54:02.514"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.515" endtime="20241125 10:54:02.515"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.515" endtime="20241125 10:54:02.515"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.505" endtime="20241125 10:54:02.515"/>
</try>
<msg timestamp="20241125 10:54:02.515" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.505" endtime="20241125 10:54:02.515"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.520" endtime="20241125 10:54:02.520"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.520" endtime="20241125 10:54:02.520"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.519" endtime="20241125 10:54:02.521"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.519" endtime="20241125 10:54:02.521"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.517" endtime="20241125 10:54:02.521"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.504" endtime="20241125 10:54:02.521"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.534" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:02.529" endtime="20241125 10:54:02.534"/>
</kw>
<msg timestamp="20241125 10:54:02.535" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.528" endtime="20241125 10:54:02.535"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.535" endtime="20241125 10:54:02.535"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.528" endtime="20241125 10:54:02.535"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.535" endtime="20241125 10:54:02.535"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.536" endtime="20241125 10:54:02.536"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.535" endtime="20241125 10:54:02.536"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.528" endtime="20241125 10:54:02.536"/>
</try>
<msg timestamp="20241125 10:54:02.537" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.528" endtime="20241125 10:54:02.537"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.537" endtime="20241125 10:54:02.537"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.527" endtime="20241125 10:54:02.537"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.537" endtime="20241125 10:54:02.537"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.537" endtime="20241125 10:54:02.537"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.527" endtime="20241125 10:54:02.537"/>
</try>
<msg timestamp="20241125 10:54:02.538" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.526" endtime="20241125 10:54:02.538"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.540" endtime="20241125 10:54:02.540"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.540" endtime="20241125 10:54:02.540"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.540" endtime="20241125 10:54:02.541"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.540" endtime="20241125 10:54:02.541"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.539" endtime="20241125 10:54:02.541"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.526" endtime="20241125 10:54:02.541"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:02.550" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241125 10:54:02.550" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:02.541" endtime="20241125 10:54:02.550"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:02.551" endtime="20241125 10:54:02.551"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.541" endtime="20241125 10:54:02.551"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.551" endtime="20241125 10:54:02.552"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.552" endtime="20241125 10:54:02.552"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.551" endtime="20241125 10:54:02.552"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.541" endtime="20241125 10:54:02.552"/>
</try>
<msg timestamp="20241125 10:54:02.552" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:02.524" endtime="20241125 10:54:02.553"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.554" endtime="20241125 10:54:02.555"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.555" endtime="20241125 10:54:02.555"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.554" endtime="20241125 10:54:02.555"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.554" endtime="20241125 10:54:02.555"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.553" endtime="20241125 10:54:02.555"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.523" endtime="20241125 10:54:02.555"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.555" endtime="20241125 10:54:02.555"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.555" endtime="20241125 10:54:02.555"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.523" endtime="20241125 10:54:02.556"/>
</try>
<status status="PASS" starttime="20241125 10:54:02.523" endtime="20241125 10:54:02.556"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.564" level="INFO">Waited for Element with selector //input[@id="username"] at state visible</msg>
<status status="PASS" starttime="20241125 10:54:02.559" endtime="20241125 10:54:02.565"/>
</kw>
<msg timestamp="20241125 10:54:02.565" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.559" endtime="20241125 10:54:02.565"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.565" endtime="20241125 10:54:02.565"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.559" endtime="20241125 10:54:02.565"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.565" endtime="20241125 10:54:02.565"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.566" endtime="20241125 10:54:02.566"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.565" endtime="20241125 10:54:02.566"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.559" endtime="20241125 10:54:02.566"/>
</try>
<msg timestamp="20241125 10:54:02.566" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.558" endtime="20241125 10:54:02.566"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.566" endtime="20241125 10:54:02.566"/>
</return>
<msg timestamp="20241125 10:54:02.566" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.557" endtime="20241125 10:54:02.566"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.569" endtime="20241125 10:54:02.569"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.569" endtime="20241125 10:54:02.569"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.569" endtime="20241125 10:54:02.569"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.569" endtime="20241125 10:54:02.569"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.568" endtime="20241125 10:54:02.569"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.557" endtime="20241125 10:54:02.570"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.502" endtime="20241125 10:54:02.570"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.579" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:02.575" endtime="20241125 10:54:02.579"/>
</kw>
<msg timestamp="20241125 10:54:02.579" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.574" endtime="20241125 10:54:02.579"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.579" endtime="20241125 10:54:02.579"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.574" endtime="20241125 10:54:02.579"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.580" endtime="20241125 10:54:02.580"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.580" endtime="20241125 10:54:02.580"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.579" endtime="20241125 10:54:02.580"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.574" endtime="20241125 10:54:02.580"/>
</try>
<msg timestamp="20241125 10:54:02.580" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.574" endtime="20241125 10:54:02.580"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.580" endtime="20241125 10:54:02.580"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.573" endtime="20241125 10:54:02.580"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.581" endtime="20241125 10:54:02.581"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.580" endtime="20241125 10:54:02.581"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.573" endtime="20241125 10:54:02.581"/>
</try>
<msg timestamp="20241125 10:54:02.581" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.573" endtime="20241125 10:54:02.581"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.583" endtime="20241125 10:54:02.583"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.584" endtime="20241125 10:54:02.584"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.583" endtime="20241125 10:54:02.584"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.583" endtime="20241125 10:54:02.584"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.582" endtime="20241125 10:54:02.584"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.572" endtime="20241125 10:54:02.584"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:02.594" level="INFO">Property: 'bharani@ideas2it.com'</msg>
<msg timestamp="20241125 10:54:02.594" level="INFO">${property} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:02.585" endtime="20241125 10:54:02.594"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:02.594" endtime="20241125 10:54:02.595"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.584" endtime="20241125 10:54:02.595"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.595" endtime="20241125 10:54:02.595"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.595" endtime="20241125 10:54:02.595"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.595" endtime="20241125 10:54:02.595"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.584" endtime="20241125 10:54:02.595"/>
</try>
<msg timestamp="20241125 10:54:02.596" level="INFO">${fieldTextValue} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:02.571" endtime="20241125 10:54:02.596"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241125 10:54:02.596" endtime="20241125 10:54:02.596"/>
</return>
<msg timestamp="20241125 10:54:02.596" level="INFO">${populated_value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:02.501" endtime="20241125 10:54:02.596"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241125 10:54:02.602" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.598" endtime="20241125 10:54:02.603"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.603" endtime="20241125 10:54:02.603"/>
</return>
<msg timestamp="20241125 10:54:02.603" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.597" endtime="20241125 10:54:02.603"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.606" endtime="20241125 10:54:02.606"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.606" endtime="20241125 10:54:02.606"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.606" endtime="20241125 10:54:02.606"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.606" endtime="20241125 10:54:02.606"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.605" endtime="20241125 10:54:02.607"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.500" endtime="20241125 10:54:02.607"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.470" endtime="20241125 10:54:02.607"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.469" endtime="20241125 10:54:02.607"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.469" endtime="20241125 10:54:02.607"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.607" endtime="20241125 10:54:02.607"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.607" endtime="20241125 10:54:02.607"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.469" endtime="20241125 10:54:02.607"/>
</try>
<status status="PASS" starttime="20241125 10:54:02.342" endtime="20241125 10:54:02.607"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.341" endtime="20241125 10:54:02.608"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.609" endtime="20241125 10:54:02.609"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.608" endtime="20241125 10:54:02.609"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.610" endtime="20241125 10:54:02.610"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.611" endtime="20241125 10:54:02.611"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.610" endtime="20241125 10:54:02.611"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.611" endtime="20241125 10:54:02.611"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.611" endtime="20241125 10:54:02.611"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.610" endtime="20241125 10:54:02.611"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.609" endtime="20241125 10:54:02.611"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:02.615" endtime="20241125 10:54:02.616"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.618" endtime="20241125 10:54:02.618"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.611" endtime="20241125 10:54:02.618"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.619" endtime="20241125 10:54:02.619"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.619" endtime="20241125 10:54:02.619"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.619" endtime="20241125 10:54:02.620"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.620" endtime="20241125 10:54:02.620"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.620" endtime="20241125 10:54:02.620"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.619" endtime="20241125 10:54:02.620"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.618" endtime="20241125 10:54:02.620"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:02.624" endtime="20241125 10:54:02.624"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.627" endtime="20241125 10:54:02.627"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.620" endtime="20241125 10:54:02.627"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.628" endtime="20241125 10:54:02.628"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.628" endtime="20241125 10:54:02.628"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.628" endtime="20241125 10:54:02.628"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.628" endtime="20241125 10:54:02.629"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.628" endtime="20241125 10:54:02.629"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.628" endtime="20241125 10:54:02.629"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.627" endtime="20241125 10:54:02.629"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.630" endtime="20241125 10:54:02.630"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.629" endtime="20241125 10:54:02.630"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:02.636" endtime="20241125 10:54:02.636"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.636" endtime="20241125 10:54:02.636"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.631" endtime="20241125 10:54:02.636"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.328" endtime="20241125 10:54:02.636"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:02.636" endtime="20241125 10:54:02.637"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:02.637" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:02.637" endtime="20241125 10:54:02.637"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:02.637" endtime="20241125 10:54:02.637"/>
</return>
<msg timestamp="20241125 10:54:02.638" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:02.327" endtime="20241125 10:54:02.638"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.639" level="INFO">${key} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:02.638" endtime="20241125 10:54:02.639"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.639" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:02.639" endtime="20241125 10:54:02.639"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.639" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:02.639" endtime="20241125 10:54:02.639"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.640" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.639" endtime="20241125 10:54:02.640"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.640" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:02.640" endtime="20241125 10:54:02.640"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.641" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.640" endtime="20241125 10:54:02.641"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.641" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241125 10:54:02.641" endtime="20241125 10:54:02.641"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.642" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:02.641" endtime="20241125 10:54:02.642"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:02.642" endtime="20241125 10:54:02.642"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:02.645" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:6::flowActionSequenceId:7'.</msg>
<status status="FAIL" starttime="20241125 10:54:02.644" endtime="20241125 10:54:02.645"/>
</kw>
<msg timestamp="20241125 10:54:02.645" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.644" endtime="20241125 10:54:02.645"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.646" endtime="20241125 10:54:02.646"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.646" endtime="20241125 10:54:02.646"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.646" endtime="20241125 10:54:02.646"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.646" endtime="20241125 10:54:02.646"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.646" endtime="20241125 10:54:02.646"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.646" endtime="20241125 10:54:02.647"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.646" endtime="20241125 10:54:02.647"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.645" endtime="20241125 10:54:02.647"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:02.647" endtime="20241125 10:54:02.647"/>
</return>
<msg timestamp="20241125 10:54:02.647" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.644" endtime="20241125 10:54:02.647"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:02.649" endtime="20241125 10:54:02.649"/>
</kw>
<msg timestamp="20241125 10:54:02.649" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.648" endtime="20241125 10:54:02.649"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.650" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:02.649" endtime="20241125 10:54:02.650"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.650" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.650" endtime="20241125 10:54:02.650"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.650" endtime="20241125 10:54:02.650"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.651" endtime="20241125 10:54:02.651"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.651" endtime="20241125 10:54:02.651"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.650" endtime="20241125 10:54:02.651"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.649" endtime="20241125 10:54:02.651"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.649" endtime="20241125 10:54:02.651"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:02.651" endtime="20241125 10:54:02.651"/>
</return>
<msg timestamp="20241125 10:54:02.651" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.648" endtime="20241125 10:54:02.651"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:02.652" endtime="20241125 10:54:02.652"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.652" endtime="20241125 10:54:02.652"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.652" endtime="20241125 10:54:02.652"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.652" endtime="20241125 10:54:02.653"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.653" endtime="20241125 10:54:02.653"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.652" endtime="20241125 10:54:02.653"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.653" endtime="20241125 10:54:02.653"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.653" endtime="20241125 10:54:02.653"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.653" endtime="20241125 10:54:02.653"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.652" endtime="20241125 10:54:02.653"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.652" endtime="20241125 10:54:02.653"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.652" endtime="20241125 10:54:02.653"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.654" endtime="20241125 10:54:02.654"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:02.654" endtime="20241125 10:54:02.654"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.654" endtime="20241125 10:54:02.654"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.655" endtime="20241125 10:54:02.655"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:02.655" endtime="20241125 10:54:02.655"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.655" endtime="20241125 10:54:02.655"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.654" endtime="20241125 10:54:02.655"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.654" endtime="20241125 10:54:02.655"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.653" endtime="20241125 10:54:02.655"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.652" endtime="20241125 10:54:02.655"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.651" endtime="20241125 10:54:02.655"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:02.656" endtime="20241125 10:54:02.656"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.656" endtime="20241125 10:54:02.656"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.656" endtime="20241125 10:54:02.656"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.656" endtime="20241125 10:54:02.657"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.656" endtime="20241125 10:54:02.657"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.656" endtime="20241125 10:54:02.657"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.657" endtime="20241125 10:54:02.657"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:02.657" endtime="20241125 10:54:02.657"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.657" endtime="20241125 10:54:02.657"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.658" endtime="20241125 10:54:02.658"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:02.658" endtime="20241125 10:54:02.658"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.657" endtime="20241125 10:54:02.658"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.657" endtime="20241125 10:54:02.658"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.657" endtime="20241125 10:54:02.658"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.657" endtime="20241125 10:54:02.658"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.656" endtime="20241125 10:54:02.658"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.655" endtime="20241125 10:54:02.658"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.639" endtime="20241125 10:54:02.658"/>
</iter>
<status status="PASS" starttime="20241125 10:54:02.639" endtime="20241125 10:54:02.658"/>
</for>
<msg timestamp="20241125 10:54:02.658" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:54:02.638" endtime="20241125 10:54:02.658"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:02.659" endtime="20241125 10:54:02.659"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:02.662" endtime="20241125 10:54:02.663"/>
</kw>
<msg timestamp="20241125 10:54:02.663" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.662" endtime="20241125 10:54:02.663"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.663" level="INFO">${values} = {'id': '1', 'name': 'Username', 'xpath': '//input[@id="username"]', 'pageId': '1', 'createdAt': '2024-11-24T15:18:09.149Z', 'updatedAt': '2024-11-24T17:22:57.715Z'}</msg>
<status status="PASS" starttime="20241125 10:54:02.663" endtime="20241125 10:54:02.663"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.664" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.664" endtime="20241125 10:54:02.664"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.664" endtime="20241125 10:54:02.664"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.664" endtime="20241125 10:54:02.664"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.664" endtime="20241125 10:54:02.664"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.663" endtime="20241125 10:54:02.664"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.663" endtime="20241125 10:54:02.664"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.663" endtime="20241125 10:54:02.664"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:02.664" endtime="20241125 10:54:02.664"/>
</return>
<msg timestamp="20241125 10:54:02.665" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.662" endtime="20241125 10:54:02.665"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.665" level="INFO">${xpath} = //input[@id="username"]</msg>
<status status="PASS" starttime="20241125 10:54:02.665" endtime="20241125 10:54:02.665"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.665" endtime="20241125 10:54:02.665"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.665" endtime="20241125 10:54:02.665"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.665" endtime="20241125 10:54:02.665"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.665" endtime="20241125 10:54:02.666"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:02.668" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '122', 'status': 'COMPLETED', 'actionName': 'Set username', 'actionType': 'TYPE_TEXT', 'actionXpath': '//input[@id="username"]', 'inputValue': 'bharani@ideas2it.com', '...</msg>
<status status="PASS" starttime="20241125 10:54:02.667" endtime="20241125 10:54:02.668"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:02.669" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "122", "status": "COMPLETED", "actionName": "Set username", "actionType": "TYPE_TEXT", "actionXpath": "//input[@id=\"username\"]", "inputValue": "bharani@ideas2it.com",...</msg>
<status status="PASS" starttime="20241125 10:54:02.669" endtime="20241125 10:54:02.669"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:02.688" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:02.688" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:02.670" endtime="20241125 10:54:02.688"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:02.689" endtime="20241125 10:54:02.689"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:02.690" endtime="20241125 10:54:02.690"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.668" endtime="20241125 10:54:02.690"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.659" endtime="20241125 10:54:02.690"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.323" endtime="20241125 10:54:02.690"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.691" endtime="20241125 10:54:02.691"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:02.691" endtime="20241125 10:54:02.691"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.691" endtime="20241125 10:54:02.691"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.690" endtime="20241125 10:54:02.691"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.323" endtime="20241125 10:54:02.691"/>
</try>
<status status="PASS" starttime="20241125 10:54:02.323" endtime="20241125 10:54:02.691"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '3', 'actionId': '3', 'flowId': '1', 'order': 2, 'createdAt': '2024-11-24T16:52:08.811Z', 'updatedAt': '2024-11-24T17:34:15.617Z', 'action': {'id': '3', 'name': 'Set password', 'type': 'TYPE_TE...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.692" level="INFO">${action} = {'id': '3', 'name': 'Set password', 'type': 'TYPE_TEXT', 'selectorI': '2', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:44:31.460Z', 'updatedAt': '2024-11-24T16:44:31.460Z', 'selecto...</msg>
<status status="PASS" starttime="20241125 10:54:02.692" endtime="20241125 10:54:02.692"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:02.693" endtime="20241125 10:54:02.693"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:02.694" level="INFO">${input} = {'id': '3', 'actionId': '3', 'name': 'Bharani', 'value': 'vijaybharani', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:44:31.712Z', 'updatedAt': '2024-11-24T16:46:16.462Z'}</msg>
<status status="PASS" starttime="20241125 10:54:02.693" endtime="20241125 10:54:02.694"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.694" endtime="20241125 10:54:02.695"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.695" endtime="20241125 10:54:02.695"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.694" endtime="20241125 10:54:02.695"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.694" endtime="20241125 10:54:02.695"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.696" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:54:02.696" endtime="20241125 10:54:02.696"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:02.696" endtime="20241125 10:54:02.696"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.696" endtime="20241125 10:54:02.696"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:02.697" endtime="20241125 10:54:02.697"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.696" endtime="20241125 10:54:02.697"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.698" endtime="20241125 10:54:02.698"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.697" endtime="20241125 10:54:02.698"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.701" endtime="20241125 10:54:02.701"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.703" endtime="20241125 10:54:02.704"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.699" endtime="20241125 10:54:02.704"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.705" endtime="20241125 10:54:02.705"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.704" endtime="20241125 10:54:02.705"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.707" endtime="20241125 10:54:02.708"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.705" endtime="20241125 10:54:02.708"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>selector::${selector}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:02.710" endtime="20241125 10:54:02.711"/>
</kw>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=password: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.724" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:54:02.715" endtime="20241125 10:54:02.724"/>
</kw>
<msg timestamp="20241125 10:54:02.724" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.715" endtime="20241125 10:54:02.724"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.724" endtime="20241125 10:54:02.724"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.715" endtime="20241125 10:54:02.724"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.724" endtime="20241125 10:54:02.725"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.725" endtime="20241125 10:54:02.725"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.724" endtime="20241125 10:54:02.725"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.715" endtime="20241125 10:54:02.725"/>
</try>
<msg timestamp="20241125 10:54:02.725" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.714" endtime="20241125 10:54:02.725"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.725" endtime="20241125 10:54:02.725"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.714" endtime="20241125 10:54:02.725"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.725" endtime="20241125 10:54:02.726"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.725" endtime="20241125 10:54:02.726"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.713" endtime="20241125 10:54:02.726"/>
</try>
<msg timestamp="20241125 10:54:02.726" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.713" endtime="20241125 10:54:02.726"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.728" endtime="20241125 10:54:02.728"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.728" endtime="20241125 10:54:02.728"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.728" endtime="20241125 10:54:02.728"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.728" endtime="20241125 10:54:02.728"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.727" endtime="20241125 10:54:02.728"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.713" endtime="20241125 10:54:02.728"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.742" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:54:02.737" endtime="20241125 10:54:02.742"/>
</kw>
<msg timestamp="20241125 10:54:02.742" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.736" endtime="20241125 10:54:02.742"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.742" endtime="20241125 10:54:02.742"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.736" endtime="20241125 10:54:02.742"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.742" endtime="20241125 10:54:02.743"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.743" endtime="20241125 10:54:02.743"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.742" endtime="20241125 10:54:02.743"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.736" endtime="20241125 10:54:02.743"/>
</try>
<msg timestamp="20241125 10:54:02.743" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.735" endtime="20241125 10:54:02.743"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.743" endtime="20241125 10:54:02.743"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.734" endtime="20241125 10:54:02.743"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.743" endtime="20241125 10:54:02.744"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.743" endtime="20241125 10:54:02.744"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.734" endtime="20241125 10:54:02.744"/>
</try>
<msg timestamp="20241125 10:54:02.744" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.734" endtime="20241125 10:54:02.744"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.746" endtime="20241125 10:54:02.746"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.746" endtime="20241125 10:54:02.746"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.746" endtime="20241125 10:54:02.746"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.745" endtime="20241125 10:54:02.746"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.745" endtime="20241125 10:54:02.746"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.733" endtime="20241125 10:54:02.746"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:02.759" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241125 10:54:02.759" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:02.747" endtime="20241125 10:54:02.759"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:02.759" endtime="20241125 10:54:02.759"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.746" endtime="20241125 10:54:02.759"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.759" endtime="20241125 10:54:02.759"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.760" endtime="20241125 10:54:02.760"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.759" endtime="20241125 10:54:02.760"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.746" endtime="20241125 10:54:02.760"/>
</try>
<msg timestamp="20241125 10:54:02.760" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:02.731" endtime="20241125 10:54:02.760"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.762" endtime="20241125 10:54:02.762"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.762" endtime="20241125 10:54:02.762"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.762" endtime="20241125 10:54:02.762"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.762" endtime="20241125 10:54:02.762"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.761" endtime="20241125 10:54:02.762"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.730" endtime="20241125 10:54:02.762"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.763" endtime="20241125 10:54:02.763"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.762" endtime="20241125 10:54:02.763"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.730" endtime="20241125 10:54:02.763"/>
</try>
<status status="PASS" starttime="20241125 10:54:02.730" endtime="20241125 10:54:02.763"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.772" level="INFO">Waited for Element with selector id=password at state visible</msg>
<status status="PASS" starttime="20241125 10:54:02.767" endtime="20241125 10:54:02.772"/>
</kw>
<msg timestamp="20241125 10:54:02.772" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.767" endtime="20241125 10:54:02.772"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.772" endtime="20241125 10:54:02.772"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.766" endtime="20241125 10:54:02.772"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.772" endtime="20241125 10:54:02.772"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.774" endtime="20241125 10:54:02.774"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.772" endtime="20241125 10:54:02.774"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.766" endtime="20241125 10:54:02.774"/>
</try>
<msg timestamp="20241125 10:54:02.774" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.766" endtime="20241125 10:54:02.774"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.774" endtime="20241125 10:54:02.774"/>
</return>
<msg timestamp="20241125 10:54:02.774" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.765" endtime="20241125 10:54:02.774"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.776" endtime="20241125 10:54:02.776"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.776" endtime="20241125 10:54:02.776"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.776" endtime="20241125 10:54:02.777"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.776" endtime="20241125 10:54:02.777"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.775" endtime="20241125 10:54:02.777"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.764" endtime="20241125 10:54:02.777"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.711" endtime="20241125 10:54:02.777"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.793" level="INFO">Waited for Element with selector id=password at state editable</msg>
<status status="PASS" starttime="20241125 10:54:02.780" endtime="20241125 10:54:02.793"/>
</kw>
<msg timestamp="20241125 10:54:02.793" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.779" endtime="20241125 10:54:02.793"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.793" endtime="20241125 10:54:02.794"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.779" endtime="20241125 10:54:02.794"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.794" endtime="20241125 10:54:02.794"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.794" endtime="20241125 10:54:02.794"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.794" endtime="20241125 10:54:02.794"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.779" endtime="20241125 10:54:02.794"/>
</try>
<msg timestamp="20241125 10:54:02.795" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.779" endtime="20241125 10:54:02.795"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.795" endtime="20241125 10:54:02.795"/>
</return>
<msg timestamp="20241125 10:54:02.795" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.779" endtime="20241125 10:54:02.795"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.797" endtime="20241125 10:54:02.797"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.797" endtime="20241125 10:54:02.797"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.797" endtime="20241125 10:54:02.797"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.797" endtime="20241125 10:54:02.797"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.796" endtime="20241125 10:54:02.797"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.778" endtime="20241125 10:54:02.797"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:02.798" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:54:02.798" endtime="20241125 10:54:02.798"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=password: string</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.800" endtime="20241125 10:54:02.800"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.801" endtime="20241125 10:54:02.801"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.799" endtime="20241125 10:54:02.801"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:02.802" endtime="20241125 10:54:02.802"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.801" endtime="20241125 10:54:02.802"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.799" endtime="20241125 10:54:02.802"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241125 10:54:02.803" level="INFO">Fills the text 'vijaybharani' in the given field.</msg>
<status status="PASS" starttime="20241125 10:54:02.802" endtime="20241125 10:54:02.822"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.802" endtime="20241125 10:54:02.822"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.823" endtime="20241125 10:54:02.823"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.823" endtime="20241125 10:54:02.823"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.823" endtime="20241125 10:54:02.823"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.802" endtime="20241125 10:54:02.823"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=password: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.834" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:54:02.828" endtime="20241125 10:54:02.834"/>
</kw>
<msg timestamp="20241125 10:54:02.834" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.828" endtime="20241125 10:54:02.834"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.834" endtime="20241125 10:54:02.834"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.828" endtime="20241125 10:54:02.835"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.835" endtime="20241125 10:54:02.835"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.835" endtime="20241125 10:54:02.835"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.835" endtime="20241125 10:54:02.835"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.828" endtime="20241125 10:54:02.835"/>
</try>
<msg timestamp="20241125 10:54:02.836" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.828" endtime="20241125 10:54:02.836"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.836" endtime="20241125 10:54:02.836"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.827" endtime="20241125 10:54:02.836"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.836" endtime="20241125 10:54:02.836"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.836" endtime="20241125 10:54:02.836"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.827" endtime="20241125 10:54:02.836"/>
</try>
<msg timestamp="20241125 10:54:02.836" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.827" endtime="20241125 10:54:02.836"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.838" endtime="20241125 10:54:02.838"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.838" endtime="20241125 10:54:02.838"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.838" endtime="20241125 10:54:02.839"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.838" endtime="20241125 10:54:02.839"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.837" endtime="20241125 10:54:02.839"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.826" endtime="20241125 10:54:02.839"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.854" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:54:02.848" endtime="20241125 10:54:02.854"/>
</kw>
<msg timestamp="20241125 10:54:02.854" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.847" endtime="20241125 10:54:02.854"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.855" endtime="20241125 10:54:02.855"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.847" endtime="20241125 10:54:02.855"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.855" endtime="20241125 10:54:02.855"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.855" endtime="20241125 10:54:02.855"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.855" endtime="20241125 10:54:02.855"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.847" endtime="20241125 10:54:02.855"/>
</try>
<msg timestamp="20241125 10:54:02.856" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.847" endtime="20241125 10:54:02.856"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.856" endtime="20241125 10:54:02.856"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.846" endtime="20241125 10:54:02.856"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.856" endtime="20241125 10:54:02.856"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.856" endtime="20241125 10:54:02.856"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.845" endtime="20241125 10:54:02.856"/>
</try>
<msg timestamp="20241125 10:54:02.856" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.845" endtime="20241125 10:54:02.856"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.858" endtime="20241125 10:54:02.858"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.859" endtime="20241125 10:54:02.859"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.858" endtime="20241125 10:54:02.859"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.858" endtime="20241125 10:54:02.859"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.857" endtime="20241125 10:54:02.859"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.844" endtime="20241125 10:54:02.859"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:02.869" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241125 10:54:02.869" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:02.859" endtime="20241125 10:54:02.869"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:02.869" endtime="20241125 10:54:02.870"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.859" endtime="20241125 10:54:02.870"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.870" endtime="20241125 10:54:02.870"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.870" endtime="20241125 10:54:02.870"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.870" endtime="20241125 10:54:02.870"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.859" endtime="20241125 10:54:02.870"/>
</try>
<msg timestamp="20241125 10:54:02.871" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:02.842" endtime="20241125 10:54:02.871"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.872" endtime="20241125 10:54:02.873"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.873" endtime="20241125 10:54:02.873"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.872" endtime="20241125 10:54:02.873"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.872" endtime="20241125 10:54:02.873"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.871" endtime="20241125 10:54:02.874"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.841" endtime="20241125 10:54:02.874"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.874" endtime="20241125 10:54:02.874"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.874" endtime="20241125 10:54:02.874"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.841" endtime="20241125 10:54:02.874"/>
</try>
<status status="PASS" starttime="20241125 10:54:02.840" endtime="20241125 10:54:02.874"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.883" level="INFO">Waited for Element with selector id=password at state visible</msg>
<status status="PASS" starttime="20241125 10:54:02.878" endtime="20241125 10:54:02.883"/>
</kw>
<msg timestamp="20241125 10:54:02.883" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.878" endtime="20241125 10:54:02.883"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.884" endtime="20241125 10:54:02.884"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.878" endtime="20241125 10:54:02.884"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.884" endtime="20241125 10:54:02.884"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.884" endtime="20241125 10:54:02.885"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.884" endtime="20241125 10:54:02.885"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.878" endtime="20241125 10:54:02.885"/>
</try>
<msg timestamp="20241125 10:54:02.885" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.878" endtime="20241125 10:54:02.885"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.885" endtime="20241125 10:54:02.885"/>
</return>
<msg timestamp="20241125 10:54:02.885" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.877" endtime="20241125 10:54:02.885"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.887" endtime="20241125 10:54:02.887"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.887" endtime="20241125 10:54:02.887"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.887" endtime="20241125 10:54:02.888"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.887" endtime="20241125 10:54:02.888"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.886" endtime="20241125 10:54:02.888"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.876" endtime="20241125 10:54:02.888"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.825" endtime="20241125 10:54:02.888"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:02.898" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:54:02.892" endtime="20241125 10:54:02.898"/>
</kw>
<msg timestamp="20241125 10:54:02.898" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.892" endtime="20241125 10:54:02.898"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.898" endtime="20241125 10:54:02.898"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.892" endtime="20241125 10:54:02.898"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.899" endtime="20241125 10:54:02.899"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.899" endtime="20241125 10:54:02.899"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.899" endtime="20241125 10:54:02.899"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.892" endtime="20241125 10:54:02.899"/>
</try>
<msg timestamp="20241125 10:54:02.900" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.892" endtime="20241125 10:54:02.900"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.900" endtime="20241125 10:54:02.900"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.891" endtime="20241125 10:54:02.900"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.900" endtime="20241125 10:54:02.900"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.900" endtime="20241125 10:54:02.900"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.891" endtime="20241125 10:54:02.901"/>
</try>
<msg timestamp="20241125 10:54:02.901" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.891" endtime="20241125 10:54:02.901"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.905" endtime="20241125 10:54:02.905"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.905" endtime="20241125 10:54:02.905"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.904" endtime="20241125 10:54:02.905"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.904" endtime="20241125 10:54:02.905"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.903" endtime="20241125 10:54:02.905"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.891" endtime="20241125 10:54:02.906"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:02.913" level="INFO">Property: 'vijaybharani'</msg>
<msg timestamp="20241125 10:54:02.913" level="INFO">${property} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:54:02.906" endtime="20241125 10:54:02.913"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:02.914" endtime="20241125 10:54:02.914"/>
</return>
<status status="PASS" starttime="20241125 10:54:02.906" endtime="20241125 10:54:02.914"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.914" endtime="20241125 10:54:02.914"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.914" endtime="20241125 10:54:02.914"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.914" endtime="20241125 10:54:02.914"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.906" endtime="20241125 10:54:02.914"/>
</try>
<msg timestamp="20241125 10:54:02.915" level="INFO">${fieldTextValue} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:54:02.889" endtime="20241125 10:54:02.915"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241125 10:54:02.915" endtime="20241125 10:54:02.915"/>
</return>
<msg timestamp="20241125 10:54:02.915" level="INFO">${populated_value} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:54:02.824" endtime="20241125 10:54:02.915"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241125 10:54:02.921" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.918" endtime="20241125 10:54:02.921"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:02.922" endtime="20241125 10:54:02.922"/>
</return>
<msg timestamp="20241125 10:54:02.922" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.917" endtime="20241125 10:54:02.922"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.925" endtime="20241125 10:54:02.925"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.925" endtime="20241125 10:54:02.925"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.925" endtime="20241125 10:54:02.925"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.925" endtime="20241125 10:54:02.925"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.924" endtime="20241125 10:54:02.926"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.824" endtime="20241125 10:54:02.926"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.799" endtime="20241125 10:54:02.926"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.798" endtime="20241125 10:54:02.926"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.798" endtime="20241125 10:54:02.926"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.926" endtime="20241125 10:54:02.926"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.926" endtime="20241125 10:54:02.926"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.798" endtime="20241125 10:54:02.926"/>
</try>
<status status="PASS" starttime="20241125 10:54:02.709" endtime="20241125 10:54:02.926"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.708" endtime="20241125 10:54:02.927"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.927" endtime="20241125 10:54:02.927"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.927" endtime="20241125 10:54:02.927"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.928" endtime="20241125 10:54:02.928"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.929" endtime="20241125 10:54:02.929"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.929" endtime="20241125 10:54:02.929"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.929" endtime="20241125 10:54:02.929"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.929" endtime="20241125 10:54:02.929"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.928" endtime="20241125 10:54:02.929"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.928" endtime="20241125 10:54:02.929"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:02.934" endtime="20241125 10:54:02.934"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.937" endtime="20241125 10:54:02.937"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.929" endtime="20241125 10:54:02.937"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.938" endtime="20241125 10:54:02.938"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.938" endtime="20241125 10:54:02.938"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.938" endtime="20241125 10:54:02.939"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.939" endtime="20241125 10:54:02.939"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.939" endtime="20241125 10:54:02.939"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.938" endtime="20241125 10:54:02.939"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.937" endtime="20241125 10:54:02.939"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:02.944" endtime="20241125 10:54:02.944"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.946" endtime="20241125 10:54:02.946"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.940" endtime="20241125 10:54:02.946"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.947" endtime="20241125 10:54:02.947"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.947" endtime="20241125 10:54:02.947"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.947" endtime="20241125 10:54:02.947"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.947" endtime="20241125 10:54:02.947"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.947" endtime="20241125 10:54:02.947"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.947" endtime="20241125 10:54:02.948"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.946" endtime="20241125 10:54:02.948"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.950" endtime="20241125 10:54:02.950"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.948" endtime="20241125 10:54:02.950"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:02.956" endtime="20241125 10:54:02.956"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.957" endtime="20241125 10:54:02.957"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.950" endtime="20241125 10:54:02.957"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.696" endtime="20241125 10:54:02.957"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:02.957" endtime="20241125 10:54:02.958"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:02.958" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:02.958" endtime="20241125 10:54:02.958"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:02.958" endtime="20241125 10:54:02.958"/>
</return>
<msg timestamp="20241125 10:54:02.959" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:54:02.695" endtime="20241125 10:54:02.959"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.960" level="INFO">${key} = testCaseFlowSequenceId:4::flowActionSequenceId:3</msg>
<status status="PASS" starttime="20241125 10:54:02.960" endtime="20241125 10:54:02.960"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.961" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:02.961" endtime="20241125 10:54:02.961"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.961" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:02.961" endtime="20241125 10:54:02.961"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.962" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.962" endtime="20241125 10:54:02.962"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.962" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:02.962" endtime="20241125 10:54:02.962"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.963" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.963" endtime="20241125 10:54:02.963"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.963" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241125 10:54:02.963" endtime="20241125 10:54:02.963"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.964" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:02.964" endtime="20241125 10:54:02.964"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:02.964" endtime="20241125 10:54:02.965"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:02.969" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:6::flowActionSequenceId:7'.</msg>
<status status="FAIL" starttime="20241125 10:54:02.968" endtime="20241125 10:54:02.969"/>
</kw>
<msg timestamp="20241125 10:54:02.969" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.968" endtime="20241125 10:54:02.969"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.970" endtime="20241125 10:54:02.970"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.970" endtime="20241125 10:54:02.970"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.970" endtime="20241125 10:54:02.970"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.970" endtime="20241125 10:54:02.970"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.970" endtime="20241125 10:54:02.970"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.970" endtime="20241125 10:54:02.971"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.969" endtime="20241125 10:54:02.971"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.969" endtime="20241125 10:54:02.971"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:02.971" endtime="20241125 10:54:02.971"/>
</return>
<msg timestamp="20241125 10:54:02.971" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:02.966" endtime="20241125 10:54:02.971"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:02.973" endtime="20241125 10:54:02.973"/>
</kw>
<msg timestamp="20241125 10:54:02.973" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.973" endtime="20241125 10:54:02.974"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.974" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:02.974" endtime="20241125 10:54:02.974"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:02.975" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.975" endtime="20241125 10:54:02.975"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.975" endtime="20241125 10:54:02.975"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.975" endtime="20241125 10:54:02.976"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.975" endtime="20241125 10:54:02.976"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.974" endtime="20241125 10:54:02.976"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.974" endtime="20241125 10:54:02.976"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.974" endtime="20241125 10:54:02.976"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:02.976" endtime="20241125 10:54:02.976"/>
</return>
<msg timestamp="20241125 10:54:02.977" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.972" endtime="20241125 10:54:02.977"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:02.978" endtime="20241125 10:54:02.978"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.978" endtime="20241125 10:54:02.978"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.977" endtime="20241125 10:54:02.978"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.979" endtime="20241125 10:54:02.979"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.979" endtime="20241125 10:54:02.979"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.979" endtime="20241125 10:54:02.979"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.980" endtime="20241125 10:54:02.980"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:02.980" endtime="20241125 10:54:02.980"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.980" endtime="20241125 10:54:02.980"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.978" endtime="20241125 10:54:02.980"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.978" endtime="20241125 10:54:02.980"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.978" endtime="20241125 10:54:02.981"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.981" endtime="20241125 10:54:02.982"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:02.982" endtime="20241125 10:54:02.982"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.981" endtime="20241125 10:54:02.982"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.983" endtime="20241125 10:54:02.984"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:02.984" endtime="20241125 10:54:02.986"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.982" endtime="20241125 10:54:02.987"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.981" endtime="20241125 10:54:02.987"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.981" endtime="20241125 10:54:02.988"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.981" endtime="20241125 10:54:02.988"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.977" endtime="20241125 10:54:02.988"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.977" endtime="20241125 10:54:02.988"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:02.990" endtime="20241125 10:54:02.990"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.989" endtime="20241125 10:54:02.990"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.989" endtime="20241125 10:54:02.990"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.991" endtime="20241125 10:54:02.991"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:02.990" endtime="20241125 10:54:02.991"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.990" endtime="20241125 10:54:02.991"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.992" endtime="20241125 10:54:02.992"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:02.992" endtime="20241125 10:54:02.992"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.991" endtime="20241125 10:54:02.992"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:02.992" endtime="20241125 10:54:02.992"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:02.992" endtime="20241125 10:54:02.993"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:02.992" endtime="20241125 10:54:02.993"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.991" endtime="20241125 10:54:02.993"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.991" endtime="20241125 10:54:02.993"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:02.991" endtime="20241125 10:54:02.993"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:02.989" endtime="20241125 10:54:02.993"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.988" endtime="20241125 10:54:02.993"/>
</if>
<status status="PASS" starttime="20241125 10:54:02.960" endtime="20241125 10:54:02.993"/>
</iter>
<status status="PASS" starttime="20241125 10:54:02.960" endtime="20241125 10:54:02.993"/>
</for>
<msg timestamp="20241125 10:54:02.994" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:54:02.959" endtime="20241125 10:54:02.994"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:02.994" endtime="20241125 10:54:02.994"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:02.999" endtime="20241125 10:54:03.000"/>
</kw>
<msg timestamp="20241125 10:54:03.000" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.999" endtime="20241125 10:54:03.000"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.001" level="INFO">${values} = {'id': '2', 'name': 'Password', 'xpath': 'id=password', 'pageId': '1', 'createdAt': '2024-11-24T16:43:05.032Z', 'updatedAt': '2024-11-24T17:01:06.183Z'}</msg>
<status status="PASS" starttime="20241125 10:54:03.001" endtime="20241125 10:54:03.001"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.002" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.002" endtime="20241125 10:54:03.002"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.002" endtime="20241125 10:54:03.002"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.003" endtime="20241125 10:54:03.003"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.003" endtime="20241125 10:54:03.003"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.001" endtime="20241125 10:54:03.004"/>
</if>
<status status="PASS" starttime="20241125 10:54:03.000" endtime="20241125 10:54:03.004"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.000" endtime="20241125 10:54:03.004"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:03.004" endtime="20241125 10:54:03.004"/>
</return>
<msg timestamp="20241125 10:54:03.004" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:02.998" endtime="20241125 10:54:03.004"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.005" level="INFO">${xpath} = id=password</msg>
<status status="PASS" starttime="20241125 10:54:03.005" endtime="20241125 10:54:03.005"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.004" endtime="20241125 10:54:03.005"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.005" endtime="20241125 10:54:03.005"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.005" endtime="20241125 10:54:03.005"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.004" endtime="20241125 10:54:03.005"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:03.007" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '123', 'status': 'COMPLETED', 'actionName': 'Set password', 'actionType': 'TYPE_TEXT', 'actionXpath': 'id=password', 'inputValue': 'vijaybharani', 'errorMessage': '', '...</msg>
<status status="PASS" starttime="20241125 10:54:03.005" endtime="20241125 10:54:03.007"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:03.008" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "123", "status": "COMPLETED", "actionName": "Set password", "actionType": "TYPE_TEXT", "actionXpath": "id=password", "inputValue": "vijaybharani", "errorMessage": "", "...</msg>
<status status="PASS" starttime="20241125 10:54:03.007" endtime="20241125 10:54:03.008"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:03.034" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:03.035" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:03.008" endtime="20241125 10:54:03.035"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:03.035" endtime="20241125 10:54:03.037"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:03.037" endtime="20241125 10:54:03.037"/>
</return>
<status status="PASS" starttime="20241125 10:54:03.007" endtime="20241125 10:54:03.037"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.995" endtime="20241125 10:54:03.038"/>
</kw>
<status status="PASS" starttime="20241125 10:54:02.692" endtime="20241125 10:54:03.038"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.038" endtime="20241125 10:54:03.038"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:03.038" endtime="20241125 10:54:03.038"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.039" endtime="20241125 10:54:03.039"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.038" endtime="20241125 10:54:03.039"/>
</branch>
<status status="PASS" starttime="20241125 10:54:02.692" endtime="20241125 10:54:03.039"/>
</try>
<status status="PASS" starttime="20241125 10:54:02.692" endtime="20241125 10:54:03.039"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '4', 'actionId': '4', 'flowId': '1', 'order': 3, 'createdAt': '2024-11-24T16:52:08.811Z', 'updatedAt': '2024-11-24T17:34:15.605Z', 'action': {'id': '4', 'name': 'Click login button', 'type': 'C...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.040" level="INFO">${action} = {'id': '4', 'name': 'Click login button', 'type': 'CLICK', 'selectorI': '3', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:50:52.555Z', 'updatedAt': '2024-11-24T16:50:52.555Z', 'selec...</msg>
<status status="PASS" starttime="20241125 10:54:03.040" endtime="20241125 10:54:03.040"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:03.040" endtime="20241125 10:54:03.041"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:03.042" level="INFO">${input} = {'id': '4', 'actionId': '4', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:50:52.715Z', 'updatedAt': '2024-11-24T16:50:52.715Z'}</msg>
<status status="PASS" starttime="20241125 10:54:03.041" endtime="20241125 10:54:03.042"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.043" endtime="20241125 10:54:03.043"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.043" endtime="20241125 10:54:03.043"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.042" endtime="20241125 10:54:03.043"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.042" endtime="20241125 10:54:03.043"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.044" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:03.044" endtime="20241125 10:54:03.044"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:03.045" endtime="20241125 10:54:03.045"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.044" endtime="20241125 10:54:03.045"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:03.045" endtime="20241125 10:54:03.045"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.045" endtime="20241125 10:54:03.045"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:03.059" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:03.053" endtime="20241125 10:54:03.059"/>
</kw>
<msg timestamp="20241125 10:54:03.060" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.052" endtime="20241125 10:54:03.060"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:03.060" endtime="20241125 10:54:03.060"/>
</return>
<status status="PASS" starttime="20241125 10:54:03.052" endtime="20241125 10:54:03.060"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.060" endtime="20241125 10:54:03.060"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.060" endtime="20241125 10:54:03.060"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.060" endtime="20241125 10:54:03.061"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.052" endtime="20241125 10:54:03.061"/>
</try>
<msg timestamp="20241125 10:54:03.061" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.052" endtime="20241125 10:54:03.061"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:03.061" endtime="20241125 10:54:03.061"/>
</return>
<status status="PASS" starttime="20241125 10:54:03.051" endtime="20241125 10:54:03.061"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:03.061" endtime="20241125 10:54:03.061"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:03.061" endtime="20241125 10:54:03.061"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.051" endtime="20241125 10:54:03.061"/>
</try>
<msg timestamp="20241125 10:54:03.062" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.050" endtime="20241125 10:54:03.062"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.063" endtime="20241125 10:54:03.064"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.064" endtime="20241125 10:54:03.064"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.063" endtime="20241125 10:54:03.064"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.063" endtime="20241125 10:54:03.064"/>
</if>
<status status="PASS" starttime="20241125 10:54:03.062" endtime="20241125 10:54:03.064"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.050" endtime="20241125 10:54:03.064"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:03.075" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state visible</msg>
<status status="PASS" starttime="20241125 10:54:03.070" endtime="20241125 10:54:03.075"/>
</kw>
<msg timestamp="20241125 10:54:03.075" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.070" endtime="20241125 10:54:03.075"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:03.075" endtime="20241125 10:54:03.075"/>
</return>
<status status="PASS" starttime="20241125 10:54:03.070" endtime="20241125 10:54:03.075"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.076" endtime="20241125 10:54:03.076"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.076" endtime="20241125 10:54:03.076"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.075" endtime="20241125 10:54:03.076"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.070" endtime="20241125 10:54:03.076"/>
</try>
<msg timestamp="20241125 10:54:03.076" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.069" endtime="20241125 10:54:03.076"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:03.076" endtime="20241125 10:54:03.076"/>
</return>
<msg timestamp="20241125 10:54:03.077" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.067" endtime="20241125 10:54:03.077"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.079" endtime="20241125 10:54:03.079"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.079" endtime="20241125 10:54:03.079"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.078" endtime="20241125 10:54:03.079"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.078" endtime="20241125 10:54:03.079"/>
</if>
<status status="PASS" starttime="20241125 10:54:03.077" endtime="20241125 10:54:03.079"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.066" endtime="20241125 10:54:03.079"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:03.095" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state enabled</msg>
<status status="PASS" starttime="20241125 10:54:03.084" endtime="20241125 10:54:03.095"/>
</kw>
<msg timestamp="20241125 10:54:03.096" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.083" endtime="20241125 10:54:03.096"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:03.096" endtime="20241125 10:54:03.096"/>
</return>
<status status="PASS" starttime="20241125 10:54:03.083" endtime="20241125 10:54:03.096"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.096" endtime="20241125 10:54:03.096"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.096" endtime="20241125 10:54:03.097"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.096" endtime="20241125 10:54:03.097"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.083" endtime="20241125 10:54:03.097"/>
</try>
<msg timestamp="20241125 10:54:03.097" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.082" endtime="20241125 10:54:03.097"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:03.097" endtime="20241125 10:54:03.097"/>
</return>
<msg timestamp="20241125 10:54:03.097" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.081" endtime="20241125 10:54:03.097"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.099" endtime="20241125 10:54:03.099"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.100" endtime="20241125 10:54:03.100"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.099" endtime="20241125 10:54:03.100"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.099" endtime="20241125 10:54:03.100"/>
</if>
<status status="PASS" starttime="20241125 10:54:03.098" endtime="20241125 10:54:03.100"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.081" endtime="20241125 10:54:03.101"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.047" endtime="20241125 10:54:03.101"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:03.101" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:54:03.101" endtime="20241125 10:54:03.101"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.103" endtime="20241125 10:54:03.103"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.102" endtime="20241125 10:54:03.103"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:03.103" endtime="20241125 10:54:03.103"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.103" endtime="20241125 10:54:03.103"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.102" endtime="20241125 10:54:03.103"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241125 10:54:03.104" endtime="20241125 10:54:03.135"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.103" endtime="20241125 10:54:03.136"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.136" endtime="20241125 10:54:03.136"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.136" endtime="20241125 10:54:03.137"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.136" endtime="20241125 10:54:03.137"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.103" endtime="20241125 10:54:03.137"/>
</try>
<status status="PASS" starttime="20241125 10:54:03.102" endtime="20241125 10:54:03.137"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.102" endtime="20241125 10:54:03.137"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.101" endtime="20241125 10:54:03.137"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.137" endtime="20241125 10:54:03.137"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.137" endtime="20241125 10:54:03.137"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.101" endtime="20241125 10:54:03.137"/>
</try>
<status status="PASS" starttime="20241125 10:54:03.047" endtime="20241125 10:54:03.138"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.045" endtime="20241125 10:54:03.138"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.139" endtime="20241125 10:54:03.139"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.141" endtime="20241125 10:54:03.141"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.138" endtime="20241125 10:54:03.141"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.142" endtime="20241125 10:54:03.142"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.141" endtime="20241125 10:54:03.142"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.144" endtime="20241125 10:54:03.144"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.142" endtime="20241125 10:54:03.144"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.146" endtime="20241125 10:54:03.146"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.144" endtime="20241125 10:54:03.146"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.147" endtime="20241125 10:54:03.147"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.146" endtime="20241125 10:54:03.147"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.148" endtime="20241125 10:54:03.148"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.149" endtime="20241125 10:54:03.149"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.149" endtime="20241125 10:54:03.149"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.149" endtime="20241125 10:54:03.149"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.149" endtime="20241125 10:54:03.150"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.149" endtime="20241125 10:54:03.150"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:03.148" endtime="20241125 10:54:03.150"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:03.155" endtime="20241125 10:54:03.155"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.158" endtime="20241125 10:54:03.158"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.150" endtime="20241125 10:54:03.158"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.159" endtime="20241125 10:54:03.159"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.159" endtime="20241125 10:54:03.159"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.159" endtime="20241125 10:54:03.159"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.160" endtime="20241125 10:54:03.160"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.159" endtime="20241125 10:54:03.160"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.159" endtime="20241125 10:54:03.160"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:03.158" endtime="20241125 10:54:03.160"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:03.165" endtime="20241125 10:54:03.165"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.167" endtime="20241125 10:54:03.168"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.160" endtime="20241125 10:54:03.168"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.169" endtime="20241125 10:54:03.169"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.169" endtime="20241125 10:54:03.169"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.169" endtime="20241125 10:54:03.169"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.169" endtime="20241125 10:54:03.170"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.169" endtime="20241125 10:54:03.170"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.169" endtime="20241125 10:54:03.170"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:03.168" endtime="20241125 10:54:03.170"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.172" endtime="20241125 10:54:03.172"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.170" endtime="20241125 10:54:03.172"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:03.177" endtime="20241125 10:54:03.177"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.177" endtime="20241125 10:54:03.178"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.172" endtime="20241125 10:54:03.178"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.044" endtime="20241125 10:54:03.178"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:03.178" endtime="20241125 10:54:03.178"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:03.179" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:03.178" endtime="20241125 10:54:03.179"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:03.179" endtime="20241125 10:54:03.179"/>
</return>
<msg timestamp="20241125 10:54:03.179" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:03.043" endtime="20241125 10:54:03.179"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.180" level="INFO">${key} = testCaseFlowSequenceId:4::flowActionSequenceId:4</msg>
<status status="PASS" starttime="20241125 10:54:03.180" endtime="20241125 10:54:03.180"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.181" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:03.180" endtime="20241125 10:54:03.181"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.181" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:03.181" endtime="20241125 10:54:03.181"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.181" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:03.181" endtime="20241125 10:54:03.181"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.182" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:03.181" endtime="20241125 10:54:03.182"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.182" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241125 10:54:03.182" endtime="20241125 10:54:03.182"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.182" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241125 10:54:03.182" endtime="20241125 10:54:03.182"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.183" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:03.183" endtime="20241125 10:54:03.183"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:03.183" endtime="20241125 10:54:03.184"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:03.186" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:6::flowActionSequenceId:7'.</msg>
<status status="FAIL" starttime="20241125 10:54:03.185" endtime="20241125 10:54:03.186"/>
</kw>
<msg timestamp="20241125 10:54:03.186" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:03.185" endtime="20241125 10:54:03.186"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.186" endtime="20241125 10:54:03.187"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.187" endtime="20241125 10:54:03.187"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.187" endtime="20241125 10:54:03.187"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.187" endtime="20241125 10:54:03.187"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.187" endtime="20241125 10:54:03.187"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.187" endtime="20241125 10:54:03.187"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:03.186" endtime="20241125 10:54:03.188"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.186" endtime="20241125 10:54:03.188"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:03.188" endtime="20241125 10:54:03.188"/>
</return>
<msg timestamp="20241125 10:54:03.188" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:03.185" endtime="20241125 10:54:03.188"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:03.190" endtime="20241125 10:54:03.190"/>
</kw>
<msg timestamp="20241125 10:54:03.190" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.189" endtime="20241125 10:54:03.190"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.191" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:03.190" endtime="20241125 10:54:03.191"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.191" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.191" endtime="20241125 10:54:03.191"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.191" endtime="20241125 10:54:03.191"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.192" endtime="20241125 10:54:03.192"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.191" endtime="20241125 10:54:03.192"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.191" endtime="20241125 10:54:03.192"/>
</if>
<status status="PASS" starttime="20241125 10:54:03.190" endtime="20241125 10:54:03.192"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.190" endtime="20241125 10:54:03.192"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:03.192" endtime="20241125 10:54:03.192"/>
</return>
<msg timestamp="20241125 10:54:03.192" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.189" endtime="20241125 10:54:03.192"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:03.193" endtime="20241125 10:54:03.193"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:03.193" endtime="20241125 10:54:03.193"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.193" endtime="20241125 10:54:03.193"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.193" endtime="20241125 10:54:03.193"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:03.193" endtime="20241125 10:54:03.193"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:03.193" endtime="20241125 10:54:03.193"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.194" endtime="20241125 10:54:03.194"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:03.194" endtime="20241125 10:54:03.194"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:03.193" endtime="20241125 10:54:03.194"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.193" endtime="20241125 10:54:03.194"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:03.193" endtime="20241125 10:54:03.194"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.193" endtime="20241125 10:54:03.194"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.194" endtime="20241125 10:54:03.194"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:03.194" endtime="20241125 10:54:03.195"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:03.194" endtime="20241125 10:54:03.195"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.195" endtime="20241125 10:54:03.195"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:03.195" endtime="20241125 10:54:03.195"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:03.195" endtime="20241125 10:54:03.195"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.194" endtime="20241125 10:54:03.195"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:03.194" endtime="20241125 10:54:03.195"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.194" endtime="20241125 10:54:03.195"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:03.192" endtime="20241125 10:54:03.195"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.192" endtime="20241125 10:54:03.195"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:03.196" endtime="20241125 10:54:03.196"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:03.196" endtime="20241125 10:54:03.196"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.196" endtime="20241125 10:54:03.196"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.196" endtime="20241125 10:54:03.196"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.196" endtime="20241125 10:54:03.196"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.196" endtime="20241125 10:54:03.196"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.197" endtime="20241125 10:54:03.197"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:03.197" endtime="20241125 10:54:03.197"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:03.197" endtime="20241125 10:54:03.197"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.197" endtime="20241125 10:54:03.197"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:03.197" endtime="20241125 10:54:03.197"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:03.197" endtime="20241125 10:54:03.197"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.197" endtime="20241125 10:54:03.198"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:03.197" endtime="20241125 10:54:03.198"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:03.196" endtime="20241125 10:54:03.198"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:03.196" endtime="20241125 10:54:03.198"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.195" endtime="20241125 10:54:03.198"/>
</if>
<status status="PASS" starttime="20241125 10:54:03.180" endtime="20241125 10:54:03.198"/>
</iter>
<status status="PASS" starttime="20241125 10:54:03.180" endtime="20241125 10:54:03.198"/>
</for>
<msg timestamp="20241125 10:54:03.198" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:54:03.179" endtime="20241125 10:54:03.198"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:03.198" endtime="20241125 10:54:03.199"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:03.203" endtime="20241125 10:54:03.204"/>
</kw>
<msg timestamp="20241125 10:54:03.204" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.203" endtime="20241125 10:54:03.204"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.204" level="INFO">${values} = {'id': '3', 'name': 'Login button', 'xpath': '//button[@type="submit" and text()="Login"]', 'pageId': '1', 'createdAt': '2024-11-24T16:47:28.991Z', 'updatedAt': '2024-11-24T16:47:28.991Z'}</msg>
<status status="PASS" starttime="20241125 10:54:03.204" endtime="20241125 10:54:03.204"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.205" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.205" endtime="20241125 10:54:03.205"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.205" endtime="20241125 10:54:03.205"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.205" endtime="20241125 10:54:03.205"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.205" endtime="20241125 10:54:03.205"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.204" endtime="20241125 10:54:03.205"/>
</if>
<status status="PASS" starttime="20241125 10:54:03.204" endtime="20241125 10:54:03.205"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.204" endtime="20241125 10:54:03.205"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:03.205" endtime="20241125 10:54:03.206"/>
</return>
<msg timestamp="20241125 10:54:03.206" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.203" endtime="20241125 10:54:03.206"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.207" level="INFO">${xpath} = //button[@type="submit" and text()="Login"]</msg>
<status status="PASS" starttime="20241125 10:54:03.207" endtime="20241125 10:54:03.207"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.206" endtime="20241125 10:54:03.207"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.207" endtime="20241125 10:54:03.207"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.207" endtime="20241125 10:54:03.207"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.206" endtime="20241125 10:54:03.207"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:03.208" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '124', 'status': 'COMPLETED', 'actionName': 'Click login button', 'actionType': 'CLICK', 'actionXpath': '//button[@type="submit" and text()="Login"]', 'inputValue': '',...</msg>
<status status="PASS" starttime="20241125 10:54:03.207" endtime="20241125 10:54:03.208"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:03.209" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "124", "status": "COMPLETED", "actionName": "Click login button", "actionType": "CLICK", "actionXpath": "//button[@type=\"submit\" and text()=\"Login\"]", "inputValue":...</msg>
<status status="PASS" starttime="20241125 10:54:03.209" endtime="20241125 10:54:03.209"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:03.238" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:03.238" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:03.209" endtime="20241125 10:54:03.238"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:03.238" endtime="20241125 10:54:03.239"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:03.239" endtime="20241125 10:54:03.239"/>
</return>
<status status="PASS" starttime="20241125 10:54:03.208" endtime="20241125 10:54:03.239"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.199" endtime="20241125 10:54:03.239"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.040" endtime="20241125 10:54:03.240"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.240" endtime="20241125 10:54:03.240"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:03.240" endtime="20241125 10:54:03.240"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.240" endtime="20241125 10:54:03.240"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.240" endtime="20241125 10:54:03.241"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.040" endtime="20241125 10:54:03.241"/>
</try>
<status status="PASS" starttime="20241125 10:54:03.039" endtime="20241125 10:54:03.241"/>
</iter>
<status status="PASS" starttime="20241125 10:53:59.834" endtime="20241125 10:54:03.241"/>
</for>
<status status="PASS" starttime="20241125 10:53:59.834" endtime="20241125 10:54:03.241"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.834" endtime="20241125 10:54:03.241"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:03.243" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '61', 'status': 'COMPLETED', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241125 10:54:03.242" endtime="20241125 10:54:03.243"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:03.244" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "61", "status": "COMPLETED", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241125 10:54:03.243" endtime="20241125 10:54:03.244"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:03.269" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:03.270" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:03.244" endtime="20241125 10:54:03.270"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:03.270" endtime="20241125 10:54:03.271"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:03.271" endtime="20241125 10:54:03.271"/>
</return>
<status status="PASS" starttime="20241125 10:54:03.243" endtime="20241125 10:54:03.272"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.241" endtime="20241125 10:54:03.272"/>
</kw>
<status status="PASS" starttime="20241125 10:53:59.826" endtime="20241125 10:54:03.272"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.273" endtime="20241125 10:54:03.273"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:03.273" endtime="20241125 10:54:03.273"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.273" endtime="20241125 10:54:03.273"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.272" endtime="20241125 10:54:03.273"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.825" endtime="20241125 10:54:03.273"/>
</try>
<status status="PASS" starttime="20241125 10:53:59.825" endtime="20241125 10:54:03.273"/>
</iter>
<iter>
<var name="${testCaseFlowSequence}">{'id': '5', 'testCaseId': '2', 'flowId': '2', 'order': 1, 'createdAt': '2024-11-25T05:22:01.703Z', 'updatedAt': '2024-11-25T05:23:56.308Z', 'flow': {'id': '2', 'name': 'Navigate to profile', 'projectI...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.274" level="INFO">${flow} = {'id': '2', 'name': 'Navigate to profile', 'projectId': '1', 'createdAt': '2024-11-24T16:52:30.660Z', 'updatedAt': '2024-11-24T16:52:30.660Z', 'flowActionSequences': [{'id': '5', 'actionId': '5', 'flo...</msg>
<status status="PASS" starttime="20241125 10:54:03.274" endtime="20241125 10:54:03.274"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:03.275" endtime="20241125 10:54:03.275"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:03.278" endtime="20241125 10:54:03.279"/>
</kw>
<msg timestamp="20241125 10:54:03.279" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.278" endtime="20241125 10:54:03.279"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.279" level="INFO">${values} = [{'id': '5', 'actionId': '5', 'flowId': '2', 'order': 0, 'createdAt': '2024-11-24T16:52:30.906Z', 'updatedAt': '2024-11-24T16:52:30.906Z', 'action': {'id': '5', 'name': 'Click profile header icon', 't...</msg>
<status status="PASS" starttime="20241125 10:54:03.279" endtime="20241125 10:54:03.279"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.280" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.280" endtime="20241125 10:54:03.280"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.280" endtime="20241125 10:54:03.280"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.280" endtime="20241125 10:54:03.280"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.280" endtime="20241125 10:54:03.281"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.279" endtime="20241125 10:54:03.281"/>
</if>
<status status="PASS" starttime="20241125 10:54:03.279" endtime="20241125 10:54:03.281"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.279" endtime="20241125 10:54:03.281"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:03.281" endtime="20241125 10:54:03.281"/>
</return>
<msg timestamp="20241125 10:54:03.281" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.278" endtime="20241125 10:54:03.281"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '5', 'actionId': '5', 'flowId': '2', 'order': 0, 'createdAt': '2024-11-24T16:52:30.906Z', 'updatedAt': '2024-11-24T16:52:30.906Z', 'action': {'id': '5', 'name': 'Click profile header icon', 'ty...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.282" level="INFO">${action} = {'id': '5', 'name': 'Click profile header icon', 'type': 'CLICK', 'selectorI': '4', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:51:14.954Z', 'updatedAt': '2024-11-24T16:51:14.954Z',...</msg>
<status status="PASS" starttime="20241125 10:54:03.282" endtime="20241125 10:54:03.282"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:03.282" endtime="20241125 10:54:03.284"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:03.284" level="INFO">${input} = {'id': '5', 'actionId': '5', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:51:15.169Z', 'updatedAt': '2024-11-24T16:51:15.169Z'}</msg>
<status status="PASS" starttime="20241125 10:54:03.284" endtime="20241125 10:54:03.284"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.285" endtime="20241125 10:54:03.285"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:03.285" endtime="20241125 10:54:03.286"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.285" endtime="20241125 10:54:03.286"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.285" endtime="20241125 10:54:03.286"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:03.287" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:03.287" endtime="20241125 10:54:03.287"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:03.287" endtime="20241125 10:54:03.287"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.287" endtime="20241125 10:54:03.287"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:03.288" endtime="20241125 10:54:03.288"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:03.288" endtime="20241125 10:54:03.288"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:04.155" level="INFO">Waited for Element with selector id=headerProfileImage at state attached</msg>
<status status="PASS" starttime="20241125 10:54:03.295" endtime="20241125 10:54:04.156"/>
</kw>
<msg timestamp="20241125 10:54:04.156" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.294" endtime="20241125 10:54:04.156"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:04.156" endtime="20241125 10:54:04.156"/>
</return>
<status status="PASS" starttime="20241125 10:54:03.294" endtime="20241125 10:54:04.156"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.157" endtime="20241125 10:54:04.157"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.157" endtime="20241125 10:54:04.157"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.157" endtime="20241125 10:54:04.158"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.294" endtime="20241125 10:54:04.158"/>
</try>
<msg timestamp="20241125 10:54:04.158" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.294" endtime="20241125 10:54:04.158"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:04.158" endtime="20241125 10:54:04.159"/>
</return>
<status status="PASS" starttime="20241125 10:54:03.293" endtime="20241125 10:54:04.159"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:04.159" endtime="20241125 10:54:04.159"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:04.159" endtime="20241125 10:54:04.159"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.293" endtime="20241125 10:54:04.159"/>
</try>
<msg timestamp="20241125 10:54:04.160" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:03.292" endtime="20241125 10:54:04.160"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.163" endtime="20241125 10:54:04.164"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.164" endtime="20241125 10:54:04.164"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.163" endtime="20241125 10:54:04.164"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.163" endtime="20241125 10:54:04.164"/>
</if>
<status status="PASS" starttime="20241125 10:54:04.162" endtime="20241125 10:54:04.164"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.292" endtime="20241125 10:54:04.165"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:04.175" level="INFO">Waited for Element with selector id=headerProfileImage at state visible</msg>
<status status="PASS" starttime="20241125 10:54:04.170" endtime="20241125 10:54:04.175"/>
</kw>
<msg timestamp="20241125 10:54:04.175" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.170" endtime="20241125 10:54:04.175"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:04.175" endtime="20241125 10:54:04.176"/>
</return>
<status status="PASS" starttime="20241125 10:54:04.170" endtime="20241125 10:54:04.176"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.176" endtime="20241125 10:54:04.176"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.176" endtime="20241125 10:54:04.176"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.176" endtime="20241125 10:54:04.176"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.169" endtime="20241125 10:54:04.176"/>
</try>
<msg timestamp="20241125 10:54:04.177" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.169" endtime="20241125 10:54:04.177"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:04.177" endtime="20241125 10:54:04.177"/>
</return>
<msg timestamp="20241125 10:54:04.177" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.167" endtime="20241125 10:54:04.177"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.179" endtime="20241125 10:54:04.179"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.179" endtime="20241125 10:54:04.179"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.179" endtime="20241125 10:54:04.179"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.179" endtime="20241125 10:54:04.180"/>
</if>
<status status="PASS" starttime="20241125 10:54:04.178" endtime="20241125 10:54:04.180"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.167" endtime="20241125 10:54:04.180"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:04.207" level="INFO">Waited for Element with selector id=headerProfileImage at state enabled</msg>
<status status="PASS" starttime="20241125 10:54:04.186" endtime="20241125 10:54:04.207"/>
</kw>
<msg timestamp="20241125 10:54:04.208" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.186" endtime="20241125 10:54:04.208"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:04.208" endtime="20241125 10:54:04.208"/>
</return>
<status status="PASS" starttime="20241125 10:54:04.186" endtime="20241125 10:54:04.208"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.208" endtime="20241125 10:54:04.208"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.209" endtime="20241125 10:54:04.209"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.208" endtime="20241125 10:54:04.209"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.186" endtime="20241125 10:54:04.209"/>
</try>
<msg timestamp="20241125 10:54:04.209" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.185" endtime="20241125 10:54:04.209"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:04.209" endtime="20241125 10:54:04.209"/>
</return>
<msg timestamp="20241125 10:54:04.209" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.184" endtime="20241125 10:54:04.209"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.212" endtime="20241125 10:54:04.212"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.212" endtime="20241125 10:54:04.212"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.211" endtime="20241125 10:54:04.212"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.211" endtime="20241125 10:54:04.212"/>
</if>
<status status="PASS" starttime="20241125 10:54:04.210" endtime="20241125 10:54:04.212"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.183" endtime="20241125 10:54:04.212"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.290" endtime="20241125 10:54:04.213"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:04.213" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:54:04.213" endtime="20241125 10:54:04.213"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.216" endtime="20241125 10:54:04.216"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.216" endtime="20241125 10:54:04.216"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:04.217" endtime="20241125 10:54:04.217"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.216" endtime="20241125 10:54:04.217"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.215" endtime="20241125 10:54:04.217"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241125 10:54:04.218" endtime="20241125 10:54:04.677"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.218" endtime="20241125 10:54:04.677"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.677" endtime="20241125 10:54:04.678"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.678" endtime="20241125 10:54:04.678"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.677" endtime="20241125 10:54:04.678"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.218" endtime="20241125 10:54:04.679"/>
</try>
<status status="PASS" starttime="20241125 10:54:04.214" endtime="20241125 10:54:04.679"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.214" endtime="20241125 10:54:04.679"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.213" endtime="20241125 10:54:04.679"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.680" endtime="20241125 10:54:04.680"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.679" endtime="20241125 10:54:04.680"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.213" endtime="20241125 10:54:04.680"/>
</try>
<status status="PASS" starttime="20241125 10:54:03.290" endtime="20241125 10:54:04.681"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.288" endtime="20241125 10:54:04.681"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.685" endtime="20241125 10:54:04.685"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.690" endtime="20241125 10:54:04.690"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.681" endtime="20241125 10:54:04.690"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.692" endtime="20241125 10:54:04.692"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.690" endtime="20241125 10:54:04.692"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.698" endtime="20241125 10:54:04.699"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.693" endtime="20241125 10:54:04.699"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.702" endtime="20241125 10:54:04.702"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.699" endtime="20241125 10:54:04.702"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.704" endtime="20241125 10:54:04.705"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.703" endtime="20241125 10:54:04.705"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.706" endtime="20241125 10:54:04.706"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.707" endtime="20241125 10:54:04.707"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.707" endtime="20241125 10:54:04.707"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.707" endtime="20241125 10:54:04.707"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.707" endtime="20241125 10:54:04.708"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.707" endtime="20241125 10:54:04.708"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:04.705" endtime="20241125 10:54:04.708"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:04.717" endtime="20241125 10:54:04.717"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.721" endtime="20241125 10:54:04.722"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.708" endtime="20241125 10:54:04.722"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.723" endtime="20241125 10:54:04.724"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.724" endtime="20241125 10:54:04.724"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.724" endtime="20241125 10:54:04.724"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.725" endtime="20241125 10:54:04.725"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.724" endtime="20241125 10:54:04.725"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.724" endtime="20241125 10:54:04.725"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:04.722" endtime="20241125 10:54:04.725"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:04.734" endtime="20241125 10:54:04.734"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.737" endtime="20241125 10:54:04.737"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.725" endtime="20241125 10:54:04.737"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.738" endtime="20241125 10:54:04.738"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.739" endtime="20241125 10:54:04.739"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.738" endtime="20241125 10:54:04.739"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.739" endtime="20241125 10:54:04.739"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.739" endtime="20241125 10:54:04.739"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.738" endtime="20241125 10:54:04.739"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:04.737" endtime="20241125 10:54:04.739"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.742" endtime="20241125 10:54:04.742"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.739" endtime="20241125 10:54:04.742"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:04.750" endtime="20241125 10:54:04.750"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.750" endtime="20241125 10:54:04.751"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.743" endtime="20241125 10:54:04.751"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.287" endtime="20241125 10:54:04.751"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:04.751" endtime="20241125 10:54:04.753"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:04.754" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:04.754" endtime="20241125 10:54:04.754"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:04.754" endtime="20241125 10:54:04.755"/>
</return>
<msg timestamp="20241125 10:54:04.755" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:03.286" endtime="20241125 10:54:04.755"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.757" level="INFO">${key} = testCaseFlowSequenceId:5::flowActionSequenceId:5</msg>
<status status="PASS" starttime="20241125 10:54:04.756" endtime="20241125 10:54:04.757"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.758" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:04.758" endtime="20241125 10:54:04.758"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.759" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:04.758" endtime="20241125 10:54:04.759"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.760" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:04.759" endtime="20241125 10:54:04.760"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.760" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:04.760" endtime="20241125 10:54:04.760"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.761" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241125 10:54:04.761" endtime="20241125 10:54:04.761"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.762" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241125 10:54:04.761" endtime="20241125 10:54:04.762"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.763" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:04.762" endtime="20241125 10:54:04.763"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:04.763" endtime="20241125 10:54:04.764"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:04.769" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:6::flowActionSequenceId:7'.</msg>
<status status="FAIL" starttime="20241125 10:54:04.768" endtime="20241125 10:54:04.769"/>
</kw>
<msg timestamp="20241125 10:54:04.769" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:04.767" endtime="20241125 10:54:04.769"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.771" endtime="20241125 10:54:04.771"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.771" endtime="20241125 10:54:04.772"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.771" endtime="20241125 10:54:04.772"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.773" endtime="20241125 10:54:04.773"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.772" endtime="20241125 10:54:04.773"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.771" endtime="20241125 10:54:04.774"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:04.770" endtime="20241125 10:54:04.774"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.769" endtime="20241125 10:54:04.774"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:04.774" endtime="20241125 10:54:04.774"/>
</return>
<msg timestamp="20241125 10:54:04.774" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:04.767" endtime="20241125 10:54:04.775"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:04.777" endtime="20241125 10:54:04.778"/>
</kw>
<msg timestamp="20241125 10:54:04.778" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.777" endtime="20241125 10:54:04.778"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.779" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:04.779" endtime="20241125 10:54:04.779"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.780" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.779" endtime="20241125 10:54:04.780"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.779" endtime="20241125 10:54:04.780"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.780" endtime="20241125 10:54:04.780"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.780" endtime="20241125 10:54:04.782"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.779" endtime="20241125 10:54:04.782"/>
</if>
<status status="PASS" starttime="20241125 10:54:04.778" endtime="20241125 10:54:04.783"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.778" endtime="20241125 10:54:04.783"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:04.784" endtime="20241125 10:54:04.784"/>
</return>
<msg timestamp="20241125 10:54:04.785" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.776" endtime="20241125 10:54:04.785"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:04.786" endtime="20241125 10:54:04.786"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:04.786" endtime="20241125 10:54:04.787"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.786" endtime="20241125 10:54:04.787"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.788" endtime="20241125 10:54:04.788"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:04.788" endtime="20241125 10:54:04.788"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:04.787" endtime="20241125 10:54:04.788"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.788" endtime="20241125 10:54:04.789"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:04.789" endtime="20241125 10:54:04.789"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:04.788" endtime="20241125 10:54:04.789"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.787" endtime="20241125 10:54:04.789"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:04.787" endtime="20241125 10:54:04.789"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.787" endtime="20241125 10:54:04.789"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.791" endtime="20241125 10:54:04.791"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:04.791" endtime="20241125 10:54:04.791"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:04.790" endtime="20241125 10:54:04.791"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.792" endtime="20241125 10:54:04.792"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:04.792" endtime="20241125 10:54:04.792"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:04.791" endtime="20241125 10:54:04.792"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.790" endtime="20241125 10:54:04.792"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:04.790" endtime="20241125 10:54:04.792"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.790" endtime="20241125 10:54:04.793"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:04.785" endtime="20241125 10:54:04.793"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.785" endtime="20241125 10:54:04.793"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:04.794" endtime="20241125 10:54:04.794"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:04.794" endtime="20241125 10:54:04.794"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.794" endtime="20241125 10:54:04.794"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.794" endtime="20241125 10:54:04.795"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.794" endtime="20241125 10:54:04.795"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.794" endtime="20241125 10:54:04.795"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.795" endtime="20241125 10:54:04.795"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:04.795" endtime="20241125 10:54:04.795"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:04.795" endtime="20241125 10:54:04.795"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.796" endtime="20241125 10:54:04.796"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:04.796" endtime="20241125 10:54:04.796"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:04.795" endtime="20241125 10:54:04.796"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.795" endtime="20241125 10:54:04.796"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:04.795" endtime="20241125 10:54:04.796"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:04.795" endtime="20241125 10:54:04.796"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:04.794" endtime="20241125 10:54:04.796"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.793" endtime="20241125 10:54:04.796"/>
</if>
<status status="PASS" starttime="20241125 10:54:04.757" endtime="20241125 10:54:04.796"/>
</iter>
<status status="PASS" starttime="20241125 10:54:04.757" endtime="20241125 10:54:04.796"/>
</for>
<msg timestamp="20241125 10:54:04.797" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:54:04.755" endtime="20241125 10:54:04.797"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:04.797" endtime="20241125 10:54:04.798"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:04.805" endtime="20241125 10:54:04.806"/>
</kw>
<msg timestamp="20241125 10:54:04.806" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.805" endtime="20241125 10:54:04.806"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.808" level="INFO">${values} = {'id': '4', 'name': 'Profile icon', 'xpath': 'id=headerProfileImage', 'pageId': '2', 'createdAt': '2024-11-24T16:48:09.826Z', 'updatedAt': '2024-11-24T17:36:27.753Z'}</msg>
<status status="PASS" starttime="20241125 10:54:04.807" endtime="20241125 10:54:04.808"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.809" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.809" endtime="20241125 10:54:04.809"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.808" endtime="20241125 10:54:04.809"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.809" endtime="20241125 10:54:04.810"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.809" endtime="20241125 10:54:04.810"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.808" endtime="20241125 10:54:04.810"/>
</if>
<status status="PASS" starttime="20241125 10:54:04.807" endtime="20241125 10:54:04.810"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.806" endtime="20241125 10:54:04.810"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:04.810" endtime="20241125 10:54:04.810"/>
</return>
<msg timestamp="20241125 10:54:04.810" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.804" endtime="20241125 10:54:04.810"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.811" level="INFO">${xpath} = id=headerProfileImage</msg>
<status status="PASS" starttime="20241125 10:54:04.811" endtime="20241125 10:54:04.811"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.811" endtime="20241125 10:54:04.811"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.811" endtime="20241125 10:54:04.811"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.811" endtime="20241125 10:54:04.811"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.810" endtime="20241125 10:54:04.812"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:04.813" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '125', 'status': 'COMPLETED', 'actionName': 'Click profile header icon', 'actionType': 'CLICK', 'actionXpath': 'id=headerProfileImage', 'inputValue': '', 'errorMessage'...</msg>
<status status="PASS" starttime="20241125 10:54:04.812" endtime="20241125 10:54:04.813"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:04.814" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "125", "status": "COMPLETED", "actionName": "Click profile header icon", "actionType": "CLICK", "actionXpath": "id=headerProfileImage", "inputValue": "", "errorMessage"...</msg>
<status status="PASS" starttime="20241125 10:54:04.813" endtime="20241125 10:54:04.814"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:04.821" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:04.821" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:04.815" endtime="20241125 10:54:04.821"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:04.821" endtime="20241125 10:54:04.822"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:04.822" endtime="20241125 10:54:04.822"/>
</return>
<status status="PASS" starttime="20241125 10:54:04.813" endtime="20241125 10:54:04.823"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.798" endtime="20241125 10:54:04.823"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.282" endtime="20241125 10:54:04.823"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.824" endtime="20241125 10:54:04.824"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:04.824" endtime="20241125 10:54:04.824"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.825" endtime="20241125 10:54:04.825"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.824" endtime="20241125 10:54:04.825"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.282" endtime="20241125 10:54:04.825"/>
</try>
<status status="PASS" starttime="20241125 10:54:03.282" endtime="20241125 10:54:04.825"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '6', 'actionId': '6', 'flowId': '2', 'order': 1, 'createdAt': '2024-11-24T16:52:30.906Z', 'updatedAt': '2024-11-24T16:52:30.906Z', 'action': {'id': '6', 'name': 'Click profile menu icon', 'type...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.827" level="INFO">${action} = {'id': '6', 'name': 'Click profile menu icon', 'type': 'CLICK', 'selectorI': '5', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:51:31.795Z', 'updatedAt': '2024-11-24T16:51:31.795Z', '...</msg>
<status status="PASS" starttime="20241125 10:54:04.826" endtime="20241125 10:54:04.827"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:04.827" endtime="20241125 10:54:04.827"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:04.828" level="INFO">${input} = {'id': '6', 'actionId': '6', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:51:31.968Z', 'updatedAt': '2024-11-24T16:51:31.968Z'}</msg>
<status status="PASS" starttime="20241125 10:54:04.827" endtime="20241125 10:54:04.828"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.829" endtime="20241125 10:54:04.829"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.829" endtime="20241125 10:54:04.829"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.828" endtime="20241125 10:54:04.829"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.828" endtime="20241125 10:54:04.830"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:04.832" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:04.830" endtime="20241125 10:54:04.832"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:04.833" endtime="20241125 10:54:04.833"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.832" endtime="20241125 10:54:04.833"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:04.834" endtime="20241125 10:54:04.834"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.833" endtime="20241125 10:54:04.834"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:04.865" level="INFO">Waited for Element with selector //p[text()="Profile"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:04.843" endtime="20241125 10:54:04.865"/>
</kw>
<msg timestamp="20241125 10:54:04.866" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.842" endtime="20241125 10:54:04.866"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:04.866" endtime="20241125 10:54:04.866"/>
</return>
<status status="PASS" starttime="20241125 10:54:04.842" endtime="20241125 10:54:04.866"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.867" endtime="20241125 10:54:04.867"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.868" endtime="20241125 10:54:04.868"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.867" endtime="20241125 10:54:04.868"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.842" endtime="20241125 10:54:04.868"/>
</try>
<msg timestamp="20241125 10:54:04.869" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.842" endtime="20241125 10:54:04.869"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:04.869" endtime="20241125 10:54:04.869"/>
</return>
<status status="PASS" starttime="20241125 10:54:04.841" endtime="20241125 10:54:04.870"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:04.870" endtime="20241125 10:54:04.870"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:04.870" endtime="20241125 10:54:04.870"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.841" endtime="20241125 10:54:04.870"/>
</try>
<msg timestamp="20241125 10:54:04.871" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.840" endtime="20241125 10:54:04.871"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.876" endtime="20241125 10:54:04.876"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.877" endtime="20241125 10:54:04.877"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.876" endtime="20241125 10:54:04.877"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.875" endtime="20241125 10:54:04.877"/>
</if>
<status status="PASS" starttime="20241125 10:54:04.873" endtime="20241125 10:54:04.877"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.840" endtime="20241125 10:54:04.878"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:04.891" level="INFO">Waited for Element with selector //p[text()="Profile"] at state visible</msg>
<status status="PASS" starttime="20241125 10:54:04.887" endtime="20241125 10:54:04.892"/>
</kw>
<msg timestamp="20241125 10:54:04.892" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.886" endtime="20241125 10:54:04.892"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:04.892" endtime="20241125 10:54:04.892"/>
</return>
<status status="PASS" starttime="20241125 10:54:04.886" endtime="20241125 10:54:04.892"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.892" endtime="20241125 10:54:04.893"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.893" endtime="20241125 10:54:04.893"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.892" endtime="20241125 10:54:04.893"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.885" endtime="20241125 10:54:04.893"/>
</try>
<msg timestamp="20241125 10:54:04.893" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.884" endtime="20241125 10:54:04.893"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:04.893" endtime="20241125 10:54:04.893"/>
</return>
<msg timestamp="20241125 10:54:04.893" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.882" endtime="20241125 10:54:04.894"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.896" endtime="20241125 10:54:04.896"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.897" endtime="20241125 10:54:04.897"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.896" endtime="20241125 10:54:04.897"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.896" endtime="20241125 10:54:04.897"/>
</if>
<status status="PASS" starttime="20241125 10:54:04.895" endtime="20241125 10:54:04.897"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.881" endtime="20241125 10:54:04.897"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:04.987" level="INFO">Waited for Element with selector //p[text()="Profile"] at state enabled</msg>
<status status="PASS" starttime="20241125 10:54:04.907" endtime="20241125 10:54:04.987"/>
</kw>
<msg timestamp="20241125 10:54:04.988" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.906" endtime="20241125 10:54:04.988"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:04.988" endtime="20241125 10:54:04.988"/>
</return>
<status status="PASS" starttime="20241125 10:54:04.905" endtime="20241125 10:54:04.988"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.988" endtime="20241125 10:54:04.988"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.988" endtime="20241125 10:54:04.988"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.988" endtime="20241125 10:54:04.988"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.905" endtime="20241125 10:54:04.988"/>
</try>
<msg timestamp="20241125 10:54:04.989" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.904" endtime="20241125 10:54:04.989"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:04.989" endtime="20241125 10:54:04.989"/>
</return>
<msg timestamp="20241125 10:54:04.989" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241125 10:54:04.901" endtime="20241125 10:54:04.989"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.991" endtime="20241125 10:54:04.991"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.991" endtime="20241125 10:54:04.991"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.991" endtime="20241125 10:54:04.991"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.991" endtime="20241125 10:54:04.991"/>
</if>
<status status="PASS" starttime="20241125 10:54:04.990" endtime="20241125 10:54:04.992"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.900" endtime="20241125 10:54:04.992"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.837" endtime="20241125 10:54:04.992"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:04.992" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:54:04.992" endtime="20241125 10:54:04.992"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241125 10:54:04.994" endtime="20241125 10:54:04.994"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:04.994" endtime="20241125 10:54:04.994"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:04.995" endtime="20241125 10:54:04.995"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.994" endtime="20241125 10:54:04.995"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.994" endtime="20241125 10:54:04.995"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241125 10:54:04.996" endtime="20241125 10:54:05.195"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.995" endtime="20241125 10:54:05.195"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.196" endtime="20241125 10:54:05.196"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.196" endtime="20241125 10:54:05.196"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.195" endtime="20241125 10:54:05.196"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.995" endtime="20241125 10:54:05.196"/>
</try>
<status status="PASS" starttime="20241125 10:54:04.993" endtime="20241125 10:54:05.196"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.993" endtime="20241125 10:54:05.197"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.993" endtime="20241125 10:54:05.197"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.197" endtime="20241125 10:54:05.198"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.197" endtime="20241125 10:54:05.198"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.992" endtime="20241125 10:54:05.198"/>
</try>
<status status="PASS" starttime="20241125 10:54:04.836" endtime="20241125 10:54:05.198"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.834" endtime="20241125 10:54:05.198"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.202" endtime="20241125 10:54:05.202"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.204" endtime="20241125 10:54:05.204"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.199" endtime="20241125 10:54:05.204"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.206" endtime="20241125 10:54:05.206"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.204" endtime="20241125 10:54:05.206"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.209" endtime="20241125 10:54:05.209"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.206" endtime="20241125 10:54:05.209"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.212" endtime="20241125 10:54:05.212"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.209" endtime="20241125 10:54:05.212"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.214" endtime="20241125 10:54:05.215"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.212" endtime="20241125 10:54:05.215"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.217" endtime="20241125 10:54:05.217"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.218" endtime="20241125 10:54:05.218"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.217" endtime="20241125 10:54:05.218"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.218" endtime="20241125 10:54:05.218"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.218" endtime="20241125 10:54:05.218"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.217" endtime="20241125 10:54:05.218"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.215" endtime="20241125 10:54:05.218"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:05.225" endtime="20241125 10:54:05.225"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.228" endtime="20241125 10:54:05.228"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.219" endtime="20241125 10:54:05.228"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.230" endtime="20241125 10:54:05.230"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.230" endtime="20241125 10:54:05.230"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.230" endtime="20241125 10:54:05.230"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.231" endtime="20241125 10:54:05.232"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.230" endtime="20241125 10:54:05.232"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.230" endtime="20241125 10:54:05.232"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.229" endtime="20241125 10:54:05.233"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:05.242" endtime="20241125 10:54:05.242"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.245" endtime="20241125 10:54:05.245"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.233" endtime="20241125 10:54:05.245"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.247" endtime="20241125 10:54:05.247"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.248" endtime="20241125 10:54:05.249"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.247" endtime="20241125 10:54:05.249"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.249" endtime="20241125 10:54:05.249"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.249" endtime="20241125 10:54:05.249"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.247" endtime="20241125 10:54:05.250"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.246" endtime="20241125 10:54:05.250"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.252" endtime="20241125 10:54:05.253"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.250" endtime="20241125 10:54:05.253"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:05.259" endtime="20241125 10:54:05.260"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.260" endtime="20241125 10:54:05.260"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.253" endtime="20241125 10:54:05.260"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.832" endtime="20241125 10:54:05.260"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:05.260" endtime="20241125 10:54:05.261"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:05.261" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:05.261" endtime="20241125 10:54:05.262"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:05.262" endtime="20241125 10:54:05.262"/>
</return>
<msg timestamp="20241125 10:54:05.262" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:04.830" endtime="20241125 10:54:05.262"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.266" level="INFO">${key} = testCaseFlowSequenceId:5::flowActionSequenceId:6</msg>
<status status="PASS" starttime="20241125 10:54:05.265" endtime="20241125 10:54:05.266"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.268" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:05.267" endtime="20241125 10:54:05.268"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.268" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:05.268" endtime="20241125 10:54:05.268"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.269" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:05.269" endtime="20241125 10:54:05.269"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.269" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:05.269" endtime="20241125 10:54:05.269"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.270" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241125 10:54:05.270" endtime="20241125 10:54:05.270"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.270" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241125 10:54:05.270" endtime="20241125 10:54:05.270"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.271" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:05.270" endtime="20241125 10:54:05.271"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:05.271" endtime="20241125 10:54:05.271"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:05.274" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:6::flowActionSequenceId:7'.</msg>
<status status="FAIL" starttime="20241125 10:54:05.273" endtime="20241125 10:54:05.274"/>
</kw>
<msg timestamp="20241125 10:54:05.274" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:05.273" endtime="20241125 10:54:05.274"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.274" endtime="20241125 10:54:05.275"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.275" endtime="20241125 10:54:05.275"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.275" endtime="20241125 10:54:05.275"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.275" endtime="20241125 10:54:05.275"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.275" endtime="20241125 10:54:05.276"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.275" endtime="20241125 10:54:05.276"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.274" endtime="20241125 10:54:05.276"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.274" endtime="20241125 10:54:05.276"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:05.276" endtime="20241125 10:54:05.276"/>
</return>
<msg timestamp="20241125 10:54:05.276" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:05.272" endtime="20241125 10:54:05.276"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:05.278" endtime="20241125 10:54:05.278"/>
</kw>
<msg timestamp="20241125 10:54:05.278" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.278" endtime="20241125 10:54:05.278"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.279" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:05.279" endtime="20241125 10:54:05.279"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.280" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.280" endtime="20241125 10:54:05.280"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.280" endtime="20241125 10:54:05.280"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.280" endtime="20241125 10:54:05.282"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.280" endtime="20241125 10:54:05.282"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.279" endtime="20241125 10:54:05.282"/>
</if>
<status status="PASS" starttime="20241125 10:54:05.279" endtime="20241125 10:54:05.282"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.278" endtime="20241125 10:54:05.282"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:05.282" endtime="20241125 10:54:05.282"/>
</return>
<msg timestamp="20241125 10:54:05.283" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.277" endtime="20241125 10:54:05.283"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:05.284" endtime="20241125 10:54:05.284"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.284" endtime="20241125 10:54:05.285"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.284" endtime="20241125 10:54:05.285"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.286" endtime="20241125 10:54:05.286"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:05.286" endtime="20241125 10:54:05.286"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.285" endtime="20241125 10:54:05.287"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.287" endtime="20241125 10:54:05.287"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:05.287" endtime="20241125 10:54:05.287"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.287" endtime="20241125 10:54:05.287"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.285" endtime="20241125 10:54:05.287"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.285" endtime="20241125 10:54:05.287"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.285" endtime="20241125 10:54:05.287"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.288" endtime="20241125 10:54:05.288"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:05.288" endtime="20241125 10:54:05.288"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.288" endtime="20241125 10:54:05.288"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.288" endtime="20241125 10:54:05.288"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:05.288" endtime="20241125 10:54:05.288"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.288" endtime="20241125 10:54:05.289"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.288" endtime="20241125 10:54:05.289"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.287" endtime="20241125 10:54:05.289"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.287" endtime="20241125 10:54:05.289"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.284" endtime="20241125 10:54:05.289"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.283" endtime="20241125 10:54:05.289"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:05.289" endtime="20241125 10:54:05.289"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.289" endtime="20241125 10:54:05.290"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.289" endtime="20241125 10:54:05.290"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.290" endtime="20241125 10:54:05.290"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.290" endtime="20241125 10:54:05.290"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.290" endtime="20241125 10:54:05.290"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.290" endtime="20241125 10:54:05.291"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:05.291" endtime="20241125 10:54:05.291"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.290" endtime="20241125 10:54:05.291"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.291" endtime="20241125 10:54:05.291"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:05.291" endtime="20241125 10:54:05.291"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.291" endtime="20241125 10:54:05.291"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.290" endtime="20241125 10:54:05.291"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.290" endtime="20241125 10:54:05.291"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.290" endtime="20241125 10:54:05.291"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.289" endtime="20241125 10:54:05.291"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.289" endtime="20241125 10:54:05.291"/>
</if>
<status status="PASS" starttime="20241125 10:54:05.267" endtime="20241125 10:54:05.292"/>
</iter>
<status status="PASS" starttime="20241125 10:54:05.266" endtime="20241125 10:54:05.292"/>
</for>
<msg timestamp="20241125 10:54:05.292" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:54:05.263" endtime="20241125 10:54:05.292"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:05.292" endtime="20241125 10:54:05.293"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:05.296" endtime="20241125 10:54:05.296"/>
</kw>
<msg timestamp="20241125 10:54:05.297" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.296" endtime="20241125 10:54:05.297"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.297" level="INFO">${values} = {'id': '5', 'name': 'Profile menu icon', 'xpath': '//p[text()="Profile"]', 'pageId': '2', 'createdAt': '2024-11-24T16:49:21.505Z', 'updatedAt': '2024-11-24T16:49:21.505Z'}</msg>
<status status="PASS" starttime="20241125 10:54:05.297" endtime="20241125 10:54:05.297"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.303" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.300" endtime="20241125 10:54:05.303"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.299" endtime="20241125 10:54:05.303"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.304" endtime="20241125 10:54:05.304"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.303" endtime="20241125 10:54:05.304"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.298" endtime="20241125 10:54:05.304"/>
</if>
<status status="PASS" starttime="20241125 10:54:05.297" endtime="20241125 10:54:05.304"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.297" endtime="20241125 10:54:05.304"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:05.305" endtime="20241125 10:54:05.305"/>
</return>
<msg timestamp="20241125 10:54:05.305" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.296" endtime="20241125 10:54:05.305"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.307" level="INFO">${xpath} = //p[text()="Profile"]</msg>
<status status="PASS" starttime="20241125 10:54:05.306" endtime="20241125 10:54:05.307"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.306" endtime="20241125 10:54:05.307"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.307" endtime="20241125 10:54:05.307"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.307" endtime="20241125 10:54:05.307"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.305" endtime="20241125 10:54:05.307"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:05.308" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '126', 'status': 'COMPLETED', 'actionName': 'Click profile menu icon', 'actionType': 'CLICK', 'actionXpath': '//p[text()="Profile"]', 'inputValue': '', 'errorMessage': ...</msg>
<status status="PASS" starttime="20241125 10:54:05.308" endtime="20241125 10:54:05.308"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:05.309" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "126", "status": "COMPLETED", "actionName": "Click profile menu icon", "actionType": "CLICK", "actionXpath": "//p[text()=\"Profile\"]", "inputValue": "", "errorMessage"...</msg>
<status status="PASS" starttime="20241125 10:54:05.309" endtime="20241125 10:54:05.309"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:05.319" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:05.319" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:05.310" endtime="20241125 10:54:05.319"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:05.320" endtime="20241125 10:54:05.321"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:05.321" endtime="20241125 10:54:05.321"/>
</return>
<status status="PASS" starttime="20241125 10:54:05.309" endtime="20241125 10:54:05.322"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.293" endtime="20241125 10:54:05.323"/>
</kw>
<status status="PASS" starttime="20241125 10:54:04.826" endtime="20241125 10:54:05.323"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.324" endtime="20241125 10:54:05.324"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:05.324" endtime="20241125 10:54:05.324"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.325" endtime="20241125 10:54:05.325"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.323" endtime="20241125 10:54:05.325"/>
</branch>
<status status="PASS" starttime="20241125 10:54:04.826" endtime="20241125 10:54:05.326"/>
</try>
<status status="PASS" starttime="20241125 10:54:04.826" endtime="20241125 10:54:05.326"/>
</iter>
<status status="PASS" starttime="20241125 10:54:03.281" endtime="20241125 10:54:05.326"/>
</for>
<status status="PASS" starttime="20241125 10:54:03.281" endtime="20241125 10:54:05.327"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.281" endtime="20241125 10:54:05.327"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:05.331" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '62', 'status': 'COMPLETED', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241125 10:54:05.329" endtime="20241125 10:54:05.331"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:05.335" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "62", "status": "COMPLETED", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241125 10:54:05.333" endtime="20241125 10:54:05.335"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:05.340" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:05.340" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:05.336" endtime="20241125 10:54:05.340"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:05.340" endtime="20241125 10:54:05.341"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:05.341" endtime="20241125 10:54:05.341"/>
</return>
<status status="PASS" starttime="20241125 10:54:05.332" endtime="20241125 10:54:05.342"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.327" endtime="20241125 10:54:05.342"/>
</kw>
<status status="PASS" starttime="20241125 10:54:03.274" endtime="20241125 10:54:05.342"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.343" endtime="20241125 10:54:05.343"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:05.343" endtime="20241125 10:54:05.343"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.343" endtime="20241125 10:54:05.343"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.342" endtime="20241125 10:54:05.344"/>
</branch>
<status status="PASS" starttime="20241125 10:54:03.274" endtime="20241125 10:54:05.344"/>
</try>
<status status="PASS" starttime="20241125 10:54:03.274" endtime="20241125 10:54:05.344"/>
</iter>
<iter>
<var name="${testCaseFlowSequence}">{'id': '6', 'testCaseId': '2', 'flowId': '3', 'order': 2, 'createdAt': '2024-11-25T05:22:01.703Z', 'updatedAt': '2024-11-25T05:23:56.314Z', 'flow': {'id': '3', 'name': 'Get Profile information', 'proj...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.345" level="INFO">${flow} = {'id': '3', 'name': 'Get Profile information', 'projectId': '1', 'createdAt': '2024-11-24T16:52:52.554Z', 'updatedAt': '2024-11-24T16:52:52.554Z', 'flowActionSequences': [{'id': '7', 'actionId': '7', ...</msg>
<status status="PASS" starttime="20241125 10:54:05.344" endtime="20241125 10:54:05.345"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:05.345" endtime="20241125 10:54:05.345"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:05.351" endtime="20241125 10:54:05.351"/>
</kw>
<msg timestamp="20241125 10:54:05.351" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.351" endtime="20241125 10:54:05.352"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.352" level="INFO">${values} = [{'id': '7', 'actionId': '7', 'flowId': '3', 'order': 0, 'createdAt': '2024-11-24T16:52:52.808Z', 'updatedAt': '2024-11-24T16:52:52.808Z', 'action': {'id': '7', 'name': 'Get profile email', 'type': 'G...</msg>
<status status="PASS" starttime="20241125 10:54:05.352" endtime="20241125 10:54:05.352"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.353" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.353" endtime="20241125 10:54:05.353"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.353" endtime="20241125 10:54:05.353"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.353" endtime="20241125 10:54:05.353"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.353" endtime="20241125 10:54:05.354"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.352" endtime="20241125 10:54:05.354"/>
</if>
<status status="PASS" starttime="20241125 10:54:05.352" endtime="20241125 10:54:05.354"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.352" endtime="20241125 10:54:05.354"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:05.354" endtime="20241125 10:54:05.354"/>
</return>
<msg timestamp="20241125 10:54:05.354" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.350" endtime="20241125 10:54:05.354"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '7', 'actionId': '7', 'flowId': '3', 'order': 0, 'createdAt': '2024-11-24T16:52:52.808Z', 'updatedAt': '2024-11-24T16:52:52.808Z', 'action': {'id': '7', 'name': 'Get profile email', 'type': 'GE...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.355" level="INFO">${action} = {'id': '7', 'name': 'Get profile email', 'type': 'GET_TEXT', 'selectorI': '6', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:51:50.748Z', 'updatedAt': '2024-11-24T16:51:50.748Z', 'sel...</msg>
<status status="PASS" starttime="20241125 10:54:05.355" endtime="20241125 10:54:05.355"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:05.356" endtime="20241125 10:54:05.356"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:05.356" level="INFO">${input} = {'id': '7', 'actionId': '7', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:51:50.920Z', 'updatedAt': '2024-11-24T16:51:50.920Z'}</msg>
<status status="PASS" starttime="20241125 10:54:05.356" endtime="20241125 10:54:05.356"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.357" endtime="20241125 10:54:05.357"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.357" endtime="20241125 10:54:05.357"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.357" endtime="20241125 10:54:05.357"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.357" endtime="20241125 10:54:05.357"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.358" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:05.358" endtime="20241125 10:54:05.358"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:05.359" endtime="20241125 10:54:05.359"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.359" endtime="20241125 10:54:05.359"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:05.359" endtime="20241125 10:54:05.359"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.359" endtime="20241125 10:54:05.359"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.361" endtime="20241125 10:54:05.362"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.360" endtime="20241125 10:54:05.362"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.366" endtime="20241125 10:54:05.366"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.369" endtime="20241125 10:54:05.370"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.362" endtime="20241125 10:54:05.370"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.371" endtime="20241125 10:54:05.371"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.370" endtime="20241125 10:54:05.371"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.374" endtime="20241125 10:54:05.374"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.371" endtime="20241125 10:54:05.374"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.376" endtime="20241125 10:54:05.377"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.375" endtime="20241125 10:54:05.377"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.378" endtime="20241125 10:54:05.378"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.377" endtime="20241125 10:54:05.378"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.379" endtime="20241125 10:54:05.379"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.380" endtime="20241125 10:54:05.380"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.379" endtime="20241125 10:54:05.380"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.383" endtime="20241125 10:54:05.383"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.380" endtime="20241125 10:54:05.383"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.379" endtime="20241125 10:54:05.383"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.378" endtime="20241125 10:54:05.384"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:05.390" endtime="20241125 10:54:05.390"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.393" endtime="20241125 10:54:05.393"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.384" endtime="20241125 10:54:05.393"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.395" endtime="20241125 10:54:05.395"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.395" endtime="20241125 10:54:05.395"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.395" endtime="20241125 10:54:05.395"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.396" endtime="20241125 10:54:05.396"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.395" endtime="20241125 10:54:05.396"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.395" endtime="20241125 10:54:05.396"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.394" endtime="20241125 10:54:05.396"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:05.404" endtime="20241125 10:54:05.404"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.407" endtime="20241125 10:54:05.407"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.396" endtime="20241125 10:54:05.407"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.409" endtime="20241125 10:54:05.409"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.409" endtime="20241125 10:54:05.409"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.409" endtime="20241125 10:54:05.410"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.410" endtime="20241125 10:54:05.410"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.410" endtime="20241125 10:54:05.410"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.409" endtime="20241125 10:54:05.410"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.408" endtime="20241125 10:54:05.410"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:05.441" level="INFO">Waited for Element with selector //p[text()="EMAIL"]/following-sibling::p at state attached</msg>
<status status="PASS" starttime="20241125 10:54:05.419" endtime="20241125 10:54:05.441"/>
</kw>
<msg timestamp="20241125 10:54:05.442" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.419" endtime="20241125 10:54:05.442"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:05.442" endtime="20241125 10:54:05.442"/>
</return>
<status status="PASS" starttime="20241125 10:54:05.419" endtime="20241125 10:54:05.442"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.442" endtime="20241125 10:54:05.442"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.443" endtime="20241125 10:54:05.443"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.442" endtime="20241125 10:54:05.443"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.419" endtime="20241125 10:54:05.443"/>
</try>
<msg timestamp="20241125 10:54:05.443" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.418" endtime="20241125 10:54:05.443"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:05.443" endtime="20241125 10:54:05.443"/>
</return>
<status status="PASS" starttime="20241125 10:54:05.417" endtime="20241125 10:54:05.444"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:05.444" endtime="20241125 10:54:05.444"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.444" endtime="20241125 10:54:05.444"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.417" endtime="20241125 10:54:05.444"/>
</try>
<msg timestamp="20241125 10:54:05.445" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.417" endtime="20241125 10:54:05.445"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.450" endtime="20241125 10:54:05.450"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.451" endtime="20241125 10:54:05.451"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.450" endtime="20241125 10:54:05.451"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.449" endtime="20241125 10:54:05.451"/>
</if>
<status status="PASS" starttime="20241125 10:54:05.447" endtime="20241125 10:54:05.452"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.416" endtime="20241125 10:54:05.452"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:05.563" level="INFO">Property: 'bharani@ideas2it.com'</msg>
<msg timestamp="20241125 10:54:05.563" level="INFO">${property} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:05.453" endtime="20241125 10:54:05.563"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:05.563" endtime="20241125 10:54:05.564"/>
</return>
<status status="PASS" starttime="20241125 10:54:05.452" endtime="20241125 10:54:05.564"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.566" endtime="20241125 10:54:05.566"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.566" endtime="20241125 10:54:05.566"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.564" endtime="20241125 10:54:05.566"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.452" endtime="20241125 10:54:05.567"/>
</try>
<msg timestamp="20241125 10:54:05.567" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:05.413" endtime="20241125 10:54:05.567"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.410" endtime="20241125 10:54:05.567"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:05.572" endtime="20241125 10:54:05.573"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.573" endtime="20241125 10:54:05.573"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.567" endtime="20241125 10:54:05.573"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.358" endtime="20241125 10:54:05.573"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:05.573" endtime="20241125 10:54:05.573"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:05.574" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:05.574" endtime="20241125 10:54:05.574"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:05.574" endtime="20241125 10:54:05.574"/>
</return>
<msg timestamp="20241125 10:54:05.574" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:05.357" endtime="20241125 10:54:05.574"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.575" level="INFO">${key} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:05.575" endtime="20241125 10:54:05.575"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.576" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:05.576" endtime="20241125 10:54:05.576"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.576" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:05.576" endtime="20241125 10:54:05.576"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.577" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:05.576" endtime="20241125 10:54:05.577"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.577" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:05.577" endtime="20241125 10:54:05.577"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.577" level="INFO">${useCustomTargetValue} = False</msg>
<status status="PASS" starttime="20241125 10:54:05.577" endtime="20241125 10:54:05.577"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.578" level="INFO">${customTargetValue} = </msg>
<status status="PASS" starttime="20241125 10:54:05.578" endtime="20241125 10:54:05.578"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.578" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:05.578" endtime="20241125 10:54:05.578"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:05.578" endtime="20241125 10:54:05.579"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:05.582" endtime="20241125 10:54:05.582"/>
</kw>
<msg timestamp="20241125 10:54:05.582" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.580" endtime="20241125 10:54:05.582"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.583" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:05.583" endtime="20241125 10:54:05.583"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.584" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.584" endtime="20241125 10:54:05.584"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.583" endtime="20241125 10:54:05.584"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.584" endtime="20241125 10:54:05.584"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.584" endtime="20241125 10:54:05.584"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.583" endtime="20241125 10:54:05.584"/>
</if>
<status status="PASS" starttime="20241125 10:54:05.583" endtime="20241125 10:54:05.584"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.582" endtime="20241125 10:54:05.584"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:05.585" endtime="20241125 10:54:05.585"/>
</return>
<msg timestamp="20241125 10:54:05.585" level="INFO">${is_source_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.580" endtime="20241125 10:54:05.585"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:05.587" endtime="20241125 10:54:05.587"/>
</kw>
<msg timestamp="20241125 10:54:05.587" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.586" endtime="20241125 10:54:05.587"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.587" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:05.587" endtime="20241125 10:54:05.587"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.588" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.588" endtime="20241125 10:54:05.588"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.588" endtime="20241125 10:54:05.588"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.588" endtime="20241125 10:54:05.588"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.588" endtime="20241125 10:54:05.588"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.588" endtime="20241125 10:54:05.588"/>
</if>
<status status="PASS" starttime="20241125 10:54:05.587" endtime="20241125 10:54:05.589"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.587" endtime="20241125 10:54:05.589"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:05.589" endtime="20241125 10:54:05.589"/>
</return>
<msg timestamp="20241125 10:54:05.589" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.586" endtime="20241125 10:54:05.589"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:05.590" endtime="20241125 10:54:05.590"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.589" endtime="20241125 10:54:05.590"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.589" endtime="20241125 10:54:05.590"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.590" endtime="20241125 10:54:05.590"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:05.591" endtime="20241125 10:54:05.591"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.590" endtime="20241125 10:54:05.591"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.591" endtime="20241125 10:54:05.591"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:05.591" endtime="20241125 10:54:05.591"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.591" endtime="20241125 10:54:05.591"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.590" endtime="20241125 10:54:05.591"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.590" endtime="20241125 10:54:05.591"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.590" endtime="20241125 10:54:05.591"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20241125 10:54:05.592" endtime="20241125 10:54:05.592"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="PASS" starttime="20241125 10:54:05.592" endtime="20241125 10:54:05.592"/>
</return>
<status status="PASS" starttime="20241125 10:54:05.592" endtime="20241125 10:54:05.592"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.593" endtime="20241125 10:54:05.593"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:05.593" endtime="20241125 10:54:05.593"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.592" endtime="20241125 10:54:05.593"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.592" endtime="20241125 10:54:05.593"/>
</if>
<status status="PASS" starttime="20241125 10:54:05.591" endtime="20241125 10:54:05.593"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.591" endtime="20241125 10:54:05.593"/>
</if>
<status status="PASS" starttime="20241125 10:54:05.589" endtime="20241125 10:54:05.593"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.589" endtime="20241125 10:54:05.593"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:05.594" endtime="20241125 10:54:05.594"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.594" endtime="20241125 10:54:05.594"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.594" endtime="20241125 10:54:05.594"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.594" endtime="20241125 10:54:05.594"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.594" endtime="20241125 10:54:05.594"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.594" endtime="20241125 10:54:05.594"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.595" endtime="20241125 10:54:05.595"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:05.595" endtime="20241125 10:54:05.595"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.595" endtime="20241125 10:54:05.595"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.595" endtime="20241125 10:54:05.595"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:05.595" endtime="20241125 10:54:05.595"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:05.595" endtime="20241125 10:54:05.595"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.595" endtime="20241125 10:54:05.596"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.594" endtime="20241125 10:54:05.596"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.594" endtime="20241125 10:54:05.596"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:05.593" endtime="20241125 10:54:05.596"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:05.593" endtime="20241125 10:54:05.596"/>
</if>
<status status="PASS" starttime="20241125 10:54:05.576" endtime="20241125 10:54:05.596"/>
</iter>
<status status="PASS" starttime="20241125 10:54:05.575" endtime="20241125 10:54:05.596"/>
</for>
<msg timestamp="20241125 10:54:05.597" level="INFO">${assertion_message} = Assertion passed: bharani@ideas2it.com == bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:05.574" endtime="20241125 10:54:05.597"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:05.597" endtime="20241125 10:54:05.598"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:05.601" endtime="20241125 10:54:05.602"/>
</kw>
<msg timestamp="20241125 10:54:05.602" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.601" endtime="20241125 10:54:05.602"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.603" level="INFO">${values} = {'id': '6', 'name': 'Email', 'xpath': '//p[text()="EMAIL"]/following-sibling::p', 'pageId': '2', 'createdAt': '2024-11-24T16:50:29.634Z', 'updatedAt': '2024-11-24T16:50:29.634Z'}</msg>
<status status="PASS" starttime="20241125 10:54:05.602" endtime="20241125 10:54:05.603"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.603" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.603" endtime="20241125 10:54:05.603"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.603" endtime="20241125 10:54:05.604"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.604" endtime="20241125 10:54:05.604"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.604" endtime="20241125 10:54:05.604"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.603" endtime="20241125 10:54:05.604"/>
</if>
<status status="PASS" starttime="20241125 10:54:05.602" endtime="20241125 10:54:05.604"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.602" endtime="20241125 10:54:05.604"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:05.604" endtime="20241125 10:54:05.604"/>
</return>
<msg timestamp="20241125 10:54:05.605" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:05.601" endtime="20241125 10:54:05.605"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:05.605" level="INFO">${xpath} = //p[text()="EMAIL"]/following-sibling::p</msg>
<status status="PASS" starttime="20241125 10:54:05.605" endtime="20241125 10:54:05.605"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.605" endtime="20241125 10:54:05.605"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.606" endtime="20241125 10:54:05.606"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.605" endtime="20241125 10:54:05.606"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.605" endtime="20241125 10:54:05.606"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:05.607" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '127', 'status': 'COMPLETED', 'actionName': 'Get profile email', 'actionType': 'GET_TEXT', 'actionXpath': '//p[text()="EMAIL"]/following-sibling::p', 'inputValue': '', ...</msg>
<status status="PASS" starttime="20241125 10:54:05.606" endtime="20241125 10:54:05.607"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:05.608" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "127", "status": "COMPLETED", "actionName": "Get profile email", "actionType": "GET_TEXT", "actionXpath": "//p[text()=\"EMAIL\"]/following-sibling::p", "inputValue": ""...</msg>
<status status="PASS" starttime="20241125 10:54:05.608" endtime="20241125 10:54:05.608"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:05.635" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:05.635" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:05.608" endtime="20241125 10:54:05.635"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:05.636" endtime="20241125 10:54:05.636"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:05.637" endtime="20241125 10:54:05.637"/>
</return>
<status status="PASS" starttime="20241125 10:54:05.607" endtime="20241125 10:54:05.637"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.598" endtime="20241125 10:54:05.638"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.355" endtime="20241125 10:54:05.638"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.638" endtime="20241125 10:54:05.638"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:05.639" endtime="20241125 10:54:05.639"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.639" endtime="20241125 10:54:05.639"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.638" endtime="20241125 10:54:05.639"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.355" endtime="20241125 10:54:05.639"/>
</try>
<status status="PASS" starttime="20241125 10:54:05.355" endtime="20241125 10:54:05.639"/>
</iter>
<status status="PASS" starttime="20241125 10:54:05.355" endtime="20241125 10:54:05.639"/>
</for>
<status status="PASS" starttime="20241125 10:54:05.354" endtime="20241125 10:54:05.639"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.354" endtime="20241125 10:54:05.639"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:05.641" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '63', 'status': 'COMPLETED', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241125 10:54:05.640" endtime="20241125 10:54:05.641"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:05.643" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "63", "status": "COMPLETED", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241125 10:54:05.642" endtime="20241125 10:54:05.643"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:05.661" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:05.661" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:05.643" endtime="20241125 10:54:05.661"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:05.662" endtime="20241125 10:54:05.662"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:05.662" endtime="20241125 10:54:05.662"/>
</return>
<status status="PASS" starttime="20241125 10:54:05.642" endtime="20241125 10:54:05.662"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.639" endtime="20241125 10:54:05.662"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.344" endtime="20241125 10:54:05.662"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.663" endtime="20241125 10:54:05.663"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:05.663" endtime="20241125 10:54:05.663"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.663" endtime="20241125 10:54:05.664"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.662" endtime="20241125 10:54:05.664"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.344" endtime="20241125 10:54:05.664"/>
</try>
<status status="PASS" starttime="20241125 10:54:05.344" endtime="20241125 10:54:05.664"/>
</iter>
<status status="PASS" starttime="20241125 10:53:59.820" endtime="20241125 10:54:05.664"/>
</for>
<status status="PASS" starttime="20241125 10:53:59.818" endtime="20241125 10:54:05.664"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.817" endtime="20241125 10:54:05.664"/>
</if>
<kw name="send-test-case-run-message">
<arg>${testCaseRun}[id]</arg>
<arg>PASS</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseRunId=${testCaseRunId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:05.667" level="INFO">${response_message} = {'testCaseRunId': '23', 'status': 'PASS', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241125 10:54:05.667" endtime="20241125 10:54:05.667"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:05.669" level="INFO">${json_response} = {"testCaseRunId": "23", "status": "PASS", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241125 10:54:05.668" endtime="20241125 10:54:05.669"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:05.692" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:05.692" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:05.669" endtime="20241125 10:54:05.692"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:05.693" endtime="20241125 10:54:05.693"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:05.694" endtime="20241125 10:54:05.694"/>
</return>
<status status="PASS" starttime="20241125 10:54:05.668" endtime="20241125 10:54:05.694"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.665" endtime="20241125 10:54:05.694"/>
</kw>
<status status="PASS" starttime="20241125 10:53:59.797" endtime="20241125 10:54:05.694"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.694" endtime="20241125 10:54:05.695"/>
</kw>
<kw name="send-test-case-run-message">
<arg>${testCaseRun}[id]</arg>
<arg>FAIL</arg>
<arg>errorMessage=${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:05.695" endtime="20241125 10:54:05.695"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.695" endtime="20241125 10:54:05.695"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.694" endtime="20241125 10:54:05.695"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.797" endtime="20241125 10:54:05.695"/>
</try>
<status status="PASS" starttime="20241125 10:53:59.758" endtime="20241125 10:54:05.695"/>
</branch>
<branch type="ELSE">
<kw name="Log To Console" library="BuiltIn">
<arg>Command type not developed</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.696" endtime="20241125 10:54:05.696"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.695" endtime="20241125 10:54:05.696"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.758" endtime="20241125 10:54:05.696"/>
</if>
<status status="PASS" starttime="20241125 10:53:59.731" endtime="20241125 10:54:05.696"/>
</kw>
<status status="PASS" starttime="20241125 10:53:59.731" endtime="20241125 10:54:05.696"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:05.696" endtime="20241125 10:54:05.697"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:05.696" endtime="20241125 10:54:05.697"/>
</branch>
<status status="PASS" starttime="20241125 10:53:59.731" endtime="20241125 10:54:05.697"/>
</try>
<kw name="close-browser" library="COMP_BrowserContext">
<try>
<branch type="TRY">
<kw name="Close Browser" library="RPA.Browser.Playwright">
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Closes the current browser.</doc>
<msg timestamp="20241125 10:54:06.002" level="INFO">Closed browser</msg>
<status status="PASS" starttime="20241125 10:54:05.699" endtime="20241125 10:54:06.002"/>
</kw>
<status status="PASS" starttime="20241125 10:54:05.698" endtime="20241125 10:54:06.002"/>
</branch>
<branch type="EXCEPT" variable="${err}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while closing browser: ${err}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:06.002" endtime="20241125 10:54:06.002"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:06.002" endtime="20241125 10:54:06.002"/>
</branch>
<status status="PASS" starttime="20241125 10:54:05.698" endtime="20241125 10:54:06.003"/>
</try>
<status status="PASS" starttime="20241125 10:54:05.697" endtime="20241125 10:54:06.003"/>
</kw>
<status status="PASS" starttime="20241125 10:52:49.691" endtime="20241125 10:54:06.003"/>
</iter>
<iter>
<kw name="launch-browser" library="COMP_BrowserContext">
<kw name="New Browser" library="RPA.Browser.Playwright">
<arg>chromium</arg>
<arg>headless=False</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new playwright Browser with specified options.</doc>
<msg timestamp="20241125 10:54:06.004" level="INFO">{"browser": "chromium", "headless": false, "devtools": false, "handleSIGHUP": true, "handleSIGINT": true, "handleSIGTERM": true, "slowMo": 0.0, "timeout": 30000.0, "deprecated_pos_args": [], "tracesDir": "C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\8f6acd23-0deb-45b5-ae45-d4e056fbe14d"}</msg>
<msg timestamp="20241125 10:54:06.872" level="INFO">Successfully created browser with options: {"browser":"chromium","headless":false,"devtools":false,"handleSIGHUP":true,"handleSIGINT":true,"handleSIGTERM":true,"slowMo":0,"timeout":30000,"deprecated_pos_args":[],"tracesDir":"C:\\Users\\Admin\\Documents\\Hackathon\\Test Automation Studio\\Test-automation-studio-projects\\test-automation-rf\\code\\browser\\traces\\8f6acd23-0deb-45b5-ae45-d4e056fbe14d"}</msg>
<status status="PASS" starttime="20241125 10:54:06.004" endtime="20241125 10:54:06.872"/>
</kw>
<kw name="New Context" library="RPA.Browser.Playwright">
<arg>viewport={'width': 1280, 'height': 720}</arg>
<arg>acceptDownloads=True</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Create a new BrowserContext with specified options.</doc>
<msg timestamp="20241125 10:54:06.874" level="INFO">{
  "acceptDownloads": true,
  "bypassCSP": false,
  "forcedColors": "none",
  "hideRfBrowser": false,
  "ignoreHTTPSErrors": false,
  "javaScriptEnabled": true,
  "offline": false,
  "reducedMotion": "no-preference",
  "viewport": {
    "width": 1280,
    "height": 720
  },
  "deprecated_pos_args": []
}</msg>
<msg timestamp="20241125 10:54:06.910" level="INFO">Successfully created context. </msg>
<msg timestamp="20241125 10:54:06.911" level="INFO">{'acceptDownloads': True, 'bypassCSP': False, 'forcedColors': 'none', 'hideRfBrowser': False, 'ignoreHTTPSErrors': False, 'javaScriptEnabled': True, 'offline': False, 'reducedMotion': 'no-preference', 'viewport': {'width': 1280, 'height': 720}, 'deprecated_pos_args': []}</msg>
<status status="PASS" starttime="20241125 10:54:06.873" endtime="20241125 10:54:06.911"/>
</kw>
<kw name="Set Browser Timeout" library="RPA.Browser.Playwright">
<arg>${browser_timeout}</arg>
<tag>Config</tag>
<tag>Setter</tag>
<doc>Sets the timeout used by most input and getter keywords.</doc>
<status status="PASS" starttime="20241125 10:54:06.912" endtime="20241125 10:54:06.913"/>
</kw>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>https://www.google.com/</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241125 10:54:09.009" level="INFO">Successfully initialized new page object and opened url: https://www.google.com/</msg>
<msg timestamp="20241125 10:54:09.009" level="INFO">${page_id} = {'page_id': 'page=e8bd8498-bce4-47a8-87af-2bd309c36eed', 'video_path': ''}</msg>
<status status="PASS" starttime="20241125 10:54:06.915" endtime="20241125 10:54:09.009"/>
</kw>
<status status="PASS" starttime="20241125 10:54:06.003" endtime="20241125 10:54:09.010"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Polling message===&gt;</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:09.010" endtime="20241125 10:54:09.011"/>
</kw>
<kw name="Get A Command" library="CommandConsumer">
<var>${json}</var>
<arg>${5}</arg>
<msg timestamp="20241125 10:54:39.846" level="INFO">${json} = {'type': 'START_RUN', 'payload': {'testCaseRun': {'id': '24', 'testCaseId': '2', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-25T05:24:39.770Z', 'createdAt': '2024-11-25T05:24:39.770Z', 'errorMes...</msg>
<status status="PASS" starttime="20241125 10:54:09.012" endtime="20241125 10:54:39.846"/>
</kw>
<if>
<branch type="IF" condition="'${json}[type]' == 'KILL'">
<break>
<status status="NOT RUN" starttime="20241125 10:54:39.847" endtime="20241125 10:54:39.847"/>
</break>
<status status="NOT RUN" starttime="20241125 10:54:39.847" endtime="20241125 10:54:39.847"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.846" endtime="20241125 10:54:39.847"/>
</if>
<try>
<branch type="TRY">
<kw name="execute-test-case">
<arg>${json}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Data=&gt; ${input}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:39.849" endtime="20241125 10:54:39.855"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_type_exists}</var>
<arg>${input}</arg>
<arg>type</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:39.859" endtime="20241125 10:54:39.860"/>
</kw>
<msg timestamp="20241125 10:54:39.860" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.859" endtime="20241125 10:54:39.860"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.861" level="INFO">${values} = START_RUN</msg>
<status status="PASS" starttime="20241125 10:54:39.860" endtime="20241125 10:54:39.861"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.862" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.862" endtime="20241125 10:54:39.862"/>
</kw>
<status status="PASS" starttime="20241125 10:54:39.861" endtime="20241125 10:54:39.862"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:39.863" endtime="20241125 10:54:39.863"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:39.862" endtime="20241125 10:54:39.863"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.861" endtime="20241125 10:54:39.863"/>
</if>
<status status="PASS" starttime="20241125 10:54:39.860" endtime="20241125 10:54:39.863"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.860" endtime="20241125 10:54:39.863"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:39.863" endtime="20241125 10:54:39.863"/>
</return>
<msg timestamp="20241125 10:54:39.864" level="INFO">${is_type_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.858" endtime="20241125 10:54:39.864"/>
</kw>
<if>
<branch type="IF" condition="$is_type_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Type not exists in the input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:39.864" endtime="20241125 10:54:39.865"/>
</kw>
<return>
<status status="NOT RUN" starttime="20241125 10:54:39.865" endtime="20241125 10:54:39.865"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:39.864" endtime="20241125 10:54:39.865"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.864" endtime="20241125 10:54:39.866"/>
</if>
<if>
<branch type="IF" condition="'${input}[type]' == '${COMMAND_TYPE_START_RUN}'">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCase</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:39.873" endtime="20241125 10:54:39.873"/>
</kw>
<msg timestamp="20241125 10:54:39.873" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.872" endtime="20241125 10:54:39.873"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.876" level="INFO">${values} = {'id': '2', 'name': 'Check profile information', 'projectId': '1', 'createdAt': '2024-11-25T05:22:01.491Z', 'updatedAt': '2024-11-25T05:24:37.946Z', 'testCaseFlowSequences': [{'id': '4', 'testCaseId':...</msg>
<status status="PASS" starttime="20241125 10:54:39.875" endtime="20241125 10:54:39.876"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.879" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.879" endtime="20241125 10:54:39.879"/>
</kw>
<status status="PASS" starttime="20241125 10:54:39.878" endtime="20241125 10:54:39.879"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:39.880" endtime="20241125 10:54:39.880"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:39.879" endtime="20241125 10:54:39.880"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.877" endtime="20241125 10:54:39.880"/>
</if>
<status status="PASS" starttime="20241125 10:54:39.874" endtime="20241125 10:54:39.880"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.874" endtime="20241125 10:54:39.880"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:39.880" endtime="20241125 10:54:39.880"/>
</return>
<msg timestamp="20241125 10:54:39.881" level="INFO">${is_test_case_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.872" endtime="20241125 10:54:39.881"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_run_exists}</var>
<arg>${input}[payload]</arg>
<arg>testCaseRun</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:39.887" endtime="20241125 10:54:39.887"/>
</kw>
<msg timestamp="20241125 10:54:39.888" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.886" endtime="20241125 10:54:39.888"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.889" level="INFO">${values} = {'id': '24', 'testCaseId': '2', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-25T05:24:39.770Z', 'createdAt': '2024-11-25T05:24:39.770Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241125 10:54:39.889" endtime="20241125 10:54:39.890"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.892" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.891" endtime="20241125 10:54:39.892"/>
</kw>
<status status="PASS" starttime="20241125 10:54:39.890" endtime="20241125 10:54:39.892"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:39.892" endtime="20241125 10:54:39.892"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:39.892" endtime="20241125 10:54:39.892"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.890" endtime="20241125 10:54:39.892"/>
</if>
<status status="PASS" starttime="20241125 10:54:39.888" endtime="20241125 10:54:39.893"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.888" endtime="20241125 10:54:39.893"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:39.893" endtime="20241125 10:54:39.893"/>
</return>
<msg timestamp="20241125 10:54:39.893" level="INFO">${is_test_case_run_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.885" endtime="20241125 10:54:39.893"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_exists == $False or $is_test_case_run_exists == $False">
<kw name="Log To Console" library="BuiltIn">
<arg>Testcase or TestCaseRun data not available in input</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:39.894" endtime="20241125 10:54:39.894"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:39.893" endtime="20241125 10:54:39.894"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.893" endtime="20241125 10:54:39.894"/>
</if>
<kw name="Set Variable" library="BuiltIn">
<var>${testCase}</var>
<arg>${input}[payload][testCase]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.894" level="INFO">${testCase} = {'id': '2', 'name': 'Check profile information', 'projectId': '1', 'createdAt': '2024-11-25T05:22:01.491Z', 'updatedAt': '2024-11-25T05:24:37.946Z', 'testCaseFlowSequences': [{'id': '4', 'testCaseId':...</msg>
<status status="PASS" starttime="20241125 10:54:39.894" endtime="20241125 10:54:39.895"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${testCaseRun}</var>
<arg>${input}[payload][testCaseRun]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.895" level="INFO">${testCaseRun} = {'id': '24', 'testCaseId': '2', 'status': 'ADDED_TO_QUEUE', 'updatedAt': '2024-11-25T05:24:39.770Z', 'createdAt': '2024-11-25T05:24:39.770Z', 'errorMessage': None}</msg>
<status status="PASS" starttime="20241125 10:54:39.895" endtime="20241125 10:54:39.895"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${assertions}</var>
<arg>${testCase}[assertions]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.896" level="INFO">${assertions} = [{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTar...</msg>
<status status="PASS" starttime="20241125 10:54:39.895" endtime="20241125 10:54:39.896"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Test Case Name: ${testCase}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:39.896" endtime="20241125 10:54:39.896"/>
</kw>
<try>
<branch type="TRY">
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_test_case_flow_sequences_exists}</var>
<arg>${testCase}</arg>
<arg>testCaseFlowSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:39.900" endtime="20241125 10:54:39.902"/>
</kw>
<msg timestamp="20241125 10:54:39.902" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.900" endtime="20241125 10:54:39.902"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.902" level="INFO">${values} = [{'id': '4', 'testCaseId': '2', 'flowId': '1', 'order': 0, 'createdAt': '2024-11-25T05:22:01.703Z', 'updatedAt': '2024-11-25T05:24:38.005Z', 'flow': {'id': '1', 'name': 'Login', 'projectId': '1', 'cre...</msg>
<status status="PASS" starttime="20241125 10:54:39.902" endtime="20241125 10:54:39.903"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.903" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.903" endtime="20241125 10:54:39.903"/>
</kw>
<status status="PASS" starttime="20241125 10:54:39.903" endtime="20241125 10:54:39.903"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:39.904" endtime="20241125 10:54:39.904"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:39.903" endtime="20241125 10:54:39.904"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.903" endtime="20241125 10:54:39.904"/>
</if>
<status status="PASS" starttime="20241125 10:54:39.902" endtime="20241125 10:54:39.904"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.902" endtime="20241125 10:54:39.904"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:39.904" endtime="20241125 10:54:39.904"/>
</return>
<msg timestamp="20241125 10:54:39.904" level="INFO">${is_test_case_flow_sequences_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.900" endtime="20241125 10:54:39.904"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${test_case_run_response_message}</var>
<arg>testCaseRunId=${testCaseRun}[id]</arg>
<arg>status=STARTED</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:39.905" level="INFO">${test_case_run_response_message} = {'testCaseRunId': '24', 'status': 'STARTED'}</msg>
<status status="PASS" starttime="20241125 10:54:39.905" endtime="20241125 10:54:39.905"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${test_case_run_response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:39.906" level="INFO">${json_response} = {"testCaseRunId": "24", "status": "STARTED"}</msg>
<status status="PASS" starttime="20241125 10:54:39.906" endtime="20241125 10:54:39.906"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:39.912" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:39.913" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:39.906" endtime="20241125 10:54:39.913"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:39.913" endtime="20241125 10:54:39.916"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:39.917" endtime="20241125 10:54:39.917"/>
</return>
<status status="PASS" starttime="20241125 10:54:39.905" endtime="20241125 10:54:39.918"/>
</kw>
<if>
<branch type="IF" condition="$is_test_case_flow_sequences_exists">
<kw name="Create Dictionary" library="BuiltIn">
<var>${ACCUMULATION}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:39.919" level="INFO">${ACCUMULATION} = {}</msg>
<status status="PASS" starttime="20241125 10:54:39.919" endtime="20241125 10:54:39.919"/>
</kw>
<for flavor="IN">
<var>${testCaseFlowSequence}</var>
<value>@{testCase}[testCaseFlowSequences]</value>
<iter>
<var name="${testCaseFlowSequence}">{'id': '4', 'testCaseId': '2', 'flowId': '1', 'order': 0, 'createdAt': '2024-11-25T05:22:01.703Z', 'updatedAt': '2024-11-25T05:24:38.005Z', 'flow': {'id': '1', 'name': 'Login', 'projectId': '1', 'crea...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.921" level="INFO">${flow} = {'id': '1', 'name': 'Login', 'projectId': '1', 'createdAt': '2024-11-24T16:52:08.694Z', 'updatedAt': '2024-11-24T17:34:15.823Z', 'flowActionSequences': [{'id': '8', 'actionId': '9', 'flowId': '1', 'or...</msg>
<status status="PASS" starttime="20241125 10:54:39.920" endtime="20241125 10:54:39.921"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:39.922" endtime="20241125 10:54:39.923"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:39.929" endtime="20241125 10:54:39.930"/>
</kw>
<msg timestamp="20241125 10:54:39.930" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.929" endtime="20241125 10:54:39.930"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.931" level="INFO">${values} = [{'id': '8', 'actionId': '9', 'flowId': '1', 'order': 0, 'createdAt': '2024-11-24T17:32:34.803Z', 'updatedAt': '2024-11-24T17:34:15.591Z', 'action': {'id': '9', 'name': 'Launch browser', 'type': 'LAUN...</msg>
<status status="PASS" starttime="20241125 10:54:39.930" endtime="20241125 10:54:39.931"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.933" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.932" endtime="20241125 10:54:39.933"/>
</kw>
<status status="PASS" starttime="20241125 10:54:39.932" endtime="20241125 10:54:39.933"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:39.935" endtime="20241125 10:54:39.935"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:39.934" endtime="20241125 10:54:39.935"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.931" endtime="20241125 10:54:39.935"/>
</if>
<status status="PASS" starttime="20241125 10:54:39.930" endtime="20241125 10:54:39.935"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.930" endtime="20241125 10:54:39.936"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:39.936" endtime="20241125 10:54:39.936"/>
</return>
<msg timestamp="20241125 10:54:39.937" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:39.928" endtime="20241125 10:54:39.937"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '8', 'actionId': '9', 'flowId': '1', 'order': 0, 'createdAt': '2024-11-24T17:32:34.803Z', 'updatedAt': '2024-11-24T17:34:15.591Z', 'action': {'id': '9', 'name': 'Launch browser', 'type': 'LAUNC...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.939" level="INFO">${action} = {'id': '9', 'name': 'Launch browser', 'type': 'LAUNCH_BROWSER', 'selectorI': None, 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T17:32:06.229Z', 'updatedAt': '2024-11-24T17:32:06.229Z', ...</msg>
<status status="PASS" starttime="20241125 10:54:39.939" endtime="20241125 10:54:39.939"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:39.940" endtime="20241125 10:54:39.940"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:39.941" level="INFO">${input} = {'id': '9', 'actionId': '9', 'name': 'Input 01', 'value': 'https://iassistant.ideas2it.com/login', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T17:32:06.579Z', 'updatedAt': '202...</msg>
<status status="PASS" starttime="20241125 10:54:39.941" endtime="20241125 10:54:39.941"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:39.942" endtime="20241125 10:54:39.942"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:39.942" endtime="20241125 10:54:39.942"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:39.941" endtime="20241125 10:54:39.942"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.941" endtime="20241125 10:54:39.942"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:39.944" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241125 10:54:39.943" endtime="20241125 10:54:39.944"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<kw name="New Page" library="RPA.Browser.Playwright">
<var>${page_id}</var>
<arg>${url}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Open a new Page.</doc>
<msg timestamp="20241125 10:54:42.896" level="INFO">Successfully initialized new page object and opened url: https://iassistant.ideas2it.com/login</msg>
<msg timestamp="20241125 10:54:42.896" level="INFO">${page_id} = {'page_id': 'page=c42cb3bb-5f8d-44d1-907d-dbac9bab9cb3', 'video_path': ''}</msg>
<status status="PASS" starttime="20241125 10:54:39.945" endtime="20241125 10:54:42.896"/>
</kw>
<kw name="Switch Page" library="RPA.Browser.Playwright">
<arg>${page_id}</arg>
<tag>BrowserControl</tag>
<tag>Setter</tag>
<doc>Switches the active browser page to another open page by ``id`` or ``NEW``.</doc>
<msg timestamp="20241125 10:54:42.897" level="INFO">Switching to page {'page_id': 'page=c42cb3bb-5f8d-44d1-907d-dbac9bab9cb3', 'video_path': ''},context CURRENT, browser CURRENT</msg>
<msg timestamp="20241125 10:54:42.919" level="INFO">[
  {
    "type": "chromium",
    "id": "browser=ae36d60e-4172-47e4-9042-4d529d89f9c6",
    "contexts": [
      {
        "type": "context",
        "id": "context=dd69d4bf-1842-4d59-8f9c-6e65a6dff614",
        "activePage": "page=c42cb3bb-5f8d-44d1-907d-dbac9bab9cb3",
        "pages": [
          {
            "type": "page",
            "title": "Google",
            "url": "https://www.google.com/",
            "id": "page=e8bd8498-bce4-47a8-87af-2bd309c36eed",
            "timestamp": 1732512247.357
          },
          {
            "type": "page",
            "title": "iAssistant",
            "url": "https://iassistant.ideas2it.com/login",
            "id": "page=c42cb3bb-5f8d-44d1-907d-dbac9bab9cb3",
            "timestamp": 1732512279.995
          }
        ]
      }
    ],
    "activeContext": "context=dd69d4bf-1842-4d59-8f9c-6e65a6dff614",
    "activeBrowser": true
  }
]</msg>
<msg timestamp="20241125 10:54:42.923" level="INFO">Successfully changed active page</msg>
<status status="PASS" starttime="20241125 10:54:42.897" endtime="20241125 10:54:42.923"/>
</kw>
<status status="PASS" starttime="20241125 10:54:39.944" endtime="20241125 10:54:42.923"/>
</kw>
<status status="PASS" starttime="20241125 10:54:39.944" endtime="20241125 10:54:42.923"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:42.924" endtime="20241125 10:54:42.924"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.923" endtime="20241125 10:54:42.924"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.926" endtime="20241125 10:54:42.926"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.924" endtime="20241125 10:54:42.926"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.929" endtime="20241125 10:54:42.929"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.932" endtime="20241125 10:54:42.933"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.926" endtime="20241125 10:54:42.933"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.934" endtime="20241125 10:54:42.934"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.933" endtime="20241125 10:54:42.934"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.937" endtime="20241125 10:54:42.938"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.934" endtime="20241125 10:54:42.938"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.940" endtime="20241125 10:54:42.940"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.938" endtime="20241125 10:54:42.940"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.941" endtime="20241125 10:54:42.941"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.940" endtime="20241125 10:54:42.941"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.942" endtime="20241125 10:54:42.942"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.943" endtime="20241125 10:54:42.943"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.943" endtime="20241125 10:54:42.943"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.943" endtime="20241125 10:54:42.943"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.943" endtime="20241125 10:54:42.943"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:42.942" endtime="20241125 10:54:42.943"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:42.941" endtime="20241125 10:54:42.943"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:42.952" endtime="20241125 10:54:42.952"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.956" endtime="20241125 10:54:42.956"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.943" endtime="20241125 10:54:42.956"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.958" endtime="20241125 10:54:42.958"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.958" endtime="20241125 10:54:42.958"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.958" endtime="20241125 10:54:42.958"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.959" endtime="20241125 10:54:42.959"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.959" endtime="20241125 10:54:42.959"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:42.958" endtime="20241125 10:54:42.959"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:42.956" endtime="20241125 10:54:42.959"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:42.966" endtime="20241125 10:54:42.966"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.968" endtime="20241125 10:54:42.968"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.959" endtime="20241125 10:54:42.968"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.969" endtime="20241125 10:54:42.969"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.970" endtime="20241125 10:54:42.970"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.970" endtime="20241125 10:54:42.970"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.970" endtime="20241125 10:54:42.970"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.970" endtime="20241125 10:54:42.970"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:42.970" endtime="20241125 10:54:42.970"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:42.968" endtime="20241125 10:54:42.970"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.972" endtime="20241125 10:54:42.972"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.970" endtime="20241125 10:54:42.972"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:42.977" endtime="20241125 10:54:42.977"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.977" endtime="20241125 10:54:42.977"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.972" endtime="20241125 10:54:42.977"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.944" endtime="20241125 10:54:42.977"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:42.977" endtime="20241125 10:54:42.978"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:42.979" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:42.978" endtime="20241125 10:54:42.979"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:42.979" endtime="20241125 10:54:42.979"/>
</return>
<msg timestamp="20241125 10:54:42.980" level="INFO">${value} = https://iassistant.ideas2it.com/login</msg>
<status status="PASS" starttime="20241125 10:54:39.942" endtime="20241125 10:54:42.980"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:42.982" level="INFO">${key} = testCaseFlowSequenceId:4::flowActionSequenceId:8</msg>
<status status="PASS" starttime="20241125 10:54:42.981" endtime="20241125 10:54:42.982"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:42.983" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:42.982" endtime="20241125 10:54:42.983"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:42.983" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:42.983" endtime="20241125 10:54:42.983"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:42.984" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:42.984" endtime="20241125 10:54:42.984"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:42.985" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:42.984" endtime="20241125 10:54:42.985"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:42.985" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241125 10:54:42.985" endtime="20241125 10:54:42.985"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:42.986" level="INFO">${customTargetValue} = bharani@ideas2it.ai</msg>
<status status="PASS" starttime="20241125 10:54:42.986" endtime="20241125 10:54:42.986"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:42.987" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:42.986" endtime="20241125 10:54:42.987"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:42.987" endtime="20241125 10:54:42.987"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:42.992" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:6::flowActionSequenceId:7'.</msg>
<status status="FAIL" starttime="20241125 10:54:42.991" endtime="20241125 10:54:42.992"/>
</kw>
<msg timestamp="20241125 10:54:42.992" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:42.990" endtime="20241125 10:54:42.992"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.993" endtime="20241125 10:54:42.993"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.993" endtime="20241125 10:54:42.994"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.993" endtime="20241125 10:54:42.994"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:42.994" endtime="20241125 10:54:42.994"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:42.994" endtime="20241125 10:54:42.994"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:42.993" endtime="20241125 10:54:42.994"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:42.993" endtime="20241125 10:54:42.994"/>
</branch>
<status status="PASS" starttime="20241125 10:54:42.992" endtime="20241125 10:54:42.995"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:42.995" endtime="20241125 10:54:42.995"/>
</return>
<msg timestamp="20241125 10:54:42.995" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:42.989" endtime="20241125 10:54:42.995"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:42.999" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:4::flowActionSequenceId:2'.</msg>
<status status="FAIL" starttime="20241125 10:54:42.998" endtime="20241125 10:54:42.999"/>
</kw>
<msg timestamp="20241125 10:54:42.999" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:42.998" endtime="20241125 10:54:42.999"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.000" endtime="20241125 10:54:43.000"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.000" endtime="20241125 10:54:43.000"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.000" endtime="20241125 10:54:43.000"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.001" endtime="20241125 10:54:43.001"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.000" endtime="20241125 10:54:43.001"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.000" endtime="20241125 10:54:43.001"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:42.999" endtime="20241125 10:54:43.001"/>
</branch>
<status status="PASS" starttime="20241125 10:54:42.999" endtime="20241125 10:54:43.001"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:43.001" endtime="20241125 10:54:43.001"/>
</return>
<msg timestamp="20241125 10:54:43.001" level="INFO">${is_target_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:42.997" endtime="20241125 10:54:43.001"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:43.002" endtime="20241125 10:54:43.002"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.002" endtime="20241125 10:54:43.002"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.002" endtime="20241125 10:54:43.003"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.003" endtime="20241125 10:54:43.003"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.003" endtime="20241125 10:54:43.003"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.003" endtime="20241125 10:54:43.003"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.004" endtime="20241125 10:54:43.004"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.004" endtime="20241125 10:54:43.004"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.003" endtime="20241125 10:54:43.004"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.003" endtime="20241125 10:54:43.004"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.003" endtime="20241125 10:54:43.004"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.003" endtime="20241125 10:54:43.004"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.004" endtime="20241125 10:54:43.005"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.005" endtime="20241125 10:54:43.005"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.004" endtime="20241125 10:54:43.005"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.005" endtime="20241125 10:54:43.005"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.005" endtime="20241125 10:54:43.005"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.005" endtime="20241125 10:54:43.005"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.004" endtime="20241125 10:54:43.005"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.004" endtime="20241125 10:54:43.005"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.004" endtime="20241125 10:54:43.006"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.002" endtime="20241125 10:54:43.006"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.002" endtime="20241125 10:54:43.006"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:43.006" endtime="20241125 10:54:43.006"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.006" endtime="20241125 10:54:43.006"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.006" endtime="20241125 10:54:43.006"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.007" endtime="20241125 10:54:43.007"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.007" endtime="20241125 10:54:43.007"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.006" endtime="20241125 10:54:43.007"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.007" endtime="20241125 10:54:43.007"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.007" endtime="20241125 10:54:43.007"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.007" endtime="20241125 10:54:43.007"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.008" endtime="20241125 10:54:43.008"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.008" endtime="20241125 10:54:43.008"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.008" endtime="20241125 10:54:43.008"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.007" endtime="20241125 10:54:43.008"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.007" endtime="20241125 10:54:43.008"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.007" endtime="20241125 10:54:43.008"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.006" endtime="20241125 10:54:43.008"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.006" endtime="20241125 10:54:43.008"/>
</if>
<status status="PASS" starttime="20241125 10:54:42.982" endtime="20241125 10:54:43.008"/>
</iter>
<status status="PASS" starttime="20241125 10:54:42.982" endtime="20241125 10:54:43.008"/>
</for>
<msg timestamp="20241125 10:54:43.009" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:54:42.980" endtime="20241125 10:54:43.009"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.009" endtime="20241125 10:54:43.009"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:43.017" level="FAIL">Dictionary does not contain key 'selector'.</msg>
<status status="FAIL" starttime="20241125 10:54:43.016" endtime="20241125 10:54:43.017"/>
</kw>
<msg timestamp="20241125 10:54:43.018" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:43.015" endtime="20241125 10:54:43.018"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.019" endtime="20241125 10:54:43.019"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.020" endtime="20241125 10:54:43.020"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.019" endtime="20241125 10:54:43.020"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.020" endtime="20241125 10:54:43.020"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.020" endtime="20241125 10:54:43.020"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.019" endtime="20241125 10:54:43.020"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.019" endtime="20241125 10:54:43.020"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.018" endtime="20241125 10:54:43.020"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:43.020" endtime="20241125 10:54:43.020"/>
</return>
<msg timestamp="20241125 10:54:43.021" level="INFO">${is_selector_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:43.015" endtime="20241125 10:54:43.021"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.021" endtime="20241125 10:54:43.021"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.021" endtime="20241125 10:54:43.021"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.022" level="INFO">${xpath} = </msg>
<status status="PASS" starttime="20241125 10:54:43.022" endtime="20241125 10:54:43.022"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.021" endtime="20241125 10:54:43.022"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.021" endtime="20241125 10:54:43.022"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:43.024" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '131', 'status': 'COMPLETED', 'actionName': 'Launch browser', 'actionType': 'LAUNCH_BROWSER', 'actionXpath': '', 'inputValue': 'https://iassistant.ideas2it.com/login', ...</msg>
<status status="PASS" starttime="20241125 10:54:43.023" endtime="20241125 10:54:43.024"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:43.025" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "131", "status": "COMPLETED", "actionName": "Launch browser", "actionType": "LAUNCH_BROWSER", "actionXpath": "", "inputValue": "https://iassistant.ideas2it.com/login", ...</msg>
<status status="PASS" starttime="20241125 10:54:43.024" endtime="20241125 10:54:43.025"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:43.032" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:43.033" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:43.025" endtime="20241125 10:54:43.033"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.033" endtime="20241125 10:54:43.034"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:43.034" endtime="20241125 10:54:43.035"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.024" endtime="20241125 10:54:43.035"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.010" endtime="20241125 10:54:43.035"/>
</kw>
<status status="PASS" starttime="20241125 10:54:39.938" endtime="20241125 10:54:43.035"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.036" endtime="20241125 10:54:43.036"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.036" endtime="20241125 10:54:43.036"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.036" endtime="20241125 10:54:43.036"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.035" endtime="20241125 10:54:43.036"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.938" endtime="20241125 10:54:43.036"/>
</try>
<status status="PASS" starttime="20241125 10:54:39.938" endtime="20241125 10:54:43.036"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '2', 'actionId': '2', 'flowId': '1', 'order': 1, 'createdAt': '2024-11-24T16:52:08.810Z', 'updatedAt': '2024-11-24T17:34:15.602Z', 'action': {'id': '2', 'name': 'Set username', 'type': 'TYPE_TE...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.037" level="INFO">${action} = {'id': '2', 'name': 'Set username', 'type': 'TYPE_TEXT', 'selectorI': '1', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:43:45.668Z', 'updatedAt': '2024-11-24T16:43:45.668Z', 'selecto...</msg>
<status status="PASS" starttime="20241125 10:54:43.037" endtime="20241125 10:54:43.037"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.038" endtime="20241125 10:54:43.038"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:43.039" level="INFO">${input} = {'id': '2', 'actionId': '2', 'name': 'Bharani', 'value': 'bharani@ideas2it.com', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:43:45.923Z', 'updatedAt': '2024-11-24T16:44:01.1...</msg>
<status status="PASS" starttime="20241125 10:54:43.038" endtime="20241125 10:54:43.039"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.040" endtime="20241125 10:54:43.040"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.040" endtime="20241125 10:54:43.040"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.039" endtime="20241125 10:54:43.040"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.039" endtime="20241125 10:54:43.040"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.041" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:43.041" endtime="20241125 10:54:43.041"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.042" endtime="20241125 10:54:43.042"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.042" endtime="20241125 10:54:43.042"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.043" endtime="20241125 10:54:43.043"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.042" endtime="20241125 10:54:43.043"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.045" endtime="20241125 10:54:43.046"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.043" endtime="20241125 10:54:43.046"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.050" endtime="20241125 10:54:43.050"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.053" endtime="20241125 10:54:43.053"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.046" endtime="20241125 10:54:43.053"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.055" endtime="20241125 10:54:43.055"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.053" endtime="20241125 10:54:43.055"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.059" endtime="20241125 10:54:43.059"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.055" endtime="20241125 10:54:43.059"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>selector::${selector}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.062" endtime="20241125 10:54:43.062"/>
</kw>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="username"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.095" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:43.069" endtime="20241125 10:54:43.095"/>
</kw>
<msg timestamp="20241125 10:54:43.095" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.069" endtime="20241125 10:54:43.095"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.096" endtime="20241125 10:54:43.096"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.069" endtime="20241125 10:54:43.096"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.096" endtime="20241125 10:54:43.097"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.097" endtime="20241125 10:54:43.097"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.096" endtime="20241125 10:54:43.097"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.069" endtime="20241125 10:54:43.098"/>
</try>
<msg timestamp="20241125 10:54:43.098" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.068" endtime="20241125 10:54:43.099"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.099" endtime="20241125 10:54:43.099"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.067" endtime="20241125 10:54:43.099"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.099" endtime="20241125 10:54:43.099"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.099" endtime="20241125 10:54:43.100"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.067" endtime="20241125 10:54:43.100"/>
</try>
<msg timestamp="20241125 10:54:43.100" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.067" endtime="20241125 10:54:43.100"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.104" endtime="20241125 10:54:43.104"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.104" endtime="20241125 10:54:43.104"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.104" endtime="20241125 10:54:43.105"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.104" endtime="20241125 10:54:43.105"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.102" endtime="20241125 10:54:43.105"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.066" endtime="20241125 10:54:43.105"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.125" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:43.118" endtime="20241125 10:54:43.125"/>
</kw>
<msg timestamp="20241125 10:54:43.125" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.118" endtime="20241125 10:54:43.125"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.125" endtime="20241125 10:54:43.125"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.118" endtime="20241125 10:54:43.126"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.126" endtime="20241125 10:54:43.126"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.126" endtime="20241125 10:54:43.126"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.126" endtime="20241125 10:54:43.126"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.118" endtime="20241125 10:54:43.126"/>
</try>
<msg timestamp="20241125 10:54:43.127" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.117" endtime="20241125 10:54:43.127"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.127" endtime="20241125 10:54:43.127"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.114" endtime="20241125 10:54:43.127"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.127" endtime="20241125 10:54:43.127"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.127" endtime="20241125 10:54:43.127"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.114" endtime="20241125 10:54:43.127"/>
</try>
<msg timestamp="20241125 10:54:43.128" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.113" endtime="20241125 10:54:43.128"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.133" endtime="20241125 10:54:43.133"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.134" endtime="20241125 10:54:43.134"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.133" endtime="20241125 10:54:43.134"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.132" endtime="20241125 10:54:43.134"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.130" endtime="20241125 10:54:43.134"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.112" endtime="20241125 10:54:43.135"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:43.157" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241125 10:54:43.157" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:43.135" endtime="20241125 10:54:43.157"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:43.157" endtime="20241125 10:54:43.157"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.135" endtime="20241125 10:54:43.157"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.158" endtime="20241125 10:54:43.158"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.158" endtime="20241125 10:54:43.158"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.157" endtime="20241125 10:54:43.158"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.135" endtime="20241125 10:54:43.158"/>
</try>
<msg timestamp="20241125 10:54:43.159" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:43.110" endtime="20241125 10:54:43.159"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.161" endtime="20241125 10:54:43.161"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.162" endtime="20241125 10:54:43.162"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.161" endtime="20241125 10:54:43.162"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.161" endtime="20241125 10:54:43.162"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.160" endtime="20241125 10:54:43.163"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.108" endtime="20241125 10:54:43.163"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.164" endtime="20241125 10:54:43.164"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.163" endtime="20241125 10:54:43.164"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.108" endtime="20241125 10:54:43.164"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.107" endtime="20241125 10:54:43.164"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.176" level="INFO">Waited for Element with selector //input[@id="username"] at state visible</msg>
<status status="PASS" starttime="20241125 10:54:43.170" endtime="20241125 10:54:43.176"/>
</kw>
<msg timestamp="20241125 10:54:43.176" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.169" endtime="20241125 10:54:43.176"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.176" endtime="20241125 10:54:43.176"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.169" endtime="20241125 10:54:43.176"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.177" endtime="20241125 10:54:43.177"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.177" endtime="20241125 10:54:43.177"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.177" endtime="20241125 10:54:43.177"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.169" endtime="20241125 10:54:43.177"/>
</try>
<msg timestamp="20241125 10:54:43.178" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.168" endtime="20241125 10:54:43.178"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.178" endtime="20241125 10:54:43.178"/>
</return>
<msg timestamp="20241125 10:54:43.178" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.167" endtime="20241125 10:54:43.178"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.181" endtime="20241125 10:54:43.181"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.181" endtime="20241125 10:54:43.181"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.181" endtime="20241125 10:54:43.182"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.181" endtime="20241125 10:54:43.182"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.179" endtime="20241125 10:54:43.182"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.167" endtime="20241125 10:54:43.182"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.063" endtime="20241125 10:54:43.182"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.199" level="INFO">Waited for Element with selector //input[@id="username"] at state editable</msg>
<status status="PASS" starttime="20241125 10:54:43.187" endtime="20241125 10:54:43.199"/>
</kw>
<msg timestamp="20241125 10:54:43.199" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.187" endtime="20241125 10:54:43.199"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.199" endtime="20241125 10:54:43.199"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.186" endtime="20241125 10:54:43.199"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.200" endtime="20241125 10:54:43.200"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.200" endtime="20241125 10:54:43.200"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.199" endtime="20241125 10:54:43.200"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.186" endtime="20241125 10:54:43.200"/>
</try>
<msg timestamp="20241125 10:54:43.200" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.186" endtime="20241125 10:54:43.200"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.201" endtime="20241125 10:54:43.201"/>
</return>
<msg timestamp="20241125 10:54:43.201" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.184" endtime="20241125 10:54:43.201"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.203" endtime="20241125 10:54:43.203"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.203" endtime="20241125 10:54:43.203"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.203" endtime="20241125 10:54:43.203"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.203" endtime="20241125 10:54:43.203"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.202" endtime="20241125 10:54:43.203"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.184" endtime="20241125 10:54:43.203"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:43.204" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:54:43.204" endtime="20241125 10:54:43.204"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="username"]: string</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.205" endtime="20241125 10:54:43.205"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.207" endtime="20241125 10:54:43.207"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.205" endtime="20241125 10:54:43.207"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.207" endtime="20241125 10:54:43.208"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.207" endtime="20241125 10:54:43.208"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.205" endtime="20241125 10:54:43.208"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241125 10:54:43.208" level="INFO">Fills the text 'bharani@ideas2it.com' in the given field.</msg>
<status status="PASS" starttime="20241125 10:54:43.208" endtime="20241125 10:54:43.229"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.208" endtime="20241125 10:54:43.229"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.230" endtime="20241125 10:54:43.230"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.230" endtime="20241125 10:54:43.230"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.229" endtime="20241125 10:54:43.230"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.208" endtime="20241125 10:54:43.230"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
//input[@id="username"]: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.242" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:43.237" endtime="20241125 10:54:43.242"/>
</kw>
<msg timestamp="20241125 10:54:43.242" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.237" endtime="20241125 10:54:43.242"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.242" endtime="20241125 10:54:43.242"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.237" endtime="20241125 10:54:43.242"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.243" endtime="20241125 10:54:43.243"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.243" endtime="20241125 10:54:43.243"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.242" endtime="20241125 10:54:43.243"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.236" endtime="20241125 10:54:43.243"/>
</try>
<msg timestamp="20241125 10:54:43.243" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.236" endtime="20241125 10:54:43.243"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.244" endtime="20241125 10:54:43.244"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.235" endtime="20241125 10:54:43.244"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.244" endtime="20241125 10:54:43.244"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.244" endtime="20241125 10:54:43.244"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.235" endtime="20241125 10:54:43.244"/>
</try>
<msg timestamp="20241125 10:54:43.244" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.235" endtime="20241125 10:54:43.244"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.247" endtime="20241125 10:54:43.248"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.248" endtime="20241125 10:54:43.248"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.247" endtime="20241125 10:54:43.248"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.247" endtime="20241125 10:54:43.248"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.246" endtime="20241125 10:54:43.248"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.234" endtime="20241125 10:54:43.249"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.262" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:43.257" endtime="20241125 10:54:43.262"/>
</kw>
<msg timestamp="20241125 10:54:43.262" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.257" endtime="20241125 10:54:43.262"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.263" endtime="20241125 10:54:43.263"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.257" endtime="20241125 10:54:43.263"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.263" endtime="20241125 10:54:43.263"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.263" endtime="20241125 10:54:43.264"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.263" endtime="20241125 10:54:43.264"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.257" endtime="20241125 10:54:43.264"/>
</try>
<msg timestamp="20241125 10:54:43.264" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.256" endtime="20241125 10:54:43.264"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.264" endtime="20241125 10:54:43.264"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.255" endtime="20241125 10:54:43.264"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.265" endtime="20241125 10:54:43.265"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.265" endtime="20241125 10:54:43.265"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.255" endtime="20241125 10:54:43.265"/>
</try>
<msg timestamp="20241125 10:54:43.265" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.255" endtime="20241125 10:54:43.265"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.267" endtime="20241125 10:54:43.267"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.268" endtime="20241125 10:54:43.268"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.267" endtime="20241125 10:54:43.268"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.267" endtime="20241125 10:54:43.268"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.266" endtime="20241125 10:54:43.268"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.255" endtime="20241125 10:54:43.268"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:43.275" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241125 10:54:43.275" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:43.268" endtime="20241125 10:54:43.275"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:43.276" endtime="20241125 10:54:43.276"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.268" endtime="20241125 10:54:43.276"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.276" endtime="20241125 10:54:43.276"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.276" endtime="20241125 10:54:43.276"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.276" endtime="20241125 10:54:43.276"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.268" endtime="20241125 10:54:43.276"/>
</try>
<msg timestamp="20241125 10:54:43.277" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:43.253" endtime="20241125 10:54:43.277"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.279" endtime="20241125 10:54:43.279"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.280" endtime="20241125 10:54:43.280"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.279" endtime="20241125 10:54:43.280"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.279" endtime="20241125 10:54:43.280"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.278" endtime="20241125 10:54:43.280"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.251" endtime="20241125 10:54:43.280"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.280" endtime="20241125 10:54:43.280"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.280" endtime="20241125 10:54:43.281"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.251" endtime="20241125 10:54:43.281"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.251" endtime="20241125 10:54:43.281"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.289" level="INFO">Waited for Element with selector //input[@id="username"] at state visible</msg>
<status status="PASS" starttime="20241125 10:54:43.285" endtime="20241125 10:54:43.289"/>
</kw>
<msg timestamp="20241125 10:54:43.289" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.284" endtime="20241125 10:54:43.289"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.289" endtime="20241125 10:54:43.289"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.284" endtime="20241125 10:54:43.290"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.290" endtime="20241125 10:54:43.290"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.290" endtime="20241125 10:54:43.290"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.290" endtime="20241125 10:54:43.290"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.284" endtime="20241125 10:54:43.290"/>
</try>
<msg timestamp="20241125 10:54:43.290" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.284" endtime="20241125 10:54:43.290"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.291" endtime="20241125 10:54:43.291"/>
</return>
<msg timestamp="20241125 10:54:43.291" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.283" endtime="20241125 10:54:43.291"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.293" endtime="20241125 10:54:43.293"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.293" endtime="20241125 10:54:43.293"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.293" endtime="20241125 10:54:43.293"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.292" endtime="20241125 10:54:43.293"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.292" endtime="20241125 10:54:43.293"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.282" endtime="20241125 10:54:43.293"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.232" endtime="20241125 10:54:43.294"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.303" level="INFO">Waited for Element with selector //input[@id="username"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:43.299" endtime="20241125 10:54:43.304"/>
</kw>
<msg timestamp="20241125 10:54:43.304" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.299" endtime="20241125 10:54:43.304"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.304" endtime="20241125 10:54:43.304"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.299" endtime="20241125 10:54:43.304"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.304" endtime="20241125 10:54:43.304"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.305" endtime="20241125 10:54:43.305"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.304" endtime="20241125 10:54:43.305"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.299" endtime="20241125 10:54:43.305"/>
</try>
<msg timestamp="20241125 10:54:43.305" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.298" endtime="20241125 10:54:43.305"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.305" endtime="20241125 10:54:43.305"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.298" endtime="20241125 10:54:43.305"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.305" endtime="20241125 10:54:43.305"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.305" endtime="20241125 10:54:43.305"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.298" endtime="20241125 10:54:43.306"/>
</try>
<msg timestamp="20241125 10:54:43.306" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.297" endtime="20241125 10:54:43.306"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.308" endtime="20241125 10:54:43.308"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.308" endtime="20241125 10:54:43.308"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.307" endtime="20241125 10:54:43.308"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.307" endtime="20241125 10:54:43.308"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.307" endtime="20241125 10:54:43.308"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.297" endtime="20241125 10:54:43.308"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:43.316" level="INFO">Property: 'bharani@ideas2it.com'</msg>
<msg timestamp="20241125 10:54:43.317" level="INFO">${property} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:43.309" endtime="20241125 10:54:43.317"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:43.317" endtime="20241125 10:54:43.317"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.308" endtime="20241125 10:54:43.317"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.317" endtime="20241125 10:54:43.317"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.317" endtime="20241125 10:54:43.317"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.317" endtime="20241125 10:54:43.317"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.308" endtime="20241125 10:54:43.317"/>
</try>
<msg timestamp="20241125 10:54:43.318" level="INFO">${fieldTextValue} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:43.294" endtime="20241125 10:54:43.318"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241125 10:54:43.318" endtime="20241125 10:54:43.318"/>
</return>
<msg timestamp="20241125 10:54:43.318" level="INFO">${populated_value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:43.232" endtime="20241125 10:54:43.318"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241125 10:54:43.323" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.320" endtime="20241125 10:54:43.323"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.323" endtime="20241125 10:54:43.323"/>
</return>
<msg timestamp="20241125 10:54:43.323" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.320" endtime="20241125 10:54:43.323"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.327" endtime="20241125 10:54:43.327"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.327" endtime="20241125 10:54:43.327"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.327" endtime="20241125 10:54:43.327"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.327" endtime="20241125 10:54:43.328"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.326" endtime="20241125 10:54:43.328"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.231" endtime="20241125 10:54:43.328"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.204" endtime="20241125 10:54:43.328"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.204" endtime="20241125 10:54:43.328"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.204" endtime="20241125 10:54:43.328"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.329" endtime="20241125 10:54:43.329"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.328" endtime="20241125 10:54:43.329"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.204" endtime="20241125 10:54:43.329"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.061" endtime="20241125 10:54:43.329"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.059" endtime="20241125 10:54:43.329"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.330" endtime="20241125 10:54:43.330"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.329" endtime="20241125 10:54:43.330"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.331" endtime="20241125 10:54:43.332"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.332" endtime="20241125 10:54:43.332"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.332" endtime="20241125 10:54:43.332"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.332" endtime="20241125 10:54:43.332"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.332" endtime="20241125 10:54:43.332"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.332" endtime="20241125 10:54:43.332"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.330" endtime="20241125 10:54:43.333"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:43.338" endtime="20241125 10:54:43.338"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.340" endtime="20241125 10:54:43.340"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.333" endtime="20241125 10:54:43.341"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.342" endtime="20241125 10:54:43.342"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.342" endtime="20241125 10:54:43.342"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.342" endtime="20241125 10:54:43.342"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.343" endtime="20241125 10:54:43.343"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.342" endtime="20241125 10:54:43.343"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.342" endtime="20241125 10:54:43.343"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.341" endtime="20241125 10:54:43.343"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:43.348" endtime="20241125 10:54:43.348"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.351" endtime="20241125 10:54:43.351"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.343" endtime="20241125 10:54:43.351"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.352" endtime="20241125 10:54:43.352"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.353" endtime="20241125 10:54:43.353"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.353" endtime="20241125 10:54:43.353"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.353" endtime="20241125 10:54:43.353"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.353" endtime="20241125 10:54:43.353"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.352" endtime="20241125 10:54:43.353"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.351" endtime="20241125 10:54:43.353"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.355" endtime="20241125 10:54:43.356"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.353" endtime="20241125 10:54:43.356"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.361" endtime="20241125 10:54:43.362"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.362" endtime="20241125 10:54:43.362"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.356" endtime="20241125 10:54:43.362"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.041" endtime="20241125 10:54:43.362"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.362" endtime="20241125 10:54:43.363"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:43.363" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:43.363" endtime="20241125 10:54:43.363"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:43.363" endtime="20241125 10:54:43.363"/>
</return>
<msg timestamp="20241125 10:54:43.364" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:43.040" endtime="20241125 10:54:43.364"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.365" level="INFO">${key} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:43.364" endtime="20241125 10:54:43.365"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.365" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:43.365" endtime="20241125 10:54:43.366"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.366" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:43.366" endtime="20241125 10:54:43.366"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.366" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:43.366" endtime="20241125 10:54:43.366"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.367" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:43.367" endtime="20241125 10:54:43.367"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.367" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.367" endtime="20241125 10:54:43.367"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.368" level="INFO">${customTargetValue} = bharani@ideas2it.ai</msg>
<status status="PASS" starttime="20241125 10:54:43.367" endtime="20241125 10:54:43.368"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.368" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:43.368" endtime="20241125 10:54:43.368"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.368" endtime="20241125 10:54:43.369"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:43.371" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:6::flowActionSequenceId:7'.</msg>
<status status="FAIL" starttime="20241125 10:54:43.371" endtime="20241125 10:54:43.371"/>
</kw>
<msg timestamp="20241125 10:54:43.371" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:43.370" endtime="20241125 10:54:43.371"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.372" endtime="20241125 10:54:43.372"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.372" endtime="20241125 10:54:43.372"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.372" endtime="20241125 10:54:43.372"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.373" endtime="20241125 10:54:43.373"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.373" endtime="20241125 10:54:43.373"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.372" endtime="20241125 10:54:43.373"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.372" endtime="20241125 10:54:43.373"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.371" endtime="20241125 10:54:43.373"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:43.373" endtime="20241125 10:54:43.373"/>
</return>
<msg timestamp="20241125 10:54:43.373" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:43.370" endtime="20241125 10:54:43.374"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.375" endtime="20241125 10:54:43.376"/>
</kw>
<msg timestamp="20241125 10:54:43.376" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.375" endtime="20241125 10:54:43.376"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.377" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:43.376" endtime="20241125 10:54:43.377"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.377" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.377" endtime="20241125 10:54:43.377"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.377" endtime="20241125 10:54:43.377"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.378" endtime="20241125 10:54:43.378"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.378" endtime="20241125 10:54:43.378"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.377" endtime="20241125 10:54:43.378"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.376" endtime="20241125 10:54:43.378"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.376" endtime="20241125 10:54:43.378"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:43.378" endtime="20241125 10:54:43.378"/>
</return>
<msg timestamp="20241125 10:54:43.379" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.375" endtime="20241125 10:54:43.379"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:43.379" endtime="20241125 10:54:43.379"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.379" endtime="20241125 10:54:43.379"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.379" endtime="20241125 10:54:43.379"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.380" endtime="20241125 10:54:43.380"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.380" endtime="20241125 10:54:43.380"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.380" endtime="20241125 10:54:43.380"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.380" endtime="20241125 10:54:43.380"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.380" endtime="20241125 10:54:43.381"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.380" endtime="20241125 10:54:43.381"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.380" endtime="20241125 10:54:43.381"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.380" endtime="20241125 10:54:43.381"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.379" endtime="20241125 10:54:43.381"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.381" endtime="20241125 10:54:43.382"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.382" endtime="20241125 10:54:43.382"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.381" endtime="20241125 10:54:43.382"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.382" endtime="20241125 10:54:43.382"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.382" endtime="20241125 10:54:43.382"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.382" endtime="20241125 10:54:43.382"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.381" endtime="20241125 10:54:43.382"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.381" endtime="20241125 10:54:43.382"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.381" endtime="20241125 10:54:43.383"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.379" endtime="20241125 10:54:43.383"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.379" endtime="20241125 10:54:43.383"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:43.383" endtime="20241125 10:54:43.383"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.383" endtime="20241125 10:54:43.383"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.383" endtime="20241125 10:54:43.383"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.384" endtime="20241125 10:54:43.384"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.384" endtime="20241125 10:54:43.384"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.384" endtime="20241125 10:54:43.385"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.385" endtime="20241125 10:54:43.385"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.385" endtime="20241125 10:54:43.385"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.385" endtime="20241125 10:54:43.385"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.386" endtime="20241125 10:54:43.386"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.386" endtime="20241125 10:54:43.386"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.385" endtime="20241125 10:54:43.386"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.385" endtime="20241125 10:54:43.386"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.385" endtime="20241125 10:54:43.386"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.385" endtime="20241125 10:54:43.386"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.383" endtime="20241125 10:54:43.386"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.383" endtime="20241125 10:54:43.386"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.365" endtime="20241125 10:54:43.386"/>
</iter>
<status status="PASS" starttime="20241125 10:54:43.365" endtime="20241125 10:54:43.386"/>
</for>
<msg timestamp="20241125 10:54:43.387" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:54:43.364" endtime="20241125 10:54:43.387"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.387" endtime="20241125 10:54:43.387"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.391" endtime="20241125 10:54:43.391"/>
</kw>
<msg timestamp="20241125 10:54:43.391" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.391" endtime="20241125 10:54:43.392"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.392" level="INFO">${values} = {'id': '1', 'name': 'Username', 'xpath': '//input[@id="username"]', 'pageId': '1', 'createdAt': '2024-11-24T15:18:09.149Z', 'updatedAt': '2024-11-24T17:22:57.715Z'}</msg>
<status status="PASS" starttime="20241125 10:54:43.392" endtime="20241125 10:54:43.392"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.393" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.393" endtime="20241125 10:54:43.393"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.393" endtime="20241125 10:54:43.393"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.393" endtime="20241125 10:54:43.393"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.393" endtime="20241125 10:54:43.393"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.392" endtime="20241125 10:54:43.394"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.392" endtime="20241125 10:54:43.394"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.392" endtime="20241125 10:54:43.394"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:43.394" endtime="20241125 10:54:43.394"/>
</return>
<msg timestamp="20241125 10:54:43.394" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.390" endtime="20241125 10:54:43.394"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.395" level="INFO">${xpath} = //input[@id="username"]</msg>
<status status="PASS" starttime="20241125 10:54:43.395" endtime="20241125 10:54:43.395"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.394" endtime="20241125 10:54:43.395"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.395" endtime="20241125 10:54:43.395"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.395" endtime="20241125 10:54:43.395"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.394" endtime="20241125 10:54:43.396"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:43.397" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '132', 'status': 'COMPLETED', 'actionName': 'Set username', 'actionType': 'TYPE_TEXT', 'actionXpath': '//input[@id="username"]', 'inputValue': 'bharani@ideas2it.com', '...</msg>
<status status="PASS" starttime="20241125 10:54:43.396" endtime="20241125 10:54:43.397"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:43.398" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "132", "status": "COMPLETED", "actionName": "Set username", "actionType": "TYPE_TEXT", "actionXpath": "//input[@id=\"username\"]", "inputValue": "bharani@ideas2it.com",...</msg>
<status status="PASS" starttime="20241125 10:54:43.398" endtime="20241125 10:54:43.398"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:43.421" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:43.422" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:43.398" endtime="20241125 10:54:43.422"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.422" endtime="20241125 10:54:43.422"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:43.423" endtime="20241125 10:54:43.423"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.397" endtime="20241125 10:54:43.423"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.387" endtime="20241125 10:54:43.423"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.037" endtime="20241125 10:54:43.423"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.424" endtime="20241125 10:54:43.424"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.424" endtime="20241125 10:54:43.424"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.424" endtime="20241125 10:54:43.424"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.423" endtime="20241125 10:54:43.424"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.037" endtime="20241125 10:54:43.424"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.037" endtime="20241125 10:54:43.424"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '3', 'actionId': '3', 'flowId': '1', 'order': 2, 'createdAt': '2024-11-24T16:52:08.811Z', 'updatedAt': '2024-11-24T17:34:15.617Z', 'action': {'id': '3', 'name': 'Set password', 'type': 'TYPE_TE...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.425" level="INFO">${action} = {'id': '3', 'name': 'Set password', 'type': 'TYPE_TEXT', 'selectorI': '2', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:44:31.460Z', 'updatedAt': '2024-11-24T16:44:31.460Z', 'selecto...</msg>
<status status="PASS" starttime="20241125 10:54:43.425" endtime="20241125 10:54:43.425"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.425" endtime="20241125 10:54:43.426"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:43.426" level="INFO">${input} = {'id': '3', 'actionId': '3', 'name': 'Bharani', 'value': 'vijaybharani', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:44:31.712Z', 'updatedAt': '2024-11-24T16:46:16.462Z'}</msg>
<status status="PASS" starttime="20241125 10:54:43.426" endtime="20241125 10:54:43.426"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.427" endtime="20241125 10:54:43.427"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.427" endtime="20241125 10:54:43.427"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.426" endtime="20241125 10:54:43.427"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.426" endtime="20241125 10:54:43.427"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.428" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:54:43.428" endtime="20241125 10:54:43.428"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.429" endtime="20241125 10:54:43.429"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.429" endtime="20241125 10:54:43.429"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.430" endtime="20241125 10:54:43.430"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.429" endtime="20241125 10:54:43.430"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.433" endtime="20241125 10:54:43.433"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.430" endtime="20241125 10:54:43.433"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.435" endtime="20241125 10:54:43.435"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.436" endtime="20241125 10:54:43.437"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.433" endtime="20241125 10:54:43.437"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.438" endtime="20241125 10:54:43.438"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.437" endtime="20241125 10:54:43.438"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.440" endtime="20241125 10:54:43.440"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.438" endtime="20241125 10:54:43.440"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>selector::${selector}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.442" endtime="20241125 10:54:43.443"/>
</kw>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=password: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.456" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:54:43.449" endtime="20241125 10:54:43.456"/>
</kw>
<msg timestamp="20241125 10:54:43.456" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.449" endtime="20241125 10:54:43.456"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.456" endtime="20241125 10:54:43.456"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.449" endtime="20241125 10:54:43.456"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.457" endtime="20241125 10:54:43.457"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.457" endtime="20241125 10:54:43.457"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.456" endtime="20241125 10:54:43.457"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.448" endtime="20241125 10:54:43.457"/>
</try>
<msg timestamp="20241125 10:54:43.457" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.448" endtime="20241125 10:54:43.457"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.457" endtime="20241125 10:54:43.457"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.447" endtime="20241125 10:54:43.457"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.458" endtime="20241125 10:54:43.458"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.457" endtime="20241125 10:54:43.458"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.447" endtime="20241125 10:54:43.458"/>
</try>
<msg timestamp="20241125 10:54:43.458" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.446" endtime="20241125 10:54:43.458"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.460" endtime="20241125 10:54:43.460"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.460" endtime="20241125 10:54:43.460"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.460" endtime="20241125 10:54:43.460"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.460" endtime="20241125 10:54:43.460"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.459" endtime="20241125 10:54:43.460"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.445" endtime="20241125 10:54:43.461"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.475" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:54:43.470" endtime="20241125 10:54:43.475"/>
</kw>
<msg timestamp="20241125 10:54:43.476" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.470" endtime="20241125 10:54:43.476"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.476" endtime="20241125 10:54:43.476"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.469" endtime="20241125 10:54:43.476"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.476" endtime="20241125 10:54:43.476"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.476" endtime="20241125 10:54:43.476"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.476" endtime="20241125 10:54:43.476"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.469" endtime="20241125 10:54:43.477"/>
</try>
<msg timestamp="20241125 10:54:43.477" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.469" endtime="20241125 10:54:43.477"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.477" endtime="20241125 10:54:43.477"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.468" endtime="20241125 10:54:43.477"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.477" endtime="20241125 10:54:43.477"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.477" endtime="20241125 10:54:43.477"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.468" endtime="20241125 10:54:43.477"/>
</try>
<msg timestamp="20241125 10:54:43.477" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.468" endtime="20241125 10:54:43.477"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.480" endtime="20241125 10:54:43.481"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.481" endtime="20241125 10:54:43.481"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.480" endtime="20241125 10:54:43.481"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.480" endtime="20241125 10:54:43.481"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.479" endtime="20241125 10:54:43.481"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.467" endtime="20241125 10:54:43.481"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:43.491" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241125 10:54:43.491" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:43.482" endtime="20241125 10:54:43.491"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:43.491" endtime="20241125 10:54:43.491"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.481" endtime="20241125 10:54:43.491"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.491" endtime="20241125 10:54:43.491"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.492" endtime="20241125 10:54:43.492"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.491" endtime="20241125 10:54:43.492"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.481" endtime="20241125 10:54:43.492"/>
</try>
<msg timestamp="20241125 10:54:43.492" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:43.465" endtime="20241125 10:54:43.492"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.494" endtime="20241125 10:54:43.494"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.494" endtime="20241125 10:54:43.494"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.494" endtime="20241125 10:54:43.494"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.494" endtime="20241125 10:54:43.494"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.493" endtime="20241125 10:54:43.494"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.464" endtime="20241125 10:54:43.494"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.495" endtime="20241125 10:54:43.495"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.495" endtime="20241125 10:54:43.495"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.464" endtime="20241125 10:54:43.495"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.463" endtime="20241125 10:54:43.496"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.506" level="INFO">Waited for Element with selector id=password at state visible</msg>
<status status="PASS" starttime="20241125 10:54:43.501" endtime="20241125 10:54:43.506"/>
</kw>
<msg timestamp="20241125 10:54:43.506" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.501" endtime="20241125 10:54:43.506"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.506" endtime="20241125 10:54:43.506"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.501" endtime="20241125 10:54:43.506"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.507" endtime="20241125 10:54:43.507"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.507" endtime="20241125 10:54:43.507"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.506" endtime="20241125 10:54:43.507"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.500" endtime="20241125 10:54:43.507"/>
</try>
<msg timestamp="20241125 10:54:43.507" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.500" endtime="20241125 10:54:43.507"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.507" endtime="20241125 10:54:43.507"/>
</return>
<msg timestamp="20241125 10:54:43.508" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.499" endtime="20241125 10:54:43.508"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.510" endtime="20241125 10:54:43.510"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.510" endtime="20241125 10:54:43.510"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.509" endtime="20241125 10:54:43.510"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.509" endtime="20241125 10:54:43.510"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.509" endtime="20241125 10:54:43.510"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.498" endtime="20241125 10:54:43.510"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.443" endtime="20241125 10:54:43.510"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<kw name="is-editable-after-wait" library="UTIL_BrowserHelper">
<var>${is_editable}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is editable
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_EDITABLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.528" level="INFO">Waited for Element with selector id=password at state editable</msg>
<status status="PASS" starttime="20241125 10:54:43.517" endtime="20241125 10:54:43.528"/>
</kw>
<msg timestamp="20241125 10:54:43.529" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.516" endtime="20241125 10:54:43.529"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.529" endtime="20241125 10:54:43.529"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.516" endtime="20241125 10:54:43.529"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.529" endtime="20241125 10:54:43.529"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.530" endtime="20241125 10:54:43.530"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.529" endtime="20241125 10:54:43.530"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.516" endtime="20241125 10:54:43.530"/>
</try>
<msg timestamp="20241125 10:54:43.530" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.516" endtime="20241125 10:54:43.530"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.530" endtime="20241125 10:54:43.530"/>
</return>
<msg timestamp="20241125 10:54:43.531" level="INFO">${is_editable} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.513" endtime="20241125 10:54:43.531"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_editable == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.533" endtime="20241125 10:54:43.533"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.533" endtime="20241125 10:54:43.533"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.533" endtime="20241125 10:54:43.533"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.532" endtime="20241125 10:54:43.533"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.532" endtime="20241125 10:54:43.533"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.512" endtime="20241125 10:54:43.533"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:43.534" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:54:43.534" endtime="20241125 10:54:43.534"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Textbox.fill-text-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="fill-text-and-validate-post-condition" library="COMP_Textbox">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=password: string</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.535" endtime="20241125 10:54:43.535"/>
</kw>
<kw name="fail-if-not-editable-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not editable
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.537" endtime="20241125 10:54:43.537"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.535" endtime="20241125 10:54:43.537"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.537" endtime="20241125 10:54:43.538"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.537" endtime="20241125 10:54:43.538"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.535" endtime="20241125 10:54:43.538"/>
</if>
<try>
<branch type="TRY">
<kw name="Fill Text" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.</doc>
<msg timestamp="20241125 10:54:43.538" level="INFO">Fills the text 'vijaybharani' in the given field.</msg>
<status status="PASS" starttime="20241125 10:54:43.538" endtime="20241125 10:54:43.557"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.538" endtime="20241125 10:54:43.557"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.558" endtime="20241125 10:54:43.558"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.558" endtime="20241125 10:54:43.558"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.557" endtime="20241125 10:54:43.558"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.538" endtime="20241125 10:54:43.558"/>
</try>
<kw name="fail-if-value-not-populated" library="COMP_Textbox">
<arg>${selector}</arg>
<arg>${value}</arg>
<tag>robot:private</tag>
<doc>Fails if the value is not populated in the given input field</doc>
<kw name="get-value" library="COMP_Textbox">
<var>${populated_value}</var>
<arg>${selector}</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<kw name="validate-precondition" library="COMP_Textbox">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually an input
Also used to validate the input element before performing any action
...
INPUT:
id=password: string</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.570" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:54:43.565" endtime="20241125 10:54:43.570"/>
</kw>
<msg timestamp="20241125 10:54:43.571" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.565" endtime="20241125 10:54:43.571"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.571" endtime="20241125 10:54:43.571"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.564" endtime="20241125 10:54:43.571"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.571" endtime="20241125 10:54:43.571"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.571" endtime="20241125 10:54:43.571"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.571" endtime="20241125 10:54:43.572"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.564" endtime="20241125 10:54:43.572"/>
</try>
<msg timestamp="20241125 10:54:43.572" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.563" endtime="20241125 10:54:43.572"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.572" endtime="20241125 10:54:43.572"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.562" endtime="20241125 10:54:43.572"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.572" endtime="20241125 10:54:43.572"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.572" endtime="20241125 10:54:43.572"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.562" endtime="20241125 10:54:43.572"/>
</try>
<msg timestamp="20241125 10:54:43.573" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.561" endtime="20241125 10:54:43.573"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.574" endtime="20241125 10:54:43.575"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.575" endtime="20241125 10:54:43.575"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.574" endtime="20241125 10:54:43.575"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.574" endtime="20241125 10:54:43.575"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.573" endtime="20241125 10:54:43.575"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.561" endtime="20241125 10:54:43.575"/>
</kw>
<kw name="fail-if-not-a-textbox" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not a valid textbox</doc>
<try>
<branch type="TRY">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${tag_name}</var>
<arg>${selector}</arg>
<arg>tagName</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.588" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:54:43.583" endtime="20241125 10:54:43.588"/>
</kw>
<msg timestamp="20241125 10:54:43.589" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.583" endtime="20241125 10:54:43.589"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.589" endtime="20241125 10:54:43.589"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.583" endtime="20241125 10:54:43.589"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.589" endtime="20241125 10:54:43.589"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.589" endtime="20241125 10:54:43.589"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.589" endtime="20241125 10:54:43.589"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.583" endtime="20241125 10:54:43.589"/>
</try>
<msg timestamp="20241125 10:54:43.590" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.582" endtime="20241125 10:54:43.590"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.590" endtime="20241125 10:54:43.590"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.581" endtime="20241125 10:54:43.590"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.590" endtime="20241125 10:54:43.590"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.590" endtime="20241125 10:54:43.590"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.581" endtime="20241125 10:54:43.590"/>
</try>
<msg timestamp="20241125 10:54:43.590" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.581" endtime="20241125 10:54:43.590"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.592" endtime="20241125 10:54:43.592"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.593" endtime="20241125 10:54:43.593"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.592" endtime="20241125 10:54:43.593"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.592" endtime="20241125 10:54:43.593"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.591" endtime="20241125 10:54:43.593"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.580" endtime="20241125 10:54:43.593"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:43.603" level="INFO">Property: 'INPUT'</msg>
<msg timestamp="20241125 10:54:43.604" level="INFO">${property} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:43.593" endtime="20241125 10:54:43.604"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:43.604" endtime="20241125 10:54:43.604"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.593" endtime="20241125 10:54:43.604"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.604" endtime="20241125 10:54:43.604"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.604" endtime="20241125 10:54:43.604"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.604" endtime="20241125 10:54:43.604"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.593" endtime="20241125 10:54:43.605"/>
</try>
<msg timestamp="20241125 10:54:43.605" level="INFO">${tag_name} = INPUT</msg>
<status status="PASS" starttime="20241125 10:54:43.578" endtime="20241125 10:54:43.605"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${tag_name != 'INPUT'}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.607" endtime="20241125 10:54:43.607"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.607" endtime="20241125 10:54:43.607"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.607" endtime="20241125 10:54:43.607"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.607" endtime="20241125 10:54:43.607"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.606" endtime="20241125 10:54:43.607"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.577" endtime="20241125 10:54:43.607"/>
</branch>
<branch type="EXCEPT">
<pattern>INVALID_BROWSER_ELEMENT_PROPERTY</pattern>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.608" endtime="20241125 10:54:43.608"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.607" endtime="20241125 10:54:43.608"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.577" endtime="20241125 10:54:43.608"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.577" endtime="20241125 10:54:43.608"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.618" level="INFO">Waited for Element with selector id=password at state visible</msg>
<status status="PASS" starttime="20241125 10:54:43.612" endtime="20241125 10:54:43.618"/>
</kw>
<msg timestamp="20241125 10:54:43.618" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.612" endtime="20241125 10:54:43.618"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.618" endtime="20241125 10:54:43.618"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.612" endtime="20241125 10:54:43.618"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.618" endtime="20241125 10:54:43.619"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.619" endtime="20241125 10:54:43.619"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.618" endtime="20241125 10:54:43.619"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.612" endtime="20241125 10:54:43.619"/>
</try>
<msg timestamp="20241125 10:54:43.619" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.611" endtime="20241125 10:54:43.619"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.619" endtime="20241125 10:54:43.619"/>
</return>
<msg timestamp="20241125 10:54:43.619" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.610" endtime="20241125 10:54:43.619"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.622" endtime="20241125 10:54:43.622"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.622" endtime="20241125 10:54:43.622"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.621" endtime="20241125 10:54:43.622"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.621" endtime="20241125 10:54:43.622"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.621" endtime="20241125 10:54:43.622"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.609" endtime="20241125 10:54:43.622"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.559" endtime="20241125 10:54:43.622"/>
</kw>
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${fieldTextValue}</var>
<arg>${selector}</arg>
<arg>value</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.633" level="INFO">Waited for Element with selector id=password at state attached</msg>
<status status="PASS" starttime="20241125 10:54:43.627" endtime="20241125 10:54:43.633"/>
</kw>
<msg timestamp="20241125 10:54:43.634" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.627" endtime="20241125 10:54:43.634"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.634" endtime="20241125 10:54:43.634"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.627" endtime="20241125 10:54:43.634"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.634" endtime="20241125 10:54:43.634"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.634" endtime="20241125 10:54:43.634"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.634" endtime="20241125 10:54:43.634"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.627" endtime="20241125 10:54:43.635"/>
</try>
<msg timestamp="20241125 10:54:43.635" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.626" endtime="20241125 10:54:43.635"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.635" endtime="20241125 10:54:43.635"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.626" endtime="20241125 10:54:43.635"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.635" endtime="20241125 10:54:43.635"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.635" endtime="20241125 10:54:43.635"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.625" endtime="20241125 10:54:43.635"/>
</try>
<msg timestamp="20241125 10:54:43.635" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.625" endtime="20241125 10:54:43.635"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.638" endtime="20241125 10:54:43.638"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.638" endtime="20241125 10:54:43.638"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.638" endtime="20241125 10:54:43.638"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.637" endtime="20241125 10:54:43.638"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.637" endtime="20241125 10:54:43.638"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.625" endtime="20241125 10:54:43.638"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:43.649" level="INFO">Property: 'vijaybharani'</msg>
<msg timestamp="20241125 10:54:43.649" level="INFO">${property} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:54:43.639" endtime="20241125 10:54:43.649"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:43.649" endtime="20241125 10:54:43.649"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.639" endtime="20241125 10:54:43.649"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.650" endtime="20241125 10:54:43.650"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.650" endtime="20241125 10:54:43.650"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.649" endtime="20241125 10:54:43.650"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.638" endtime="20241125 10:54:43.650"/>
</try>
<msg timestamp="20241125 10:54:43.650" level="INFO">${fieldTextValue} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:54:43.623" endtime="20241125 10:54:43.650"/>
</kw>
<return>
<value>${fieldTextValue}</value>
<status status="PASS" starttime="20241125 10:54:43.650" endtime="20241125 10:54:43.650"/>
</return>
<msg timestamp="20241125 10:54:43.651" level="INFO">${populated_value} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:54:43.559" endtime="20241125 10:54:43.651"/>
</kw>
<kw name="compare-strings" library="UTIL_String">
<var>${matches}</var>
<arg>${populated_value}</arg>
<arg>${value}</arg>
<tag>util</tag>
<doc>Method used to compare the strings</doc>
<kw name="Evaluate JavaScript" library="RPA.Browser.Playwright">
<var>${result}</var>
<arg>${None}</arg>
<arg>() =&gt; `${string1}` === `${string2}`</arg>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Executes given javascript on the selected element(s) or on page.</doc>
<msg timestamp="20241125 10:54:43.657" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.653" endtime="20241125 10:54:43.657"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.657" endtime="20241125 10:54:43.657"/>
</return>
<msg timestamp="20241125 10:54:43.657" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.652" endtime="20241125 10:54:43.657"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${matches == False}</arg>
<arg>VALUE_NOT_POPULATED</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.660" endtime="20241125 10:54:43.660"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.661" endtime="20241125 10:54:43.661"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.660" endtime="20241125 10:54:43.661"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.660" endtime="20241125 10:54:43.661"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.659" endtime="20241125 10:54:43.661"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.558" endtime="20241125 10:54:43.661"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.535" endtime="20241125 10:54:43.661"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.534" endtime="20241125 10:54:43.661"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.534" endtime="20241125 10:54:43.661"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.662" endtime="20241125 10:54:43.662"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.661" endtime="20241125 10:54:43.662"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.534" endtime="20241125 10:54:43.662"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.442" endtime="20241125 10:54:43.662"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.440" endtime="20241125 10:54:43.662"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.664" endtime="20241125 10:54:43.664"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.662" endtime="20241125 10:54:43.664"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.665" endtime="20241125 10:54:43.665"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.665" endtime="20241125 10:54:43.665"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.665" endtime="20241125 10:54:43.665"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.665" endtime="20241125 10:54:43.666"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.665" endtime="20241125 10:54:43.666"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.665" endtime="20241125 10:54:43.666"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.664" endtime="20241125 10:54:43.666"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:43.671" endtime="20241125 10:54:43.671"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.674" endtime="20241125 10:54:43.674"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.666" endtime="20241125 10:54:43.674"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.675" endtime="20241125 10:54:43.675"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.675" endtime="20241125 10:54:43.675"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.675" endtime="20241125 10:54:43.675"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.675" endtime="20241125 10:54:43.675"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.675" endtime="20241125 10:54:43.675"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.675" endtime="20241125 10:54:43.675"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.674" endtime="20241125 10:54:43.676"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:43.680" endtime="20241125 10:54:43.680"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.683" endtime="20241125 10:54:43.683"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.676" endtime="20241125 10:54:43.683"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.684" endtime="20241125 10:54:43.684"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.685" endtime="20241125 10:54:43.685"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.685" endtime="20241125 10:54:43.685"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.685" endtime="20241125 10:54:43.685"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.685" endtime="20241125 10:54:43.685"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.684" endtime="20241125 10:54:43.685"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.683" endtime="20241125 10:54:43.685"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.687" endtime="20241125 10:54:43.687"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.685" endtime="20241125 10:54:43.687"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.693" endtime="20241125 10:54:43.693"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.693" endtime="20241125 10:54:43.693"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.687" endtime="20241125 10:54:43.693"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.429" endtime="20241125 10:54:43.693"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.693" endtime="20241125 10:54:43.694"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:43.694" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:43.694" endtime="20241125 10:54:43.694"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:43.694" endtime="20241125 10:54:43.695"/>
</return>
<msg timestamp="20241125 10:54:43.695" level="INFO">${value} = vijaybharani</msg>
<status status="PASS" starttime="20241125 10:54:43.427" endtime="20241125 10:54:43.695"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.696" level="INFO">${key} = testCaseFlowSequenceId:4::flowActionSequenceId:3</msg>
<status status="PASS" starttime="20241125 10:54:43.696" endtime="20241125 10:54:43.696"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.697" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:43.697" endtime="20241125 10:54:43.697"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.697" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:43.697" endtime="20241125 10:54:43.697"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.698" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:43.697" endtime="20241125 10:54:43.698"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.698" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:43.698" endtime="20241125 10:54:43.698"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.698" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.698" endtime="20241125 10:54:43.698"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.699" level="INFO">${customTargetValue} = bharani@ideas2it.ai</msg>
<status status="PASS" starttime="20241125 10:54:43.699" endtime="20241125 10:54:43.699"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.699" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:43.699" endtime="20241125 10:54:43.699"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.699" endtime="20241125 10:54:43.700"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:43.702" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:6::flowActionSequenceId:7'.</msg>
<status status="FAIL" starttime="20241125 10:54:43.701" endtime="20241125 10:54:43.702"/>
</kw>
<msg timestamp="20241125 10:54:43.702" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:43.701" endtime="20241125 10:54:43.702"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.702" endtime="20241125 10:54:43.702"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.703" endtime="20241125 10:54:43.703"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.703" endtime="20241125 10:54:43.703"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.703" endtime="20241125 10:54:43.703"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.703" endtime="20241125 10:54:43.703"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.703" endtime="20241125 10:54:43.703"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.702" endtime="20241125 10:54:43.703"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.702" endtime="20241125 10:54:43.703"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:43.703" endtime="20241125 10:54:43.703"/>
</return>
<msg timestamp="20241125 10:54:43.704" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:43.701" endtime="20241125 10:54:43.704"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.704" endtime="20241125 10:54:43.705"/>
</kw>
<msg timestamp="20241125 10:54:43.705" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.704" endtime="20241125 10:54:43.705"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.705" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:43.705" endtime="20241125 10:54:43.705"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.706" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.706" endtime="20241125 10:54:43.706"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.706" endtime="20241125 10:54:43.706"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.706" endtime="20241125 10:54:43.707"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.706" endtime="20241125 10:54:43.707"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.706" endtime="20241125 10:54:43.707"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.705" endtime="20241125 10:54:43.707"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.705" endtime="20241125 10:54:43.707"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:43.707" endtime="20241125 10:54:43.707"/>
</return>
<msg timestamp="20241125 10:54:43.707" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.704" endtime="20241125 10:54:43.707"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:43.708" endtime="20241125 10:54:43.708"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.708" endtime="20241125 10:54:43.708"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.708" endtime="20241125 10:54:43.708"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.708" endtime="20241125 10:54:43.708"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.708" endtime="20241125 10:54:43.709"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.708" endtime="20241125 10:54:43.709"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.709" endtime="20241125 10:54:43.709"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.709" endtime="20241125 10:54:43.709"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.709" endtime="20241125 10:54:43.709"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.708" endtime="20241125 10:54:43.709"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.708" endtime="20241125 10:54:43.709"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.708" endtime="20241125 10:54:43.709"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.710" endtime="20241125 10:54:43.710"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.710" endtime="20241125 10:54:43.710"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.709" endtime="20241125 10:54:43.710"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.710" endtime="20241125 10:54:43.710"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.710" endtime="20241125 10:54:43.711"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.710" endtime="20241125 10:54:43.711"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.709" endtime="20241125 10:54:43.711"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.709" endtime="20241125 10:54:43.711"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.709" endtime="20241125 10:54:43.711"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.707" endtime="20241125 10:54:43.711"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.707" endtime="20241125 10:54:43.711"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:43.712" endtime="20241125 10:54:43.712"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.712" endtime="20241125 10:54:43.712"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.712" endtime="20241125 10:54:43.712"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.712" endtime="20241125 10:54:43.712"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.712" endtime="20241125 10:54:43.712"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.712" endtime="20241125 10:54:43.712"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.714" endtime="20241125 10:54:43.714"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.714" endtime="20241125 10:54:43.714"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.714" endtime="20241125 10:54:43.714"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.715" endtime="20241125 10:54:43.715"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.715" endtime="20241125 10:54:43.715"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.714" endtime="20241125 10:54:43.715"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.714" endtime="20241125 10:54:43.715"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.714" endtime="20241125 10:54:43.715"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.714" endtime="20241125 10:54:43.715"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.712" endtime="20241125 10:54:43.715"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.711" endtime="20241125 10:54:43.715"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.697" endtime="20241125 10:54:43.715"/>
</iter>
<status status="PASS" starttime="20241125 10:54:43.696" endtime="20241125 10:54:43.715"/>
</for>
<msg timestamp="20241125 10:54:43.715" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:54:43.695" endtime="20241125 10:54:43.715"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.716" endtime="20241125 10:54:43.716"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.718" endtime="20241125 10:54:43.718"/>
</kw>
<msg timestamp="20241125 10:54:43.718" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.718" endtime="20241125 10:54:43.718"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.719" level="INFO">${values} = {'id': '2', 'name': 'Password', 'xpath': 'id=password', 'pageId': '1', 'createdAt': '2024-11-24T16:43:05.032Z', 'updatedAt': '2024-11-24T17:01:06.183Z'}</msg>
<status status="PASS" starttime="20241125 10:54:43.719" endtime="20241125 10:54:43.719"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.719" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.719" endtime="20241125 10:54:43.719"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.719" endtime="20241125 10:54:43.720"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.720" endtime="20241125 10:54:43.720"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.720" endtime="20241125 10:54:43.720"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.719" endtime="20241125 10:54:43.720"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.719" endtime="20241125 10:54:43.720"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.718" endtime="20241125 10:54:43.720"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:43.720" endtime="20241125 10:54:43.720"/>
</return>
<msg timestamp="20241125 10:54:43.720" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.717" endtime="20241125 10:54:43.720"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.721" level="INFO">${xpath} = id=password</msg>
<status status="PASS" starttime="20241125 10:54:43.721" endtime="20241125 10:54:43.721"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.721" endtime="20241125 10:54:43.721"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.721" endtime="20241125 10:54:43.721"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.721" endtime="20241125 10:54:43.721"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.720" endtime="20241125 10:54:43.721"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:43.722" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '133', 'status': 'COMPLETED', 'actionName': 'Set password', 'actionType': 'TYPE_TEXT', 'actionXpath': 'id=password', 'inputValue': 'vijaybharani', 'errorMessage': '', '...</msg>
<status status="PASS" starttime="20241125 10:54:43.722" endtime="20241125 10:54:43.722"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:43.723" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "133", "status": "COMPLETED", "actionName": "Set password", "actionType": "TYPE_TEXT", "actionXpath": "id=password", "inputValue": "vijaybharani", "errorMessage": "", "...</msg>
<status status="PASS" starttime="20241125 10:54:43.723" endtime="20241125 10:54:43.723"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:43.729" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:43.730" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:43.723" endtime="20241125 10:54:43.730"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.730" endtime="20241125 10:54:43.731"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:43.731" endtime="20241125 10:54:43.731"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.722" endtime="20241125 10:54:43.731"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.716" endtime="20241125 10:54:43.731"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.425" endtime="20241125 10:54:43.732"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.732" endtime="20241125 10:54:43.732"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.732" endtime="20241125 10:54:43.732"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.732" endtime="20241125 10:54:43.732"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.732" endtime="20241125 10:54:43.732"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.424" endtime="20241125 10:54:43.732"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.424" endtime="20241125 10:54:43.732"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '4', 'actionId': '4', 'flowId': '1', 'order': 3, 'createdAt': '2024-11-24T16:52:08.811Z', 'updatedAt': '2024-11-24T17:34:15.605Z', 'action': {'id': '4', 'name': 'Click login button', 'type': 'C...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.733" level="INFO">${action} = {'id': '4', 'name': 'Click login button', 'type': 'CLICK', 'selectorI': '3', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:50:52.555Z', 'updatedAt': '2024-11-24T16:50:52.555Z', 'selec...</msg>
<status status="PASS" starttime="20241125 10:54:43.733" endtime="20241125 10:54:43.733"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.733" endtime="20241125 10:54:43.734"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:43.734" level="INFO">${input} = {'id': '4', 'actionId': '4', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:50:52.715Z', 'updatedAt': '2024-11-24T16:50:52.715Z'}</msg>
<status status="PASS" starttime="20241125 10:54:43.734" endtime="20241125 10:54:43.735"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.735" endtime="20241125 10:54:43.735"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.736" endtime="20241125 10:54:43.736"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.735" endtime="20241125 10:54:43.736"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.735" endtime="20241125 10:54:43.736"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.737" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:43.737" endtime="20241125 10:54:43.737"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.737" endtime="20241125 10:54:43.737"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.737" endtime="20241125 10:54:43.737"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.738" endtime="20241125 10:54:43.738"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.738" endtime="20241125 10:54:43.738"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.752" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:43.744" endtime="20241125 10:54:43.753"/>
</kw>
<msg timestamp="20241125 10:54:43.753" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.744" endtime="20241125 10:54:43.753"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.753" endtime="20241125 10:54:43.753"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.744" endtime="20241125 10:54:43.753"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.753" endtime="20241125 10:54:43.753"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.753" endtime="20241125 10:54:43.754"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.753" endtime="20241125 10:54:43.754"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.744" endtime="20241125 10:54:43.754"/>
</try>
<msg timestamp="20241125 10:54:43.754" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.744" endtime="20241125 10:54:43.754"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.754" endtime="20241125 10:54:43.754"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.743" endtime="20241125 10:54:43.754"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.754" endtime="20241125 10:54:43.754"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.754" endtime="20241125 10:54:43.754"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.743" endtime="20241125 10:54:43.755"/>
</try>
<msg timestamp="20241125 10:54:43.755" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.742" endtime="20241125 10:54:43.755"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.757" endtime="20241125 10:54:43.757"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.757" endtime="20241125 10:54:43.757"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.757" endtime="20241125 10:54:43.757"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.757" endtime="20241125 10:54:43.757"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.756" endtime="20241125 10:54:43.757"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.742" endtime="20241125 10:54:43.757"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.766" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state visible</msg>
<status status="PASS" starttime="20241125 10:54:43.762" endtime="20241125 10:54:43.766"/>
</kw>
<msg timestamp="20241125 10:54:43.767" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.761" endtime="20241125 10:54:43.767"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.767" endtime="20241125 10:54:43.767"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.761" endtime="20241125 10:54:43.767"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.767" endtime="20241125 10:54:43.767"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.767" endtime="20241125 10:54:43.767"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.767" endtime="20241125 10:54:43.767"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.761" endtime="20241125 10:54:43.767"/>
</try>
<msg timestamp="20241125 10:54:43.768" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.760" endtime="20241125 10:54:43.768"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.768" endtime="20241125 10:54:43.768"/>
</return>
<msg timestamp="20241125 10:54:43.768" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.759" endtime="20241125 10:54:43.768"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.770" endtime="20241125 10:54:43.770"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.770" endtime="20241125 10:54:43.770"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.770" endtime="20241125 10:54:43.770"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.770" endtime="20241125 10:54:43.770"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.769" endtime="20241125 10:54:43.770"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.759" endtime="20241125 10:54:43.771"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:43.788" level="INFO">Waited for Element with selector //button[@type="submit" and text()="Login"] at state enabled</msg>
<status status="PASS" starttime="20241125 10:54:43.775" endtime="20241125 10:54:43.788"/>
</kw>
<msg timestamp="20241125 10:54:43.788" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.774" endtime="20241125 10:54:43.788"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.788" endtime="20241125 10:54:43.788"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.774" endtime="20241125 10:54:43.788"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.789" endtime="20241125 10:54:43.789"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.789" endtime="20241125 10:54:43.789"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.789" endtime="20241125 10:54:43.789"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.774" endtime="20241125 10:54:43.789"/>
</try>
<msg timestamp="20241125 10:54:43.789" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.774" endtime="20241125 10:54:43.789"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:43.789" endtime="20241125 10:54:43.789"/>
</return>
<msg timestamp="20241125 10:54:43.790" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.773" endtime="20241125 10:54:43.790"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.792" endtime="20241125 10:54:43.792"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.792" endtime="20241125 10:54:43.792"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.791" endtime="20241125 10:54:43.792"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.791" endtime="20241125 10:54:43.792"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.791" endtime="20241125 10:54:43.792"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.772" endtime="20241125 10:54:43.792"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.740" endtime="20241125 10:54:43.792"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:43.793" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:54:43.793" endtime="20241125 10:54:43.793"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.794" endtime="20241125 10:54:43.794"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.794" endtime="20241125 10:54:43.794"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.795" endtime="20241125 10:54:43.795"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.795" endtime="20241125 10:54:43.795"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.794" endtime="20241125 10:54:43.795"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241125 10:54:43.796" endtime="20241125 10:54:43.832"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.795" endtime="20241125 10:54:43.832"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.833" endtime="20241125 10:54:43.833"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.833" endtime="20241125 10:54:43.833"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.832" endtime="20241125 10:54:43.833"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.795" endtime="20241125 10:54:43.833"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.794" endtime="20241125 10:54:43.833"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.793" endtime="20241125 10:54:43.833"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.793" endtime="20241125 10:54:43.833"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.834" endtime="20241125 10:54:43.834"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.834" endtime="20241125 10:54:43.834"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.793" endtime="20241125 10:54:43.834"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.739" endtime="20241125 10:54:43.834"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.738" endtime="20241125 10:54:43.834"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.836" endtime="20241125 10:54:43.836"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.837" endtime="20241125 10:54:43.837"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.834" endtime="20241125 10:54:43.837"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.838" endtime="20241125 10:54:43.838"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.838" endtime="20241125 10:54:43.838"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.841" endtime="20241125 10:54:43.841"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.839" endtime="20241125 10:54:43.841"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.843" endtime="20241125 10:54:43.843"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.841" endtime="20241125 10:54:43.843"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.844" endtime="20241125 10:54:43.844"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.843" endtime="20241125 10:54:43.844"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.845" endtime="20241125 10:54:43.845"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.846" endtime="20241125 10:54:43.846"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.846" endtime="20241125 10:54:43.846"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.846" endtime="20241125 10:54:43.846"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.846" endtime="20241125 10:54:43.846"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.846" endtime="20241125 10:54:43.846"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.844" endtime="20241125 10:54:43.846"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:43.851" endtime="20241125 10:54:43.851"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.853" endtime="20241125 10:54:43.853"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.846" endtime="20241125 10:54:43.853"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.854" endtime="20241125 10:54:43.854"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.855" endtime="20241125 10:54:43.855"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.854" endtime="20241125 10:54:43.855"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.855" endtime="20241125 10:54:43.855"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.855" endtime="20241125 10:54:43.855"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.854" endtime="20241125 10:54:43.855"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.853" endtime="20241125 10:54:43.855"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:43.862" endtime="20241125 10:54:43.862"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.867" endtime="20241125 10:54:43.867"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.855" endtime="20241125 10:54:43.867"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.869" endtime="20241125 10:54:43.869"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.870" endtime="20241125 10:54:43.870"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.870" endtime="20241125 10:54:43.870"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.870" endtime="20241125 10:54:43.871"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.870" endtime="20241125 10:54:43.871"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.870" endtime="20241125 10:54:43.871"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.867" endtime="20241125 10:54:43.871"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.874" endtime="20241125 10:54:43.874"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.871" endtime="20241125 10:54:43.875"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.881" endtime="20241125 10:54:43.882"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.882" endtime="20241125 10:54:43.882"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.875" endtime="20241125 10:54:43.882"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.737" endtime="20241125 10:54:43.882"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.882" endtime="20241125 10:54:43.883"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:43.883" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:43.883" endtime="20241125 10:54:43.883"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:43.883" endtime="20241125 10:54:43.883"/>
</return>
<msg timestamp="20241125 10:54:43.884" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:43.736" endtime="20241125 10:54:43.884"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.885" level="INFO">${key} = testCaseFlowSequenceId:4::flowActionSequenceId:4</msg>
<status status="PASS" starttime="20241125 10:54:43.884" endtime="20241125 10:54:43.885"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.885" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:43.885" endtime="20241125 10:54:43.885"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.886" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:43.885" endtime="20241125 10:54:43.886"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.886" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:43.886" endtime="20241125 10:54:43.886"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.886" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:43.886" endtime="20241125 10:54:43.886"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.887" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.887" endtime="20241125 10:54:43.887"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.887" level="INFO">${customTargetValue} = bharani@ideas2it.ai</msg>
<status status="PASS" starttime="20241125 10:54:43.887" endtime="20241125 10:54:43.887"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.888" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:43.887" endtime="20241125 10:54:43.888"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.888" endtime="20241125 10:54:43.888"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:43.890" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:6::flowActionSequenceId:7'.</msg>
<status status="FAIL" starttime="20241125 10:54:43.890" endtime="20241125 10:54:43.891"/>
</kw>
<msg timestamp="20241125 10:54:43.891" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:43.890" endtime="20241125 10:54:43.891"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.891" endtime="20241125 10:54:43.891"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.891" endtime="20241125 10:54:43.892"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.891" endtime="20241125 10:54:43.892"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.892" endtime="20241125 10:54:43.892"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.892" endtime="20241125 10:54:43.892"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.891" endtime="20241125 10:54:43.892"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.891" endtime="20241125 10:54:43.892"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.891" endtime="20241125 10:54:43.892"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:43.892" endtime="20241125 10:54:43.893"/>
</return>
<msg timestamp="20241125 10:54:43.893" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:43.889" endtime="20241125 10:54:43.893"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.895" endtime="20241125 10:54:43.895"/>
</kw>
<msg timestamp="20241125 10:54:43.895" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.895" endtime="20241125 10:54:43.895"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.896" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:43.896" endtime="20241125 10:54:43.896"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.897" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.897" endtime="20241125 10:54:43.897"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.896" endtime="20241125 10:54:43.897"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.897" endtime="20241125 10:54:43.897"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.897" endtime="20241125 10:54:43.897"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.896" endtime="20241125 10:54:43.897"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.896" endtime="20241125 10:54:43.897"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.895" endtime="20241125 10:54:43.897"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:43.897" endtime="20241125 10:54:43.897"/>
</return>
<msg timestamp="20241125 10:54:43.898" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.894" endtime="20241125 10:54:43.898"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:43.898" endtime="20241125 10:54:43.898"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.898" endtime="20241125 10:54:43.898"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.898" endtime="20241125 10:54:43.898"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.899" endtime="20241125 10:54:43.899"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.899" endtime="20241125 10:54:43.899"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.899" endtime="20241125 10:54:43.899"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.899" endtime="20241125 10:54:43.899"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:43.899" endtime="20241125 10:54:43.899"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.899" endtime="20241125 10:54:43.899"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.899" endtime="20241125 10:54:43.900"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.899" endtime="20241125 10:54:43.900"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.898" endtime="20241125 10:54:43.900"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.900" endtime="20241125 10:54:43.900"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.900" endtime="20241125 10:54:43.900"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.900" endtime="20241125 10:54:43.900"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.901" endtime="20241125 10:54:43.901"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.901" endtime="20241125 10:54:43.901"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.900" endtime="20241125 10:54:43.901"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.900" endtime="20241125 10:54:43.901"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.900" endtime="20241125 10:54:43.901"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.900" endtime="20241125 10:54:43.901"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.898" endtime="20241125 10:54:43.901"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.898" endtime="20241125 10:54:43.901"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:43.902" endtime="20241125 10:54:43.902"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.902" endtime="20241125 10:54:43.902"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.902" endtime="20241125 10:54:43.902"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.902" endtime="20241125 10:54:43.902"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.902" endtime="20241125 10:54:43.902"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.902" endtime="20241125 10:54:43.902"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.903" endtime="20241125 10:54:43.903"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.903" endtime="20241125 10:54:43.903"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.903" endtime="20241125 10:54:43.903"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.903" endtime="20241125 10:54:43.903"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:43.903" endtime="20241125 10:54:43.903"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:43.903" endtime="20241125 10:54:43.903"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.903" endtime="20241125 10:54:43.904"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.902" endtime="20241125 10:54:43.904"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:43.902" endtime="20241125 10:54:43.904"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:43.901" endtime="20241125 10:54:43.904"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.901" endtime="20241125 10:54:43.904"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.885" endtime="20241125 10:54:43.904"/>
</iter>
<status status="PASS" starttime="20241125 10:54:43.885" endtime="20241125 10:54:43.905"/>
</for>
<msg timestamp="20241125 10:54:43.905" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:54:43.884" endtime="20241125 10:54:43.905"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.905" endtime="20241125 10:54:43.906"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.909" endtime="20241125 10:54:43.909"/>
</kw>
<msg timestamp="20241125 10:54:43.909" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.909" endtime="20241125 10:54:43.909"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.910" level="INFO">${values} = {'id': '3', 'name': 'Login button', 'xpath': '//button[@type="submit" and text()="Login"]', 'pageId': '1', 'createdAt': '2024-11-24T16:47:28.991Z', 'updatedAt': '2024-11-24T16:47:28.991Z'}</msg>
<status status="PASS" starttime="20241125 10:54:43.910" endtime="20241125 10:54:43.910"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.911" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.910" endtime="20241125 10:54:43.911"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.910" endtime="20241125 10:54:43.911"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.911" endtime="20241125 10:54:43.911"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.911" endtime="20241125 10:54:43.911"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.910" endtime="20241125 10:54:43.911"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.910" endtime="20241125 10:54:43.911"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.909" endtime="20241125 10:54:43.911"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:43.911" endtime="20241125 10:54:43.912"/>
</return>
<msg timestamp="20241125 10:54:43.912" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.908" endtime="20241125 10:54:43.912"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.912" level="INFO">${xpath} = //button[@type="submit" and text()="Login"]</msg>
<status status="PASS" starttime="20241125 10:54:43.912" endtime="20241125 10:54:43.913"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.912" endtime="20241125 10:54:43.913"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.913" endtime="20241125 10:54:43.913"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.913" endtime="20241125 10:54:43.913"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.912" endtime="20241125 10:54:43.913"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:43.914" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '134', 'status': 'COMPLETED', 'actionName': 'Click login button', 'actionType': 'CLICK', 'actionXpath': '//button[@type="submit" and text()="Login"]', 'inputValue': '',...</msg>
<status status="PASS" starttime="20241125 10:54:43.913" endtime="20241125 10:54:43.914"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:43.915" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "134", "status": "COMPLETED", "actionName": "Click login button", "actionType": "CLICK", "actionXpath": "//button[@type=\"submit\" and text()=\"Login\"]", "inputValue":...</msg>
<status status="PASS" starttime="20241125 10:54:43.915" endtime="20241125 10:54:43.915"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:43.952" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:43.952" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:43.915" endtime="20241125 10:54:43.953"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.953" endtime="20241125 10:54:43.954"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:43.955" endtime="20241125 10:54:43.955"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.914" endtime="20241125 10:54:43.955"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.906" endtime="20241125 10:54:43.956"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.733" endtime="20241125 10:54:43.956"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.956" endtime="20241125 10:54:43.957"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.957" endtime="20241125 10:54:43.957"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.957" endtime="20241125 10:54:43.958"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.956" endtime="20241125 10:54:43.958"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.733" endtime="20241125 10:54:43.958"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.733" endtime="20241125 10:54:43.958"/>
</iter>
<status status="PASS" starttime="20241125 10:54:39.938" endtime="20241125 10:54:43.958"/>
</for>
<status status="PASS" starttime="20241125 10:54:39.937" endtime="20241125 10:54:43.958"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.937" endtime="20241125 10:54:43.959"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:43.964" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '64', 'status': 'COMPLETED', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241125 10:54:43.963" endtime="20241125 10:54:43.964"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:43.967" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "64", "status": "COMPLETED", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241125 10:54:43.966" endtime="20241125 10:54:43.968"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:43.984" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:43.984" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:43.968" endtime="20241125 10:54:43.984"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.984" endtime="20241125 10:54:43.985"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:43.985" endtime="20241125 10:54:43.985"/>
</return>
<status status="PASS" starttime="20241125 10:54:43.965" endtime="20241125 10:54:43.985"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.959" endtime="20241125 10:54:43.985"/>
</kw>
<status status="PASS" starttime="20241125 10:54:39.920" endtime="20241125 10:54:43.986"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.986" endtime="20241125 10:54:43.986"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:43.986" endtime="20241125 10:54:43.986"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.986" endtime="20241125 10:54:43.986"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.986" endtime="20241125 10:54:43.986"/>
</branch>
<status status="PASS" starttime="20241125 10:54:39.920" endtime="20241125 10:54:43.986"/>
</try>
<status status="PASS" starttime="20241125 10:54:39.920" endtime="20241125 10:54:43.986"/>
</iter>
<iter>
<var name="${testCaseFlowSequence}">{'id': '5', 'testCaseId': '2', 'flowId': '2', 'order': 1, 'createdAt': '2024-11-25T05:22:01.703Z', 'updatedAt': '2024-11-25T05:24:38.008Z', 'flow': {'id': '2', 'name': 'Navigate to profile', 'projectI...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.988" level="INFO">${flow} = {'id': '2', 'name': 'Navigate to profile', 'projectId': '1', 'createdAt': '2024-11-24T16:52:30.660Z', 'updatedAt': '2024-11-24T16:52:30.660Z', 'flowActionSequences': [{'id': '5', 'actionId': '5', 'flo...</msg>
<status status="PASS" starttime="20241125 10:54:43.987" endtime="20241125 10:54:43.988"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.988" endtime="20241125 10:54:43.988"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:43.991" endtime="20241125 10:54:43.991"/>
</kw>
<msg timestamp="20241125 10:54:43.991" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.991" endtime="20241125 10:54:43.991"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.992" level="INFO">${values} = [{'id': '5', 'actionId': '5', 'flowId': '2', 'order': 0, 'createdAt': '2024-11-24T16:52:30.906Z', 'updatedAt': '2024-11-24T16:52:30.906Z', 'action': {'id': '5', 'name': 'Click profile header icon', 't...</msg>
<status status="PASS" starttime="20241125 10:54:43.991" endtime="20241125 10:54:43.992"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.992" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.992" endtime="20241125 10:54:43.992"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.992" endtime="20241125 10:54:43.992"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.993" endtime="20241125 10:54:43.993"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.992" endtime="20241125 10:54:43.993"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.992" endtime="20241125 10:54:43.993"/>
</if>
<status status="PASS" starttime="20241125 10:54:43.991" endtime="20241125 10:54:43.993"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.991" endtime="20241125 10:54:43.993"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:43.993" endtime="20241125 10:54:43.993"/>
</return>
<msg timestamp="20241125 10:54:43.993" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:43.990" endtime="20241125 10:54:43.993"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '5', 'actionId': '5', 'flowId': '2', 'order': 0, 'createdAt': '2024-11-24T16:52:30.906Z', 'updatedAt': '2024-11-24T16:52:30.906Z', 'action': {'id': '5', 'name': 'Click profile header icon', 'ty...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.995" level="INFO">${action} = {'id': '5', 'name': 'Click profile header icon', 'type': 'CLICK', 'selectorI': '4', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:51:14.954Z', 'updatedAt': '2024-11-24T16:51:14.954Z',...</msg>
<status status="PASS" starttime="20241125 10:54:43.994" endtime="20241125 10:54:43.995"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:43.995" endtime="20241125 10:54:43.995"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:43.996" level="INFO">${input} = {'id': '5', 'actionId': '5', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:51:15.169Z', 'updatedAt': '2024-11-24T16:51:15.169Z'}</msg>
<status status="PASS" starttime="20241125 10:54:43.996" endtime="20241125 10:54:43.996"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.998" endtime="20241125 10:54:43.998"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:43.998" endtime="20241125 10:54:43.998"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.997" endtime="20241125 10:54:43.998"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.997" endtime="20241125 10:54:43.998"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:43.999" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:43.999" endtime="20241125 10:54:43.999"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:44.000" endtime="20241125 10:54:44.000"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:43.999" endtime="20241125 10:54:44.000"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:44.000" endtime="20241125 10:54:44.000"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.000" endtime="20241125 10:54:44.000"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:44.426" level="INFO">Waited for Element with selector id=headerProfileImage at state attached</msg>
<status status="PASS" starttime="20241125 10:54:44.007" endtime="20241125 10:54:44.426"/>
</kw>
<msg timestamp="20241125 10:54:44.426" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:44.006" endtime="20241125 10:54:44.426"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:44.426" endtime="20241125 10:54:44.426"/>
</return>
<status status="PASS" starttime="20241125 10:54:44.006" endtime="20241125 10:54:44.426"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.427" endtime="20241125 10:54:44.427"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.428" endtime="20241125 10:54:44.428"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.426" endtime="20241125 10:54:44.428"/>
</branch>
<status status="PASS" starttime="20241125 10:54:44.006" endtime="20241125 10:54:44.428"/>
</try>
<msg timestamp="20241125 10:54:44.429" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:44.006" endtime="20241125 10:54:44.429"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:44.429" endtime="20241125 10:54:44.429"/>
</return>
<status status="PASS" starttime="20241125 10:54:44.005" endtime="20241125 10:54:44.429"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:44.430" endtime="20241125 10:54:44.430"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:44.429" endtime="20241125 10:54:44.430"/>
</branch>
<status status="PASS" starttime="20241125 10:54:44.005" endtime="20241125 10:54:44.430"/>
</try>
<msg timestamp="20241125 10:54:44.430" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:44.004" endtime="20241125 10:54:44.430"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.433" endtime="20241125 10:54:44.433"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.433" endtime="20241125 10:54:44.433"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.433" endtime="20241125 10:54:44.433"/>
</branch>
<status status="PASS" starttime="20241125 10:54:44.433" endtime="20241125 10:54:44.434"/>
</if>
<status status="PASS" starttime="20241125 10:54:44.431" endtime="20241125 10:54:44.434"/>
</kw>
<status status="PASS" starttime="20241125 10:54:44.004" endtime="20241125 10:54:44.434"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:44.459" level="INFO">Waited for Element with selector id=headerProfileImage at state visible</msg>
<status status="PASS" starttime="20241125 10:54:44.440" endtime="20241125 10:54:44.459"/>
</kw>
<msg timestamp="20241125 10:54:44.459" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:44.439" endtime="20241125 10:54:44.459"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:44.459" endtime="20241125 10:54:44.459"/>
</return>
<status status="PASS" starttime="20241125 10:54:44.439" endtime="20241125 10:54:44.460"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.460" endtime="20241125 10:54:44.460"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.460" endtime="20241125 10:54:44.460"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.460" endtime="20241125 10:54:44.461"/>
</branch>
<status status="PASS" starttime="20241125 10:54:44.438" endtime="20241125 10:54:44.461"/>
</try>
<msg timestamp="20241125 10:54:44.461" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:44.438" endtime="20241125 10:54:44.461"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:44.462" endtime="20241125 10:54:44.462"/>
</return>
<msg timestamp="20241125 10:54:44.462" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:44.437" endtime="20241125 10:54:44.462"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.465" endtime="20241125 10:54:44.465"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.465" endtime="20241125 10:54:44.465"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.465" endtime="20241125 10:54:44.465"/>
</branch>
<status status="PASS" starttime="20241125 10:54:44.464" endtime="20241125 10:54:44.465"/>
</if>
<status status="PASS" starttime="20241125 10:54:44.464" endtime="20241125 10:54:44.465"/>
</kw>
<status status="PASS" starttime="20241125 10:54:44.436" endtime="20241125 10:54:44.466"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:44.505" level="INFO">Waited for Element with selector id=headerProfileImage at state enabled</msg>
<status status="PASS" starttime="20241125 10:54:44.470" endtime="20241125 10:54:44.505"/>
</kw>
<msg timestamp="20241125 10:54:44.506" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:44.469" endtime="20241125 10:54:44.506"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:44.506" endtime="20241125 10:54:44.506"/>
</return>
<status status="PASS" starttime="20241125 10:54:44.469" endtime="20241125 10:54:44.506"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.506" endtime="20241125 10:54:44.507"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.507" endtime="20241125 10:54:44.507"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.506" endtime="20241125 10:54:44.507"/>
</branch>
<status status="PASS" starttime="20241125 10:54:44.469" endtime="20241125 10:54:44.507"/>
</try>
<msg timestamp="20241125 10:54:44.507" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:44.469" endtime="20241125 10:54:44.507"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:44.507" endtime="20241125 10:54:44.507"/>
</return>
<msg timestamp="20241125 10:54:44.508" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241125 10:54:44.468" endtime="20241125 10:54:44.508"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.511" endtime="20241125 10:54:44.511"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.511" endtime="20241125 10:54:44.512"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.510" endtime="20241125 10:54:44.512"/>
</branch>
<status status="PASS" starttime="20241125 10:54:44.510" endtime="20241125 10:54:44.512"/>
</if>
<status status="PASS" starttime="20241125 10:54:44.509" endtime="20241125 10:54:44.512"/>
</kw>
<status status="PASS" starttime="20241125 10:54:44.467" endtime="20241125 10:54:44.513"/>
</kw>
<status status="PASS" starttime="20241125 10:54:44.002" endtime="20241125 10:54:44.513"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:44.514" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:54:44.513" endtime="20241125 10:54:44.514"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.516" endtime="20241125 10:54:44.516"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.515" endtime="20241125 10:54:44.516"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:44.516" endtime="20241125 10:54:44.516"/>
</kw>
<status status="PASS" starttime="20241125 10:54:44.516" endtime="20241125 10:54:44.517"/>
</branch>
<status status="PASS" starttime="20241125 10:54:44.515" endtime="20241125 10:54:44.517"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241125 10:54:44.517" endtime="20241125 10:54:44.934"/>
</kw>
<status status="PASS" starttime="20241125 10:54:44.517" endtime="20241125 10:54:44.934"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.935" endtime="20241125 10:54:44.935"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.935" endtime="20241125 10:54:44.935"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.934" endtime="20241125 10:54:44.935"/>
</branch>
<status status="PASS" starttime="20241125 10:54:44.517" endtime="20241125 10:54:44.935"/>
</try>
<status status="PASS" starttime="20241125 10:54:44.515" endtime="20241125 10:54:44.936"/>
</kw>
<status status="PASS" starttime="20241125 10:54:44.514" endtime="20241125 10:54:44.936"/>
</kw>
<status status="PASS" starttime="20241125 10:54:44.514" endtime="20241125 10:54:44.936"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.937" endtime="20241125 10:54:44.937"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.936" endtime="20241125 10:54:44.937"/>
</branch>
<status status="PASS" starttime="20241125 10:54:44.514" endtime="20241125 10:54:44.937"/>
</try>
<status status="PASS" starttime="20241125 10:54:44.002" endtime="20241125 10:54:44.938"/>
</kw>
<status status="PASS" starttime="20241125 10:54:44.000" endtime="20241125 10:54:44.938"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.941" endtime="20241125 10:54:44.941"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.944" endtime="20241125 10:54:44.945"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.938" endtime="20241125 10:54:44.945"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.949" endtime="20241125 10:54:44.949"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.945" endtime="20241125 10:54:44.949"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.954" endtime="20241125 10:54:44.955"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.949" endtime="20241125 10:54:44.955"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.957" endtime="20241125 10:54:44.957"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.955" endtime="20241125 10:54:44.958"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.959" endtime="20241125 10:54:44.959"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.958" endtime="20241125 10:54:44.959"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.963" endtime="20241125 10:54:44.964"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.964" endtime="20241125 10:54:44.964"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.964" endtime="20241125 10:54:44.965"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.965" endtime="20241125 10:54:44.965"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.965" endtime="20241125 10:54:44.965"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:44.964" endtime="20241125 10:54:44.965"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:44.960" endtime="20241125 10:54:44.965"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:44.976" endtime="20241125 10:54:44.977"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.986" endtime="20241125 10:54:44.986"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.966" endtime="20241125 10:54:44.987"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.991" endtime="20241125 10:54:44.991"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.993" endtime="20241125 10:54:44.993"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.992" endtime="20241125 10:54:44.993"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:44.996" endtime="20241125 10:54:44.997"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.995" endtime="20241125 10:54:44.997"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:44.992" endtime="20241125 10:54:44.998"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:44.987" endtime="20241125 10:54:44.998"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:45.009" endtime="20241125 10:54:45.009"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.019" endtime="20241125 10:54:45.019"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:44.998" endtime="20241125 10:54:45.019"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.021" endtime="20241125 10:54:45.021"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.023" endtime="20241125 10:54:45.023"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.022" endtime="20241125 10:54:45.023"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.024" endtime="20241125 10:54:45.024"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.023" endtime="20241125 10:54:45.024"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:45.021" endtime="20241125 10:54:45.025"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:45.019" endtime="20241125 10:54:45.025"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.035" endtime="20241125 10:54:45.035"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.025" endtime="20241125 10:54:45.035"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:45.053" endtime="20241125 10:54:45.053"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.054" endtime="20241125 10:54:45.054"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.036" endtime="20241125 10:54:45.054"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.999" endtime="20241125 10:54:45.055"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:45.055" endtime="20241125 10:54:45.056"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:45.057" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:45.056" endtime="20241125 10:54:45.057"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:45.057" endtime="20241125 10:54:45.058"/>
</return>
<msg timestamp="20241125 10:54:45.058" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:43.998" endtime="20241125 10:54:45.058"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.065" level="INFO">${key} = testCaseFlowSequenceId:5::flowActionSequenceId:5</msg>
<status status="PASS" starttime="20241125 10:54:45.062" endtime="20241125 10:54:45.065"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.067" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:45.067" endtime="20241125 10:54:45.067"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.068" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:45.068" endtime="20241125 10:54:45.068"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.069" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:45.069" endtime="20241125 10:54:45.070"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.071" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:45.070" endtime="20241125 10:54:45.071"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.072" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.071" endtime="20241125 10:54:45.072"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.073" level="INFO">${customTargetValue} = bharani@ideas2it.ai</msg>
<status status="PASS" starttime="20241125 10:54:45.072" endtime="20241125 10:54:45.073"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.074" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:45.073" endtime="20241125 10:54:45.074"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:45.075" endtime="20241125 10:54:45.076"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:45.084" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:6::flowActionSequenceId:7'.</msg>
<status status="FAIL" starttime="20241125 10:54:45.083" endtime="20241125 10:54:45.085"/>
</kw>
<msg timestamp="20241125 10:54:45.085" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:45.082" endtime="20241125 10:54:45.085"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.086" endtime="20241125 10:54:45.086"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.087" endtime="20241125 10:54:45.087"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.087" endtime="20241125 10:54:45.087"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.088" endtime="20241125 10:54:45.088"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.088" endtime="20241125 10:54:45.089"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:45.087" endtime="20241125 10:54:45.090"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:45.086" endtime="20241125 10:54:45.090"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.085" endtime="20241125 10:54:45.090"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:45.090" endtime="20241125 10:54:45.090"/>
</return>
<msg timestamp="20241125 10:54:45.091" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:45.081" endtime="20241125 10:54:45.092"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:45.105" endtime="20241125 10:54:45.113"/>
</kw>
<msg timestamp="20241125 10:54:45.115" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.103" endtime="20241125 10:54:45.116"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.119" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:45.118" endtime="20241125 10:54:45.120"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.122" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.121" endtime="20241125 10:54:45.122"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.120" endtime="20241125 10:54:45.123"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.124" endtime="20241125 10:54:45.128"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.123" endtime="20241125 10:54:45.132"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.120" endtime="20241125 10:54:45.132"/>
</if>
<status status="PASS" starttime="20241125 10:54:45.118" endtime="20241125 10:54:45.132"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.116" endtime="20241125 10:54:45.133"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:45.133" endtime="20241125 10:54:45.133"/>
</return>
<msg timestamp="20241125 10:54:45.134" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.100" endtime="20241125 10:54:45.134"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:45.136" endtime="20241125 10:54:45.136"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:45.136" endtime="20241125 10:54:45.136"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:45.135" endtime="20241125 10:54:45.136"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.138" endtime="20241125 10:54:45.139"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:45.139" endtime="20241125 10:54:45.139"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:45.137" endtime="20241125 10:54:45.140"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.141" endtime="20241125 10:54:45.142"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:45.142" endtime="20241125 10:54:45.142"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:45.140" endtime="20241125 10:54:45.143"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:45.137" endtime="20241125 10:54:45.145"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:45.137" endtime="20241125 10:54:45.147"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:45.137" endtime="20241125 10:54:45.147"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.149" endtime="20241125 10:54:45.149"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:45.149" endtime="20241125 10:54:45.149"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:45.148" endtime="20241125 10:54:45.149"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.150" endtime="20241125 10:54:45.150"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:45.151" endtime="20241125 10:54:45.151"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:45.149" endtime="20241125 10:54:45.151"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:45.148" endtime="20241125 10:54:45.151"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:45.148" endtime="20241125 10:54:45.152"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:45.148" endtime="20241125 10:54:45.152"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:45.135" endtime="20241125 10:54:45.153"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.134" endtime="20241125 10:54:45.153"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:45.155" endtime="20241125 10:54:45.155"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:45.155" endtime="20241125 10:54:45.156"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:45.155" endtime="20241125 10:54:45.156"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.158" endtime="20241125 10:54:45.158"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.157" endtime="20241125 10:54:45.158"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:45.157" endtime="20241125 10:54:45.159"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.161" endtime="20241125 10:54:45.163"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:45.163" endtime="20241125 10:54:45.164"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:45.160" endtime="20241125 10:54:45.164"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.165" endtime="20241125 10:54:45.165"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:45.165" endtime="20241125 10:54:45.165"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:45.164" endtime="20241125 10:54:45.166"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:45.160" endtime="20241125 10:54:45.166"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:45.159" endtime="20241125 10:54:45.166"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:45.159" endtime="20241125 10:54:45.166"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:45.154" endtime="20241125 10:54:45.166"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.153" endtime="20241125 10:54:45.167"/>
</if>
<status status="PASS" starttime="20241125 10:54:45.066" endtime="20241125 10:54:45.167"/>
</iter>
<status status="PASS" starttime="20241125 10:54:45.065" endtime="20241125 10:54:45.167"/>
</for>
<msg timestamp="20241125 10:54:45.168" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:54:45.059" endtime="20241125 10:54:45.168"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:45.168" endtime="20241125 10:54:45.169"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:45.177" endtime="20241125 10:54:45.178"/>
</kw>
<msg timestamp="20241125 10:54:45.178" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.177" endtime="20241125 10:54:45.178"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.180" level="INFO">${values} = {'id': '4', 'name': 'Profile icon', 'xpath': 'id=headerProfileImage', 'pageId': '2', 'createdAt': '2024-11-24T16:48:09.826Z', 'updatedAt': '2024-11-24T17:36:27.753Z'}</msg>
<status status="PASS" starttime="20241125 10:54:45.179" endtime="20241125 10:54:45.180"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.182" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.181" endtime="20241125 10:54:45.182"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.181" endtime="20241125 10:54:45.183"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.183" endtime="20241125 10:54:45.184"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.183" endtime="20241125 10:54:45.184"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.180" endtime="20241125 10:54:45.185"/>
</if>
<status status="PASS" starttime="20241125 10:54:45.179" endtime="20241125 10:54:45.185"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.178" endtime="20241125 10:54:45.185"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:45.185" endtime="20241125 10:54:45.186"/>
</return>
<msg timestamp="20241125 10:54:45.186" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.176" endtime="20241125 10:54:45.186"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.188" level="INFO">${xpath} = id=headerProfileImage</msg>
<status status="PASS" starttime="20241125 10:54:45.188" endtime="20241125 10:54:45.188"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.187" endtime="20241125 10:54:45.189"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.189" endtime="20241125 10:54:45.190"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.189" endtime="20241125 10:54:45.190"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.187" endtime="20241125 10:54:45.190"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:45.194" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '128', 'status': 'COMPLETED', 'actionName': 'Click profile header icon', 'actionType': 'CLICK', 'actionXpath': 'id=headerProfileImage', 'inputValue': '', 'errorMessage'...</msg>
<status status="PASS" starttime="20241125 10:54:45.191" endtime="20241125 10:54:45.194"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:45.196" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "128", "status": "COMPLETED", "actionName": "Click profile header icon", "actionType": "CLICK", "actionXpath": "id=headerProfileImage", "inputValue": "", "errorMessage"...</msg>
<status status="PASS" starttime="20241125 10:54:45.196" endtime="20241125 10:54:45.196"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:45.205" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:45.206" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:45.197" endtime="20241125 10:54:45.206"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:45.206" endtime="20241125 10:54:45.207"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:45.208" endtime="20241125 10:54:45.208"/>
</return>
<status status="PASS" starttime="20241125 10:54:45.195" endtime="20241125 10:54:45.208"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.169" endtime="20241125 10:54:45.209"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.994" endtime="20241125 10:54:45.209"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.211" endtime="20241125 10:54:45.211"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:45.212" endtime="20241125 10:54:45.212"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.213" endtime="20241125 10:54:45.213"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.210" endtime="20241125 10:54:45.213"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.994" endtime="20241125 10:54:45.213"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.994" endtime="20241125 10:54:45.214"/>
</iter>
<iter>
<var name="${flowActionSequence}">{'id': '6', 'actionId': '6', 'flowId': '2', 'order': 1, 'createdAt': '2024-11-24T16:52:30.906Z', 'updatedAt': '2024-11-24T16:52:30.906Z', 'action': {'id': '6', 'name': 'Click profile menu icon', 'type...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.217" level="INFO">${action} = {'id': '6', 'name': 'Click profile menu icon', 'type': 'CLICK', 'selectorI': '5', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:51:31.795Z', 'updatedAt': '2024-11-24T16:51:31.795Z', '...</msg>
<status status="PASS" starttime="20241125 10:54:45.215" endtime="20241125 10:54:45.217"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:45.217" endtime="20241125 10:54:45.219"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:45.220" level="INFO">${input} = {'id': '6', 'actionId': '6', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:51:31.968Z', 'updatedAt': '2024-11-24T16:51:31.968Z'}</msg>
<status status="PASS" starttime="20241125 10:54:45.219" endtime="20241125 10:54:45.220"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.222" endtime="20241125 10:54:45.222"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.223" endtime="20241125 10:54:45.224"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.221" endtime="20241125 10:54:45.225"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.220" endtime="20241125 10:54:45.225"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:45.231" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:45.228" endtime="20241125 10:54:45.231"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:45.233" endtime="20241125 10:54:45.233"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.233" endtime="20241125 10:54:45.233"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:45.234" endtime="20241125 10:54:45.234"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.234" endtime="20241125 10:54:45.234"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:45.436" level="INFO">Waited for Element with selector //p[text()="Profile"] at state attached</msg>
<status status="PASS" starttime="20241125 10:54:45.258" endtime="20241125 10:54:45.437"/>
</kw>
<msg timestamp="20241125 10:54:45.437" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.256" endtime="20241125 10:54:45.437"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:45.437" endtime="20241125 10:54:45.437"/>
</return>
<status status="PASS" starttime="20241125 10:54:45.256" endtime="20241125 10:54:45.438"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.438" endtime="20241125 10:54:45.439"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.439" endtime="20241125 10:54:45.439"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.438" endtime="20241125 10:54:45.439"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.255" endtime="20241125 10:54:45.439"/>
</try>
<msg timestamp="20241125 10:54:45.440" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.254" endtime="20241125 10:54:45.440"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:45.440" endtime="20241125 10:54:45.440"/>
</return>
<status status="PASS" starttime="20241125 10:54:45.250" endtime="20241125 10:54:45.441"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:45.441" endtime="20241125 10:54:45.441"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:45.441" endtime="20241125 10:54:45.441"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.250" endtime="20241125 10:54:45.441"/>
</try>
<msg timestamp="20241125 10:54:45.442" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.250" endtime="20241125 10:54:45.442"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.450" endtime="20241125 10:54:45.450"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.450" endtime="20241125 10:54:45.451"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.449" endtime="20241125 10:54:45.451"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.449" endtime="20241125 10:54:45.451"/>
</if>
<status status="PASS" starttime="20241125 10:54:45.446" endtime="20241125 10:54:45.451"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.248" endtime="20241125 10:54:45.452"/>
</kw>
<kw name="fail-if-not-visible-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not visible
after waiting for the element state</doc>
<kw name="is-visible-after-wait" library="UTIL_BrowserHelper">
<var>${is_visible}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is visible
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_VISIBLE}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:45.792" level="INFO">Waited for Element with selector //p[text()="Profile"] at state visible</msg>
<status status="PASS" starttime="20241125 10:54:45.468" endtime="20241125 10:54:45.793"/>
</kw>
<msg timestamp="20241125 10:54:45.795" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.467" endtime="20241125 10:54:45.796"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:45.796" endtime="20241125 10:54:45.797"/>
</return>
<status status="PASS" starttime="20241125 10:54:45.467" endtime="20241125 10:54:45.798"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.799" endtime="20241125 10:54:45.799"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.800" endtime="20241125 10:54:45.800"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.798" endtime="20241125 10:54:45.801"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.467" endtime="20241125 10:54:45.801"/>
</try>
<msg timestamp="20241125 10:54:45.802" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.466" endtime="20241125 10:54:45.802"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:45.802" endtime="20241125 10:54:45.803"/>
</return>
<msg timestamp="20241125 10:54:45.803" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.460" endtime="20241125 10:54:45.803"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_visible == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.810" endtime="20241125 10:54:45.812"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.813" endtime="20241125 10:54:45.814"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.809" endtime="20241125 10:54:45.814"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.808" endtime="20241125 10:54:45.814"/>
</if>
<status status="PASS" starttime="20241125 10:54:45.806" endtime="20241125 10:54:45.815"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.458" endtime="20241125 10:54:45.815"/>
</kw>
<kw name="fail-if-not-enabled-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not enabled
after waiting for the element state</doc>
<kw name="is-enabled-after-wait" library="UTIL_BrowserHelper">
<var>${is_enabled}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is enabled
after waiting for the element state</doc>
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ENABLED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:45.904" level="INFO">Waited for Element with selector //p[text()="Profile"] at state enabled</msg>
<status status="PASS" starttime="20241125 10:54:45.832" endtime="20241125 10:54:45.904"/>
</kw>
<msg timestamp="20241125 10:54:45.905" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.831" endtime="20241125 10:54:45.905"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:45.905" endtime="20241125 10:54:45.905"/>
</return>
<status status="PASS" starttime="20241125 10:54:45.830" endtime="20241125 10:54:45.905"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.906" endtime="20241125 10:54:45.906"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.907" endtime="20241125 10:54:45.907"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.906" endtime="20241125 10:54:45.907"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.830" endtime="20241125 10:54:45.907"/>
</try>
<msg timestamp="20241125 10:54:45.907" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.826" endtime="20241125 10:54:45.908"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:45.908" endtime="20241125 10:54:45.908"/>
</return>
<msg timestamp="20241125 10:54:45.908" level="INFO">${is_enabled} = True</msg>
<status status="PASS" starttime="20241125 10:54:45.821" endtime="20241125 10:54:45.908"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_enabled == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.915" endtime="20241125 10:54:45.916"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.916" endtime="20241125 10:54:45.917"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.915" endtime="20241125 10:54:45.917"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.914" endtime="20241125 10:54:45.917"/>
</if>
<status status="PASS" starttime="20241125 10:54:45.912" endtime="20241125 10:54:45.917"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.820" endtime="20241125 10:54:45.917"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.241" endtime="20241125 10:54:45.918"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${retry_info}</var>
<arg>is_first_try=${True}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:45.919" level="INFO">${retry_info} = {'is_first_try': True}</msg>
<status status="PASS" starttime="20241125 10:54:45.918" endtime="20241125 10:54:45.919"/>
</kw>
<try>
<branch type="TRY">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${retry_count}</arg>
<arg>1s</arg>
<arg>COMP_Button.perform-click-and-validate-post-condition</arg>
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="perform-click-and-validate-post-condition" library="COMP_Button">
<arg>${retry_info}</arg>
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to perform the click operation
And validate if the action is done successfully</doc>
<if>
<branch type="IF" condition="${retry_info}[is_first_try] == ${False}">
<kw name="validate-precondition" library="COMP_Button">
<arg>${selector}</arg>
<tag>robot:private</tag>
<doc>Method used to validate if the selector is actually a button
Also used to validate the button element before performing any action</doc>
<status status="NOT RUN" starttime="20241125 10:54:45.923" endtime="20241125 10:54:45.923"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:45.923" endtime="20241125 10:54:45.924"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${retry_info}</arg>
<arg>is_first_try=${False}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:45.924" endtime="20241125 10:54:45.925"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.924" endtime="20241125 10:54:45.925"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.922" endtime="20241125 10:54:45.926"/>
</if>
<try>
<branch type="TRY">
<kw name="Click" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>left</arg>
<arg>1</arg>
<tag>PageContent</tag>
<tag>Setter</tag>
<doc>Simulates mouse click on the element found by ``selector``.</doc>
<status status="PASS" starttime="20241125 10:54:45.928" endtime="20241125 10:54:46.157"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.926" endtime="20241125 10:54:46.158"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="Log To Console" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.158" endtime="20241125 10:54:46.159"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>UNKNOWN_ERROR_OCCURRED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.160" endtime="20241125 10:54:46.160"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.158" endtime="20241125 10:54:46.160"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.926" endtime="20241125 10:54:46.161"/>
</try>
<status status="PASS" starttime="20241125 10:54:45.921" endtime="20241125 10:54:46.161"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.920" endtime="20241125 10:54:46.162"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.920" endtime="20241125 10:54:46.162"/>
</branch>
<branch type="EXCEPT" variable="${err_msg}">
<kw name="ex-throw-actual-message-from-retry-error-message" library="EX_Exception">
<arg>${err_msg}</arg>
<tag>exception</tag>
<doc>Method used to get the actual message from string(Error msg from retry)</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.163" endtime="20241125 10:54:46.163"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.162" endtime="20241125 10:54:46.164"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.919" endtime="20241125 10:54:46.164"/>
</try>
<status status="PASS" starttime="20241125 10:54:45.238" endtime="20241125 10:54:46.165"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.235" endtime="20241125 10:54:46.165"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.169" endtime="20241125 10:54:46.169"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.173" endtime="20241125 10:54:46.173"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.165" endtime="20241125 10:54:46.173"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.175" endtime="20241125 10:54:46.176"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.173" endtime="20241125 10:54:46.176"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.185" endtime="20241125 10:54:46.185"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.176" endtime="20241125 10:54:46.186"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.190" endtime="20241125 10:54:46.191"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.186" endtime="20241125 10:54:46.191"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.194" endtime="20241125 10:54:46.195"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.191" endtime="20241125 10:54:46.195"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.198" endtime="20241125 10:54:46.199"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.199" endtime="20241125 10:54:46.200"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.199" endtime="20241125 10:54:46.200"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.200" endtime="20241125 10:54:46.200"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.200" endtime="20241125 10:54:46.200"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.199" endtime="20241125 10:54:46.201"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.195" endtime="20241125 10:54:46.201"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:46.212" endtime="20241125 10:54:46.212"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.219" endtime="20241125 10:54:46.219"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.201" endtime="20241125 10:54:46.219"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.222" endtime="20241125 10:54:46.222"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.223" endtime="20241125 10:54:46.223"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.222" endtime="20241125 10:54:46.223"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.223" endtime="20241125 10:54:46.224"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.223" endtime="20241125 10:54:46.224"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.222" endtime="20241125 10:54:46.224"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.220" endtime="20241125 10:54:46.224"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:46.240" endtime="20241125 10:54:46.240"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.250" endtime="20241125 10:54:46.250"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.224" endtime="20241125 10:54:46.251"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.255" endtime="20241125 10:54:46.255"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.257" endtime="20241125 10:54:46.257"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.256" endtime="20241125 10:54:46.257"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.258" endtime="20241125 10:54:46.259"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.257" endtime="20241125 10:54:46.260"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.256" endtime="20241125 10:54:46.261"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.251" endtime="20241125 10:54:46.261"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.268" endtime="20241125 10:54:46.269"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.262" endtime="20241125 10:54:46.269"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:46.288" endtime="20241125 10:54:46.289"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.289" endtime="20241125 10:54:46.290"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.270" endtime="20241125 10:54:46.290"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.232" endtime="20241125 10:54:46.290"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:46.291" endtime="20241125 10:54:46.291"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:46.293" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:46.292" endtime="20241125 10:54:46.293"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:46.294" endtime="20241125 10:54:46.294"/>
</return>
<msg timestamp="20241125 10:54:46.295" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:45.226" endtime="20241125 10:54:46.295"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.298" level="INFO">${key} = testCaseFlowSequenceId:5::flowActionSequenceId:6</msg>
<status status="PASS" starttime="20241125 10:54:46.297" endtime="20241125 10:54:46.298"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.300" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:46.300" endtime="20241125 10:54:46.300"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.301" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:46.300" endtime="20241125 10:54:46.301"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.302" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:46.301" endtime="20241125 10:54:46.302"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.303" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:46.302" endtime="20241125 10:54:46.303"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.304" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.303" endtime="20241125 10:54:46.304"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.304" level="INFO">${customTargetValue} = bharani@ideas2it.ai</msg>
<status status="PASS" starttime="20241125 10:54:46.304" endtime="20241125 10:54:46.305"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.306" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:46.305" endtime="20241125 10:54:46.306"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:46.306" endtime="20241125 10:54:46.307"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<msg timestamp="20241125 10:54:46.313" level="FAIL">Dictionary does not contain key 'testCaseFlowSequenceId:6::flowActionSequenceId:7'.</msg>
<status status="FAIL" starttime="20241125 10:54:46.312" endtime="20241125 10:54:46.313"/>
</kw>
<msg timestamp="20241125 10:54:46.314" level="INFO">${no_none_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:46.311" endtime="20241125 10:54:46.314"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.315" endtime="20241125 10:54:46.315"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.315" endtime="20241125 10:54:46.316"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.315" endtime="20241125 10:54:46.316"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.316" endtime="20241125 10:54:46.316"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.316" endtime="20241125 10:54:46.317"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.315" endtime="20241125 10:54:46.317"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.314" endtime="20241125 10:54:46.317"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.314" endtime="20241125 10:54:46.317"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:46.317" endtime="20241125 10:54:46.318"/>
</return>
<msg timestamp="20241125 10:54:46.318" level="INFO">${is_source_exists} = False</msg>
<status status="PASS" starttime="20241125 10:54:46.310" endtime="20241125 10:54:46.318"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:46.323" endtime="20241125 10:54:46.324"/>
</kw>
<msg timestamp="20241125 10:54:46.324" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.323" endtime="20241125 10:54:46.324"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.326" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:46.325" endtime="20241125 10:54:46.326"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.328" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.327" endtime="20241125 10:54:46.328"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.327" endtime="20241125 10:54:46.329"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.329" endtime="20241125 10:54:46.330"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.329" endtime="20241125 10:54:46.330"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.326" endtime="20241125 10:54:46.330"/>
</if>
<status status="PASS" starttime="20241125 10:54:46.325" endtime="20241125 10:54:46.330"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.324" endtime="20241125 10:54:46.330"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:46.331" endtime="20241125 10:54:46.331"/>
</return>
<msg timestamp="20241125 10:54:46.332" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.321" endtime="20241125 10:54:46.332"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:46.333" endtime="20241125 10:54:46.334"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.333" endtime="20241125 10:54:46.334"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.333" endtime="20241125 10:54:46.334"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.336" endtime="20241125 10:54:46.336"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:46.337" endtime="20241125 10:54:46.337"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.335" endtime="20241125 10:54:46.337"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.339" endtime="20241125 10:54:46.339"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:46.339" endtime="20241125 10:54:46.340"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.337" endtime="20241125 10:54:46.340"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.335" endtime="20241125 10:54:46.340"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.335" endtime="20241125 10:54:46.340"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.335" endtime="20241125 10:54:46.341"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.342" endtime="20241125 10:54:46.343"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:46.343" endtime="20241125 10:54:46.343"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.342" endtime="20241125 10:54:46.343"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.344" endtime="20241125 10:54:46.345"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:46.345" endtime="20241125 10:54:46.345"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.344" endtime="20241125 10:54:46.345"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.341" endtime="20241125 10:54:46.345"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.341" endtime="20241125 10:54:46.346"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.341" endtime="20241125 10:54:46.346"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.333" endtime="20241125 10:54:46.346"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.332" endtime="20241125 10:54:46.347"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:46.350" endtime="20241125 10:54:46.350"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.349" endtime="20241125 10:54:46.350"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.349" endtime="20241125 10:54:46.350"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.351" endtime="20241125 10:54:46.352"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.351" endtime="20241125 10:54:46.352"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.351" endtime="20241125 10:54:46.352"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.354" endtime="20241125 10:54:46.354"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:46.355" endtime="20241125 10:54:46.355"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.354" endtime="20241125 10:54:46.355"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.356" endtime="20241125 10:54:46.356"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:46.357" endtime="20241125 10:54:46.357"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.355" endtime="20241125 10:54:46.357"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.353" endtime="20241125 10:54:46.357"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.353" endtime="20241125 10:54:46.358"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.353" endtime="20241125 10:54:46.358"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.349" endtime="20241125 10:54:46.358"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.347" endtime="20241125 10:54:46.358"/>
</if>
<status status="PASS" starttime="20241125 10:54:46.299" endtime="20241125 10:54:46.359"/>
</iter>
<status status="PASS" starttime="20241125 10:54:46.298" endtime="20241125 10:54:46.359"/>
</for>
<msg timestamp="20241125 10:54:46.360" level="INFO">${assertion_message} = None</msg>
<status status="PASS" starttime="20241125 10:54:46.295" endtime="20241125 10:54:46.360"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:46.361" endtime="20241125 10:54:46.362"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:46.373" endtime="20241125 10:54:46.373"/>
</kw>
<msg timestamp="20241125 10:54:46.374" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.372" endtime="20241125 10:54:46.374"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.380" level="INFO">${values} = {'id': '5', 'name': 'Profile menu icon', 'xpath': '//p[text()="Profile"]', 'pageId': '2', 'createdAt': '2024-11-24T16:49:21.505Z', 'updatedAt': '2024-11-24T16:49:21.505Z'}</msg>
<status status="PASS" starttime="20241125 10:54:46.375" endtime="20241125 10:54:46.380"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.383" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.382" endtime="20241125 10:54:46.383"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.382" endtime="20241125 10:54:46.383"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.385" endtime="20241125 10:54:46.385"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.384" endtime="20241125 10:54:46.385"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.381" endtime="20241125 10:54:46.385"/>
</if>
<status status="PASS" starttime="20241125 10:54:46.375" endtime="20241125 10:54:46.386"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.374" endtime="20241125 10:54:46.386"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:46.386" endtime="20241125 10:54:46.387"/>
</return>
<msg timestamp="20241125 10:54:46.388" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.371" endtime="20241125 10:54:46.388"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.390" level="INFO">${xpath} = //p[text()="Profile"]</msg>
<status status="PASS" starttime="20241125 10:54:46.389" endtime="20241125 10:54:46.390"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.389" endtime="20241125 10:54:46.391"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.392" endtime="20241125 10:54:46.392"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.391" endtime="20241125 10:54:46.396"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.388" endtime="20241125 10:54:46.397"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:46.413" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '129', 'status': 'COMPLETED', 'actionName': 'Click profile menu icon', 'actionType': 'CLICK', 'actionXpath': '//p[text()="Profile"]', 'inputValue': '', 'errorMessage': ...</msg>
<status status="PASS" starttime="20241125 10:54:46.398" endtime="20241125 10:54:46.413"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:46.418" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "129", "status": "COMPLETED", "actionName": "Click profile menu icon", "actionType": "CLICK", "actionXpath": "//p[text()=\"Profile\"]", "inputValue": "", "errorMessage"...</msg>
<status status="PASS" starttime="20241125 10:54:46.417" endtime="20241125 10:54:46.418"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:46.435" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:46.436" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:46.419" endtime="20241125 10:54:46.436"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:46.437" endtime="20241125 10:54:46.438"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:46.438" endtime="20241125 10:54:46.438"/>
</return>
<status status="PASS" starttime="20241125 10:54:46.414" endtime="20241125 10:54:46.439"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.362" endtime="20241125 10:54:46.440"/>
</kw>
<status status="PASS" starttime="20241125 10:54:45.215" endtime="20241125 10:54:46.440"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.441" endtime="20241125 10:54:46.441"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:46.442" endtime="20241125 10:54:46.442"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.444" endtime="20241125 10:54:46.444"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.440" endtime="20241125 10:54:46.444"/>
</branch>
<status status="PASS" starttime="20241125 10:54:45.215" endtime="20241125 10:54:46.445"/>
</try>
<status status="PASS" starttime="20241125 10:54:45.214" endtime="20241125 10:54:46.445"/>
</iter>
<status status="PASS" starttime="20241125 10:54:43.994" endtime="20241125 10:54:46.446"/>
</for>
<status status="PASS" starttime="20241125 10:54:43.993" endtime="20241125 10:54:46.446"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.993" endtime="20241125 10:54:46.446"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>errorMessage=${errorMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:46.452" level="INFO">${response_message} = {'testCaseFlowSequenceHistoryId': '65', 'status': 'COMPLETED', 'errorMessage': ''}</msg>
<status status="PASS" starttime="20241125 10:54:46.450" endtime="20241125 10:54:46.452"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:46.456" level="INFO">${json_response} = {"testCaseFlowSequenceHistoryId": "65", "status": "COMPLETED", "errorMessage": ""}</msg>
<status status="PASS" starttime="20241125 10:54:46.454" endtime="20241125 10:54:46.457"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:46.468" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:46.469" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:46.457" endtime="20241125 10:54:46.469"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:46.469" endtime="20241125 10:54:46.471"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:46.472" endtime="20241125 10:54:46.473"/>
</return>
<status status="PASS" starttime="20241125 10:54:46.453" endtime="20241125 10:54:46.474"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.447" endtime="20241125 10:54:46.474"/>
</kw>
<status status="PASS" starttime="20241125 10:54:43.987" endtime="20241125 10:54:46.476"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.479" endtime="20241125 10:54:46.479"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:46.480" endtime="20241125 10:54:46.480"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.480" endtime="20241125 10:54:46.481"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.478" endtime="20241125 10:54:46.481"/>
</branch>
<status status="PASS" starttime="20241125 10:54:43.987" endtime="20241125 10:54:46.481"/>
</try>
<status status="PASS" starttime="20241125 10:54:43.987" endtime="20241125 10:54:46.482"/>
</iter>
<iter>
<var name="${testCaseFlowSequence}">{'id': '6', 'testCaseId': '2', 'flowId': '3', 'order': 2, 'createdAt': '2024-11-25T05:22:01.703Z', 'updatedAt': '2024-11-25T05:24:38.009Z', 'flow': {'id': '3', 'name': 'Get Profile information', 'proj...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${flow}</var>
<arg>${testCaseFlowSequence}[flow]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.484" level="INFO">${flow} = {'id': '3', 'name': 'Get Profile information', 'projectId': '1', 'createdAt': '2024-11-24T16:52:52.554Z', 'updatedAt': '2024-11-24T16:52:52.554Z', 'flowActionSequences': [{'id': '7', 'actionId': '7', ...</msg>
<status status="PASS" starttime="20241125 10:54:46.483" endtime="20241125 10:54:46.484"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Flow Name: ${flow}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:46.485" endtime="20241125 10:54:46.486"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_flow_action_sequences_exists}</var>
<arg>${flow}</arg>
<arg>flowActionSequences</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:46.499" endtime="20241125 10:54:46.500"/>
</kw>
<msg timestamp="20241125 10:54:46.500" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.498" endtime="20241125 10:54:46.500"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.502" level="INFO">${values} = [{'id': '7', 'actionId': '7', 'flowId': '3', 'order': 0, 'createdAt': '2024-11-24T16:52:52.808Z', 'updatedAt': '2024-11-24T16:52:52.808Z', 'action': {'id': '7', 'name': 'Get profile email', 'type': 'G...</msg>
<status status="PASS" starttime="20241125 10:54:46.501" endtime="20241125 10:54:46.503"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.506" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.505" endtime="20241125 10:54:46.506"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.504" endtime="20241125 10:54:46.506"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.507" endtime="20241125 10:54:46.508"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.507" endtime="20241125 10:54:46.508"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.503" endtime="20241125 10:54:46.508"/>
</if>
<status status="PASS" starttime="20241125 10:54:46.501" endtime="20241125 10:54:46.510"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.500" endtime="20241125 10:54:46.510"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:46.510" endtime="20241125 10:54:46.511"/>
</return>
<msg timestamp="20241125 10:54:46.512" level="INFO">${is_flow_action_sequences_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.497" endtime="20241125 10:54:46.512"/>
</kw>
<if>
<branch type="IF" condition="$is_flow_action_sequences_exists">
<for flavor="IN">
<var>${flowActionSequence}</var>
<value>@{flow}[flowActionSequences]</value>
<iter>
<var name="${flowActionSequence}">{'id': '7', 'actionId': '7', 'flowId': '3', 'order': 0, 'createdAt': '2024-11-24T16:52:52.808Z', 'updatedAt': '2024-11-24T16:52:52.808Z', 'action': {'id': '7', 'name': 'Get profile email', 'type': 'GE...</var>
<try>
<branch type="TRY">
<kw name="Set Variable" library="BuiltIn">
<var>${action}</var>
<arg>${flowActionSequence}[action]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.518" level="INFO">${action} = {'id': '7', 'name': 'Get profile email', 'type': 'GET_TEXT', 'selectorI': '6', 'valueRege': '', 'projectId': '1', 'createdAt': '2024-11-24T16:51:50.748Z', 'updatedAt': '2024-11-24T16:51:50.748Z', 'sel...</msg>
<status status="PASS" starttime="20241125 10:54:46.517" endtime="20241125 10:54:46.518"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Action Name: ${action}[name]</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:46.519" endtime="20241125 10:54:46.520"/>
</kw>
<kw name="Get Selected Input" library="Common_util">
<var>${input}</var>
<arg>${flowActionSequence}</arg>
<msg timestamp="20241125 10:54:46.521" level="INFO">${input} = {'id': '7', 'actionId': '7', 'name': 'Input 01', 'value': '', 'waitAfterAction': '0', 'isDefault': True, 'createdAt': '2024-11-24T16:51:50.920Z', 'updatedAt': '2024-11-24T16:51:50.920Z'}</msg>
<status status="PASS" starttime="20241125 10:54:46.520" endtime="20241125 10:54:46.521"/>
</kw>
<if>
<branch type="IF" condition="$input == $None">
<kw name="Log To Console" library="BuiltIn">
<arg>Input not found for this action. Terminate the test case here!!!</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.522" endtime="20241125 10:54:46.523"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INPUT_NOT_FOUND_IN_ACTION</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.524" endtime="20241125 10:54:46.525"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.522" endtime="20241125 10:54:46.525"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.521" endtime="20241125 10:54:46.526"/>
</if>
<kw name="execute-action">
<var>${value}</var>
<arg>${action}</arg>
<arg>${input}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>${input}[value]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.530" level="INFO">${value} = </msg>
<status status="PASS" starttime="20241125 10:54:46.529" endtime="20241125 10:54:46.530"/>
</kw>
<if>
<branch type="IF" condition="'${action}[type]' == '${LAUNCH_BROWSER}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:46.531" endtime="20241125 10:54:46.531"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.530" endtime="20241125 10:54:46.531"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${NEW_PAGE}'">
<kw name="new-page" library="COMP_BrowserContext">
<arg>${input}[value]</arg>
<status status="NOT RUN" starttime="20241125 10:54:46.532" endtime="20241125 10:54:46.533"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.532" endtime="20241125 10:54:46.533"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.537" endtime="20241125 10:54:46.538"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.533" endtime="20241125 10:54:46.538"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${DOUBLE_CLICK}'">
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.544" endtime="20241125 10:54:46.544"/>
</kw>
<kw name="left-click" library="COMP_Button">
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Performs left click operation on button</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.549" endtime="20241125 10:54:46.549"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.539" endtime="20241125 10:54:46.549"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_DROPDOWN_VALUE}'">
<kw name="get-selected-option" library="COMP_Select">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the selected option
Error will thrown if multiple options selected</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.552" endtime="20241125 10:54:46.552"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.550" endtime="20241125 10:54:46.553"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_DROPDOWN_VALUE}'">
<kw name="select-single-option" library="COMP_Select">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Selects the option by given attribute</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.561" endtime="20241125 10:54:46.561"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.553" endtime="20241125 10:54:46.561"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${TYPE_TEXT}'">
<kw name="set-value" library="COMP_Textbox">
<arg>${action}[selector][xpath]</arg>
<arg>${input}[value]</arg>
<tag>component</tag>
<doc>Updates Field Value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.565" endtime="20241125 10:54:46.565"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.562" endtime="20241125 10:54:46.566"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXTBOX_VALUE}'">
<kw name="get-value" library="COMP_Textbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Returns Field Value</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.568" endtime="20241125 10:54:46.568"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.566" endtime="20241125 10:54:46.568"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_CHECKBOX_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.571" endtime="20241125 10:54:46.572"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.572" endtime="20241125 10:54:46.573"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.572" endtime="20241125 10:54:46.573"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.573" endtime="20241125 10:54:46.573"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.573" endtime="20241125 10:54:46.573"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.572" endtime="20241125 10:54:46.574"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.569" endtime="20241125 10:54:46.574"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_CHECKBOX_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:46.588" endtime="20241125 10:54:46.588"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.594" endtime="20241125 10:54:46.594"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.574" endtime="20241125 10:54:46.594"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_RADIO_VALUE}'">
<kw name="get-value" library="COMP_Checkbox">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>component</tag>
<doc>Gets the current checkbox status</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.597" endtime="20241125 10:54:46.597"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.597" endtime="20241125 10:54:46.598"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.597" endtime="20241125 10:54:46.598"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.598" endtime="20241125 10:54:46.598"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.598" endtime="20241125 10:54:46.599"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.597" endtime="20241125 10:54:46.599"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.595" endtime="20241125 10:54:46.599"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${SET_RADIO_VALUE}'">
<kw name="evaluate(${input}[value] == TRUE)">
<var>${select}</var>
<status status="NOT RUN" starttime="20241125 10:54:46.609" endtime="20241125 10:54:46.610"/>
</kw>
<kw name="set-value" library="COMP_Checkbox">
<arg>${action}[selector][xpath]</arg>
<arg>${select}</arg>
<tag>component</tag>
<doc>Updates the Field value and checks for post condition
And retries if the retry value is provided</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.615" endtime="20241125 10:54:46.615"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.599" endtime="20241125 10:54:46.615"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${IS_ELEMENT_VISIBLE}'">
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.617" endtime="20241125 10:54:46.618"/>
</kw>
<if>
<branch type="IF" condition="${value}">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>TRUE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.618" endtime="20241125 10:54:46.619"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.618" endtime="20241125 10:54:46.619"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>FALSE</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.619" endtime="20241125 10:54:46.619"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.619" endtime="20241125 10:54:46.619"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.618" endtime="20241125 10:54:46.620"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.616" endtime="20241125 10:54:46.620"/>
</branch>
<branch type="ELSE IF" condition="'${action}[type]' == '${GET_TEXT}'">
<kw name="get-property" library="UTIL_BrowserHelper">
<var>${value}</var>
<arg>${action}[selector][xpath]</arg>
<arg>innerText</arg>
<tag>util</tag>
<doc>Method used to get property</doc>
<kw name="fail-if-not-attached-after-wait" library="UTIL_Validation">
<arg>${selector}</arg>
<tag>util</tag>
<doc>Throws error if the element is not attached to the DOM
after waiting for the element state</doc>
<kw name="is-attached-after-wait" library="UTIL_BrowserHelper">
<var>${is_attached}</var>
<arg>${selector}</arg>
<tag>util</tag>
<doc>checks whether the given selector is attached to the DOM
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="is-element-state-appear-after-wait" library="UTIL_BrowserHelper">
<var>${result}</var>
<arg>${selector}</arg>
<arg>${ELEMENT_STATE_ATTACHED}</arg>
<tag>util</tag>
<doc>Used to get the element state
after waiting for the element state</doc>
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>RPA.Browser.Playwright.Wait For Elements State</arg>
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Wait For Elements State" library="RPA.Browser.Playwright">
<arg>${selector}</arg>
<arg>${state}</arg>
<arg>timeout=12s</arg>
<tag>PageContent</tag>
<tag>Wait</tag>
<doc>Waits for the element found by ``selector`` to satisfy state option.</doc>
<msg timestamp="20241125 10:54:46.642" level="INFO">Waited for Element with selector //p[text()="EMAIL"]/following-sibling::p at state attached</msg>
<status status="PASS" starttime="20241125 10:54:46.634" endtime="20241125 10:54:46.643"/>
</kw>
<msg timestamp="20241125 10:54:46.643" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.633" endtime="20241125 10:54:46.643"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:46.643" endtime="20241125 10:54:46.644"/>
</return>
<status status="PASS" starttime="20241125 10:54:46.633" endtime="20241125 10:54:46.644"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>Error while getting element state: ${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.645" endtime="20241125 10:54:46.645"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ELEMENT_NOT_ATTACHED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.646" endtime="20241125 10:54:46.646"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.644" endtime="20241125 10:54:46.646"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.632" endtime="20241125 10:54:46.647"/>
</try>
<msg timestamp="20241125 10:54:46.647" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.632" endtime="20241125 10:54:46.647"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20241125 10:54:46.648" endtime="20241125 10:54:46.648"/>
</return>
<status status="PASS" starttime="20241125 10:54:46.630" endtime="20241125 10:54:46.648"/>
</branch>
<branch type="EXCEPT">
<return>
<value>${False}</value>
<status status="NOT RUN" starttime="20241125 10:54:46.649" endtime="20241125 10:54:46.649"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.649" endtime="20241125 10:54:46.649"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.629" endtime="20241125 10:54:46.649"/>
</try>
<msg timestamp="20241125 10:54:46.651" level="INFO">${is_attached} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.629" endtime="20241125 10:54:46.651"/>
</kw>
<kw name="fail-keyword-if" library="UTIL_Validation">
<arg>${is_attached == False}</arg>
<arg>${message}</arg>
<tag>util</tag>
<doc>Throws error with a custom message if given condition satisifes
first argument must be an expression/boolean
second argument must a message
Eg: fail-keyword-if {var1 == var2} {message}</doc>
<if>
<branch type="IF" condition="${condition}">
<kw name="Log To Console" library="BuiltIn">
<arg>Conditional exception: ${message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.659" endtime="20241125 10:54:46.659"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.659" endtime="20241125 10:54:46.660"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.658" endtime="20241125 10:54:46.660"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.658" endtime="20241125 10:54:46.660"/>
</if>
<status status="PASS" starttime="20241125 10:54:46.654" endtime="20241125 10:54:46.660"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.628" endtime="20241125 10:54:46.661"/>
</kw>
<try>
<branch type="TRY">
<kw name="Get Property" library="RPA.Browser.Playwright">
<var>${property}</var>
<arg>${selector}</arg>
<arg>${property_name}</arg>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
<doc>Returns the ``property`` of the element found by ``selector``.</doc>
<msg timestamp="20241125 10:54:46.679" level="INFO">Property: 'bharani@ideas2it.com'</msg>
<msg timestamp="20241125 10:54:46.679" level="INFO">${property} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:46.661" endtime="20241125 10:54:46.679"/>
</kw>
<return>
<value>${property}</value>
<status status="PASS" starttime="20241125 10:54:46.680" endtime="20241125 10:54:46.680"/>
</return>
<status status="PASS" starttime="20241125 10:54:46.661" endtime="20241125 10:54:46.680"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.680" endtime="20241125 10:54:46.680"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>INVALID_BROWSER_ELEMENT_PROPERTY</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.681" endtime="20241125 10:54:46.681"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.680" endtime="20241125 10:54:46.681"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.661" endtime="20241125 10:54:46.681"/>
</try>
<msg timestamp="20241125 10:54:46.682" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:46.624" endtime="20241125 10:54:46.682"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.620" endtime="20241125 10:54:46.682"/>
</branch>
<branch type="ELSE">
<kw name="Log To Message">
<arg>Action not developed. Terminate the TestCase here!!!</arg>
<status status="NOT RUN" starttime="20241125 10:54:46.691" endtime="20241125 10:54:46.691"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>ACTION_NOT_DEVELOPED</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.692" endtime="20241125 10:54:46.692"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.682" endtime="20241125 10:54:46.692"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.530" endtime="20241125 10:54:46.692"/>
</if>
<kw name="Log To Console" library="BuiltIn">
<arg>${value}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:46.693" endtime="20241125 10:54:46.693"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>${input}[waitAfterAction]s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241125 10:54:46.693" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20241125 10:54:46.693" endtime="20241125 10:54:46.694"/>
</kw>
<return>
<value>${value}</value>
<status status="PASS" starttime="20241125 10:54:46.694" endtime="20241125 10:54:46.694"/>
</return>
<msg timestamp="20241125 10:54:46.694" level="INFO">${value} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:46.527" endtime="20241125 10:54:46.694"/>
</kw>
<kw name="perform-assertion">
<var>${assertion_message}</var>
<arg>${ACCUMULATION}</arg>
<arg>${assertions}</arg>
<arg>${testCaseFlowSequence}[id]</arg>
<arg>${flowActionSequence}[id]</arg>
<arg>${value}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${key}</var>
<arg>testCaseFlowSequenceId:${testCaseFlowSequenceId}::flowActionSequenceId:${flowActionSequenceId}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.696" level="INFO">${key} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:46.696" endtime="20241125 10:54:46.696"/>
</kw>
<for flavor="IN">
<var>${assertion}</var>
<value>@{assertions}</value>
<iter>
<var name="${assertion}">{'id': '2', 'testCaseId': '2', 'operator': 'SHOULD_BE_EQUAL_TO', 'source': 'testCaseFlowSequenceId:6::flowActionSequenceId:7', 'target': 'testCaseFlowSequenceId:4::flowActionSequenceId:2', 'customTarg...</var>
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${assertion}[source]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.698" level="INFO">${source} = testCaseFlowSequenceId:6::flowActionSequenceId:7</msg>
<status status="PASS" starttime="20241125 10:54:46.697" endtime="20241125 10:54:46.698"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${target}</var>
<arg>${assertion}[target]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.699" level="INFO">${target} = testCaseFlowSequenceId:4::flowActionSequenceId:2</msg>
<status status="PASS" starttime="20241125 10:54:46.698" endtime="20241125 10:54:46.700"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${skip}</var>
<arg>${assertion}[skip]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.700" level="INFO">${skip} = False</msg>
<status status="PASS" starttime="20241125 10:54:46.700" endtime="20241125 10:54:46.700"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${operator}</var>
<arg>${assertion}[operator]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.701" level="INFO">${operator} = SHOULD_BE_EQUAL_TO</msg>
<status status="PASS" starttime="20241125 10:54:46.701" endtime="20241125 10:54:46.701"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${useCustomTargetValue}</var>
<arg>${assertion}[useCustomTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.702" level="INFO">${useCustomTargetValue} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.701" endtime="20241125 10:54:46.702"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${customTargetValue}</var>
<arg>${assertion}[customTargetValue]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.702" level="INFO">${customTargetValue} = bharani@ideas2it.ai</msg>
<status status="PASS" starttime="20241125 10:54:46.702" endtime="20241125 10:54:46.702"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${errorMessage}</var>
<arg>${assertion}[errorMessage]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.703" level="INFO">${errorMessage} = Profile email and username email are not same</msg>
<status status="PASS" starttime="20241125 10:54:46.703" endtime="20241125 10:54:46.703"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${ACCUMULATION}</arg>
<arg>${key}=${value}</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:46.703" endtime="20241125 10:54:46.704"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_source_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${source}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:46.707" endtime="20241125 10:54:46.708"/>
</kw>
<msg timestamp="20241125 10:54:46.708" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.707" endtime="20241125 10:54:46.708"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.710" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:46.708" endtime="20241125 10:54:46.710"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.711" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.711" endtime="20241125 10:54:46.711"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.710" endtime="20241125 10:54:46.711"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.712" endtime="20241125 10:54:46.712"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.711" endtime="20241125 10:54:46.712"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.710" endtime="20241125 10:54:46.712"/>
</if>
<status status="PASS" starttime="20241125 10:54:46.708" endtime="20241125 10:54:46.712"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.708" endtime="20241125 10:54:46.712"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:46.712" endtime="20241125 10:54:46.712"/>
</return>
<msg timestamp="20241125 10:54:46.713" level="INFO">${is_source_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.706" endtime="20241125 10:54:46.713"/>
</kw>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_target_exists}</var>
<arg>${ACCUMULATION}</arg>
<arg>${target}</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:46.717" endtime="20241125 10:54:46.717"/>
</kw>
<msg timestamp="20241125 10:54:46.717" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.716" endtime="20241125 10:54:46.717"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.719" level="INFO">${values} = bharani@ideas2it.com</msg>
<status status="PASS" starttime="20241125 10:54:46.718" endtime="20241125 10:54:46.719"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.720" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.719" endtime="20241125 10:54:46.720"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.719" endtime="20241125 10:54:46.720"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.720" endtime="20241125 10:54:46.721"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.720" endtime="20241125 10:54:46.721"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.719" endtime="20241125 10:54:46.721"/>
</if>
<status status="PASS" starttime="20241125 10:54:46.718" endtime="20241125 10:54:46.721"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.717" endtime="20241125 10:54:46.721"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:46.721" endtime="20241125 10:54:46.721"/>
</return>
<msg timestamp="20241125 10:54:46.722" level="INFO">${is_target_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.715" endtime="20241125 10:54:46.722"/>
</kw>
<if>
<branch type="IF" condition="'${source}' == '${key}' and '${is_source_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:46.723" endtime="20241125 10:54:46.723"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.723" endtime="20241125 10:54:46.723"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.723" endtime="20241125 10:54:46.723"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<msg timestamp="20241125 10:54:46.727" level="FAIL">Profile email and username email are not same: bharani@ideas2it.com != bharani@ideas2it.ai</msg>
<status status="FAIL" starttime="20241125 10:54:46.726" endtime="20241125 10:54:46.727"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:46.728" endtime="20241125 10:54:46.728"/>
</return>
<status status="FAIL" starttime="20241125 10:54:46.725" endtime="20241125 10:54:46.729"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${customTargetValue}</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.730" endtime="20241125 10:54:46.730"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${customTargetValue}</value>
<status status="NOT RUN" starttime="20241125 10:54:46.730" endtime="20241125 10:54:46.730"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.729" endtime="20241125 10:54:46.731"/>
</branch>
<status status="FAIL" starttime="20241125 10:54:46.725" endtime="20241125 10:54:46.731"/>
</if>
<status status="FAIL" starttime="20241125 10:54:46.724" endtime="20241125 10:54:46.731"/>
</branch>
<status status="FAIL" starttime="20241125 10:54:46.724" endtime="20241125 10:54:46.731"/>
</if>
<if>
<branch type="IF" condition="$is_target_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.733" endtime="20241125 10:54:46.733"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] == ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:46.733" endtime="20241125 10:54:46.733"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.732" endtime="20241125 10:54:46.733"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.734" endtime="20241125 10:54:46.734"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${source}] != ${ACCUMULATION}[${target}]</value>
<status status="NOT RUN" starttime="20241125 10:54:46.734" endtime="20241125 10:54:46.734"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.733" endtime="20241125 10:54:46.734"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.732" endtime="20241125 10:54:46.734"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.732" endtime="20241125 10:54:46.735"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.732" endtime="20241125 10:54:46.735"/>
</if>
<status status="FAIL" starttime="20241125 10:54:46.722" endtime="20241125 10:54:46.735"/>
</branch>
<status status="FAIL" starttime="20241125 10:54:46.722" endtime="20241125 10:54:46.735"/>
</if>
<if>
<branch type="IF" condition="'${target}' == '${key}' and '${is_target_exists}' == '${True}'">
<if>
<branch type="IF" condition="$skip">
<return>
<value>Skipped assertion!!</value>
<status status="NOT RUN" starttime="20241125 10:54:46.737" endtime="20241125 10:54:46.737"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.736" endtime="20241125 10:54:46.737"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.736" endtime="20241125 10:54:46.737"/>
</if>
<if>
<branch type="IF" condition="$useCustomTargetValue">
<kw name="Log To Console" library="BuiltIn">
<arg>No need to assert here.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.737" endtime="20241125 10:54:46.738"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.737" endtime="20241125 10:54:46.738"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.737" endtime="20241125 10:54:46.738"/>
</if>
<if>
<branch type="IF" condition="$is_source_exists">
<if>
<branch type="IF" condition="'${operator}' == 'SHOULD_BE_EQUAL_TO'">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.739" endtime="20241125 10:54:46.739"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] == ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:46.739" endtime="20241125 10:54:46.739"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.738" endtime="20241125 10:54:46.739"/>
</branch>
<branch type="ELSE IF" condition="'${operator}' == 'SHOULD_NOT_BE_EQUAL_TO'">
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${ACCUMULATION}[${target}]</arg>
<arg>${ACCUMULATION}[${source}]</arg>
<arg>${errorMessage}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.739" endtime="20241125 10:54:46.740"/>
</kw>
<return>
<value>Assertion passed: ${ACCUMULATION}[${target}] != ${ACCUMULATION}[${source}]</value>
<status status="NOT RUN" starttime="20241125 10:54:46.740" endtime="20241125 10:54:46.740"/>
</return>
<status status="NOT RUN" starttime="20241125 10:54:46.739" endtime="20241125 10:54:46.740"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.738" endtime="20241125 10:54:46.740"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.738" endtime="20241125 10:54:46.740"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.738" endtime="20241125 10:54:46.740"/>
</if>
<status status="NOT RUN" starttime="20241125 10:54:46.736" endtime="20241125 10:54:46.740"/>
</branch>
<status status="NOT RUN" starttime="20241125 10:54:46.736" endtime="20241125 10:54:46.741"/>
</if>
<status status="FAIL" starttime="20241125 10:54:46.697" endtime="20241125 10:54:46.741"/>
</iter>
<status status="FAIL" starttime="20241125 10:54:46.696" endtime="20241125 10:54:46.741"/>
</for>
<status status="FAIL" starttime="20241125 10:54:46.694" endtime="20241125 10:54:46.744"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${assertion_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.746" endtime="20241125 10:54:46.748"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${EMPTY}</arg>
<arg>${assertion_message}</arg>
<status status="NOT RUN" starttime="20241125 10:54:46.748" endtime="20241125 10:54:46.748"/>
</kw>
<status status="FAIL" starttime="20241125 10:54:46.516" endtime="20241125 10:54:46.749"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:46.750" endtime="20241125 10:54:46.750"/>
</kw>
<kw name="send-action-sequence-message">
<arg>${flowActionSequence}[flowActionSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${action}</arg>
<arg>${input}</arg>
<arg>${error_message}</arg>
<kw name="is-value-not-none" library="UTIL_Collection">
<var>${is_selector_exists}</var>
<arg>${action}</arg>
<arg>selector</arg>
<tag>util</tag>
<doc>checks whether the key exists in dicitonary</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>dictionary should contain key</arg>
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${dictionary}</arg>
<arg>${key}</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20241125 10:54:46.757" endtime="20241125 10:54:46.757"/>
</kw>
<msg timestamp="20241125 10:54:46.758" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.757" endtime="20241125 10:54:46.758"/>
</kw>
<if>
<branch type="IF" condition="$no_none_exists == $True">
<kw name="Set Variable" library="BuiltIn">
<var>${values}</var>
<arg>${dictionary}[${key}]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.760" level="INFO">${values} = {'id': '6', 'name': 'Email', 'xpath': '//p[text()="EMAIL"]/following-sibling::p', 'pageId': '2', 'createdAt': '2024-11-24T16:50:29.634Z', 'updatedAt': '2024-11-24T16:50:29.634Z'}</msg>
<status status="PASS" starttime="20241125 10:54:46.759" endtime="20241125 10:54:46.760"/>
</kw>
<if>
<branch type="IF" condition="$values != $None">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.763" level="INFO">${no_none_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.763" endtime="20241125 10:54:46.763"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.762" endtime="20241125 10:54:46.764"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${no_none_exists}</var>
<arg>${False}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.764" endtime="20241125 10:54:46.764"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.764" endtime="20241125 10:54:46.764"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.760" endtime="20241125 10:54:46.764"/>
</if>
<status status="PASS" starttime="20241125 10:54:46.758" endtime="20241125 10:54:46.764"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.758" endtime="20241125 10:54:46.765"/>
</if>
<return>
<value>${no_none_exists}</value>
<status status="PASS" starttime="20241125 10:54:46.765" endtime="20241125 10:54:46.765"/>
</return>
<msg timestamp="20241125 10:54:46.765" level="INFO">${is_selector_exists} = True</msg>
<status status="PASS" starttime="20241125 10:54:46.756" endtime="20241125 10:54:46.765"/>
</kw>
<if>
<branch type="IF" condition="$is_selector_exists">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${action}[selector][xpath]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241125 10:54:46.767" level="INFO">${xpath} = //p[text()="EMAIL"]/following-sibling::p</msg>
<status status="PASS" starttime="20241125 10:54:46.766" endtime="20241125 10:54:46.767"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.766" endtime="20241125 10:54:46.767"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20241125 10:54:46.767" endtime="20241125 10:54:46.767"/>
</kw>
<status status="NOT RUN" starttime="20241125 10:54:46.767" endtime="20241125 10:54:46.767"/>
</branch>
<status status="PASS" starttime="20241125 10:54:46.765" endtime="20241125 10:54:46.767"/>
</if>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>flowActionSequenceHistoryId=${flowActionSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>actionName=${action}[name]</arg>
<arg>actionType=${action}[type]</arg>
<arg>actionXpath=${xpath}</arg>
<arg>inputValue=${input}[value]</arg>
<arg>errorMessage=${errorMessage}</arg>
<arg>assertionMessage=${assertionMessage}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20241125 10:54:46.769" level="INFO">${response_message} = {'flowActionSequenceHistoryId': '130', 'status': 'FAILED', 'actionName': 'Get profile email', 'actionType': 'GET_TEXT', 'actionXpath': '//p[text()="EMAIL"]/following-sibling::p', 'inputValue': '', 'er...</msg>
<status status="PASS" starttime="20241125 10:54:46.768" endtime="20241125 10:54:46.770"/>
</kw>
<kw name="Push response message to kafka topic" library="UTIL_Common">
<arg>${response_message}</arg>
<tag>function</tag>
<doc>push the response message to kafka topic</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${json_response}</var>
<arg>json.dumps(${payload_response_msg})</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241125 10:54:46.771" level="INFO">${json_response} = {"flowActionSequenceHistoryId": "130", "status": "FAILED", "actionName": "Get profile email", "actionType": "GET_TEXT", "actionXpath": "//p[text()=\"EMAIL\"]/following-sibling::p", "inputValue": "", "...</msg>
<status status="PASS" starttime="20241125 10:54:46.771" endtime="20241125 10:54:46.771"/>
</kw>
<kw name="Push Message To Topic" library="TopicProducer">
<var>${producer_response}</var>
<arg>${json_response}</arg>
<doc>Kafka Producer to send the response as json message and push it</doc>
<msg timestamp="20241125 10:54:46.798" level="INFO">Message delivered to response_topic [0]</msg>
<msg timestamp="20241125 10:54:46.798" level="INFO">${producer_response} = &lt;function delivery_report at 0x000002BB0FA3A430&gt;</msg>
<status status="PASS" starttime="20241125 10:54:46.772" endtime="20241125 10:54:46.798"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>kafka_producer_response:${producer_response}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:46.798" endtime="20241125 10:54:46.799"/>
</kw>
<return>
<value>${producer_response}</value>
<status status="PASS" starttime="20241125 10:54:46.800" endtime="20241125 10:54:46.800"/>
</return>
<status status="PASS" starttime="20241125 10:54:46.770" endtime="20241125 10:54:46.800"/>
</kw>
<status status="PASS" starttime="20241125 10:54:46.751" endtime="20241125 10:54:46.801"/>
</kw>
<kw name="ex-fail" library="EX_Exception">
<arg>${error_message}</arg>
<tag>exception</tag>
<doc>wrapper over the builtin Fail keyword, to support additional operations during failure</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>&lt;===Error occurred:${exception}===&gt;</arg>
<arg>ERROR</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:46.803" endtime="20241125 10:54:46.804"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>${exception}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20241125 10:54:46.806" level="FAIL">Profile email and username email are not same: bharani@ideas2it.com != bharani@ideas2it.ai</msg>
<status status="FAIL" starttime="20241125 10:54:46.805" endtime="20241125 10:54:46.806"/>
</kw>
<status status="FAIL" starttime="20241125 10:54:46.801" endtime="20241125 10:54:46.809"/>
</kw>
<status status="FAIL" starttime="20241125 10:54:46.749" endtime="20241125 10:54:46.810"/>
</branch>
<status status="FAIL" starttime="20241125 10:54:46.516" endtime="20241125 10:54:46.810"/>
</try>
<status status="FAIL" starttime="20241125 10:54:46.515" endtime="20241125 10:54:46.811"/>
</iter>
<status status="FAIL" starttime="20241125 10:54:46.514" endtime="20241125 10:54:46.812"/>
</for>
<status status="FAIL" starttime="20241125 10:54:46.513" endtime="20241125 10:54:46.812"/>
</branch>
<status status="FAIL" starttime="20241125 10:54:46.512" endtime="20241125 10:54:46.812"/>
</if>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>COMPLETED</arg>
<status status="NOT RUN" starttime="20241125 10:54:46.813" endtime="20241125 10:54:46.814"/>
</kw>
<status status="FAIL" starttime="20241125 10:54:46.483" endtime="20241125 10:54:46.814"/>
</branch>
<branch type="EXCEPT" variable="${error_message}">
<kw name="Log To Console" library="BuiltIn">
<arg>${error_message}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20241125 10:54:46.815" endtime="20241125 10:54:46.816"/>
</kw>
<kw name="send-flow-sequence-message">
<arg>${testCaseFlowSequence}[testCaseFlowSequenceHistoryId]</arg>
<arg>FAILED</arg>
<arg>${error_message}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${response_message}</var>
<arg>testCaseFlowSequenceHistoryId=${testCaseFlowSequenceHistoryId}</arg>
<arg>status=${status}</arg>
<arg>